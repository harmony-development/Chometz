// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/streaming.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fstreaming_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fstreaming_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "chat/v1/permissions.pb.h"
#include "chat/v1/emotes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fstreaming_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fstreaming_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_ActionPerformed;
class Event_ActionPerformedDefaultTypeInternal;
extern Event_ActionPerformedDefaultTypeInternal _Event_ActionPerformed_default_instance_;
class Event_ChannelCreated;
class Event_ChannelCreatedDefaultTypeInternal;
extern Event_ChannelCreatedDefaultTypeInternal _Event_ChannelCreated_default_instance_;
class Event_ChannelDeleted;
class Event_ChannelDeletedDefaultTypeInternal;
extern Event_ChannelDeletedDefaultTypeInternal _Event_ChannelDeleted_default_instance_;
class Event_ChannelUpdated;
class Event_ChannelUpdatedDefaultTypeInternal;
extern Event_ChannelUpdatedDefaultTypeInternal _Event_ChannelUpdated_default_instance_;
class Event_ChannelsReordered;
class Event_ChannelsReorderedDefaultTypeInternal;
extern Event_ChannelsReorderedDefaultTypeInternal _Event_ChannelsReordered_default_instance_;
class Event_EmotePackAdded;
class Event_EmotePackAddedDefaultTypeInternal;
extern Event_EmotePackAddedDefaultTypeInternal _Event_EmotePackAdded_default_instance_;
class Event_EmotePackDeleted;
class Event_EmotePackDeletedDefaultTypeInternal;
extern Event_EmotePackDeletedDefaultTypeInternal _Event_EmotePackDeleted_default_instance_;
class Event_EmotePackEmotesUpdated;
class Event_EmotePackEmotesUpdatedDefaultTypeInternal;
extern Event_EmotePackEmotesUpdatedDefaultTypeInternal _Event_EmotePackEmotesUpdated_default_instance_;
class Event_EmotePackUpdated;
class Event_EmotePackUpdatedDefaultTypeInternal;
extern Event_EmotePackUpdatedDefaultTypeInternal _Event_EmotePackUpdated_default_instance_;
class Event_GuildAddedToList;
class Event_GuildAddedToListDefaultTypeInternal;
extern Event_GuildAddedToListDefaultTypeInternal _Event_GuildAddedToList_default_instance_;
class Event_GuildDeleted;
class Event_GuildDeletedDefaultTypeInternal;
extern Event_GuildDeletedDefaultTypeInternal _Event_GuildDeleted_default_instance_;
class Event_GuildRemovedFromList;
class Event_GuildRemovedFromListDefaultTypeInternal;
extern Event_GuildRemovedFromListDefaultTypeInternal _Event_GuildRemovedFromList_default_instance_;
class Event_GuildUpdated;
class Event_GuildUpdatedDefaultTypeInternal;
extern Event_GuildUpdatedDefaultTypeInternal _Event_GuildUpdated_default_instance_;
class Event_MemberJoined;
class Event_MemberJoinedDefaultTypeInternal;
extern Event_MemberJoinedDefaultTypeInternal _Event_MemberJoined_default_instance_;
class Event_MemberLeft;
class Event_MemberLeftDefaultTypeInternal;
extern Event_MemberLeftDefaultTypeInternal _Event_MemberLeft_default_instance_;
class Event_MessageDeleted;
class Event_MessageDeletedDefaultTypeInternal;
extern Event_MessageDeletedDefaultTypeInternal _Event_MessageDeleted_default_instance_;
class Event_MessageSent;
class Event_MessageSentDefaultTypeInternal;
extern Event_MessageSentDefaultTypeInternal _Event_MessageSent_default_instance_;
class Event_MessageUpdated;
class Event_MessageUpdatedDefaultTypeInternal;
extern Event_MessageUpdatedDefaultTypeInternal _Event_MessageUpdated_default_instance_;
class Event_PermissionUpdated;
class Event_PermissionUpdatedDefaultTypeInternal;
extern Event_PermissionUpdatedDefaultTypeInternal _Event_PermissionUpdated_default_instance_;
class Event_ProfileUpdated;
class Event_ProfileUpdatedDefaultTypeInternal;
extern Event_ProfileUpdatedDefaultTypeInternal _Event_ProfileUpdated_default_instance_;
class Event_RoleCreated;
class Event_RoleCreatedDefaultTypeInternal;
extern Event_RoleCreatedDefaultTypeInternal _Event_RoleCreated_default_instance_;
class Event_RoleDeleted;
class Event_RoleDeletedDefaultTypeInternal;
extern Event_RoleDeletedDefaultTypeInternal _Event_RoleDeleted_default_instance_;
class Event_RoleMoved;
class Event_RoleMovedDefaultTypeInternal;
extern Event_RoleMovedDefaultTypeInternal _Event_RoleMoved_default_instance_;
class Event_RolePermissionsUpdated;
class Event_RolePermissionsUpdatedDefaultTypeInternal;
extern Event_RolePermissionsUpdatedDefaultTypeInternal _Event_RolePermissionsUpdated_default_instance_;
class Event_RoleUpdated;
class Event_RoleUpdatedDefaultTypeInternal;
extern Event_RoleUpdatedDefaultTypeInternal _Event_RoleUpdated_default_instance_;
class Event_Typing;
class Event_TypingDefaultTypeInternal;
extern Event_TypingDefaultTypeInternal _Event_Typing_default_instance_;
class Event_UserRolesUpdated;
class Event_UserRolesUpdatedDefaultTypeInternal;
extern Event_UserRolesUpdatedDefaultTypeInternal _Event_UserRolesUpdated_default_instance_;
class StreamEventsRequest;
class StreamEventsRequestDefaultTypeInternal;
extern StreamEventsRequestDefaultTypeInternal _StreamEventsRequest_default_instance_;
class StreamEventsRequest_SubscribeToActions;
class StreamEventsRequest_SubscribeToActionsDefaultTypeInternal;
extern StreamEventsRequest_SubscribeToActionsDefaultTypeInternal _StreamEventsRequest_SubscribeToActions_default_instance_;
class StreamEventsRequest_SubscribeToGuild;
class StreamEventsRequest_SubscribeToGuildDefaultTypeInternal;
extern StreamEventsRequest_SubscribeToGuildDefaultTypeInternal _StreamEventsRequest_SubscribeToGuild_default_instance_;
class StreamEventsRequest_SubscribeToHomeserverEvents;
class StreamEventsRequest_SubscribeToHomeserverEventsDefaultTypeInternal;
extern StreamEventsRequest_SubscribeToHomeserverEventsDefaultTypeInternal _StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::Event* Arena::CreateMaybeMessage<::protocol::chat::v1::Event>(Arena*);
template<> ::protocol::chat::v1::Event_ActionPerformed* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ActionPerformed>(Arena*);
template<> ::protocol::chat::v1::Event_ChannelCreated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ChannelCreated>(Arena*);
template<> ::protocol::chat::v1::Event_ChannelDeleted* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ChannelDeleted>(Arena*);
template<> ::protocol::chat::v1::Event_ChannelUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ChannelUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_ChannelsReordered* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ChannelsReordered>(Arena*);
template<> ::protocol::chat::v1::Event_EmotePackAdded* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_EmotePackAdded>(Arena*);
template<> ::protocol::chat::v1::Event_EmotePackDeleted* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_EmotePackDeleted>(Arena*);
template<> ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_EmotePackEmotesUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_EmotePackUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_EmotePackUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_GuildAddedToList* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_GuildAddedToList>(Arena*);
template<> ::protocol::chat::v1::Event_GuildDeleted* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_GuildDeleted>(Arena*);
template<> ::protocol::chat::v1::Event_GuildRemovedFromList* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_GuildRemovedFromList>(Arena*);
template<> ::protocol::chat::v1::Event_GuildUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_GuildUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_MemberJoined* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_MemberJoined>(Arena*);
template<> ::protocol::chat::v1::Event_MemberLeft* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_MemberLeft>(Arena*);
template<> ::protocol::chat::v1::Event_MessageDeleted* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_MessageDeleted>(Arena*);
template<> ::protocol::chat::v1::Event_MessageSent* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_MessageSent>(Arena*);
template<> ::protocol::chat::v1::Event_MessageUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_MessageUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_PermissionUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_PermissionUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_ProfileUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_ProfileUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_RoleCreated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_RoleCreated>(Arena*);
template<> ::protocol::chat::v1::Event_RoleDeleted* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_RoleDeleted>(Arena*);
template<> ::protocol::chat::v1::Event_RoleMoved* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_RoleMoved>(Arena*);
template<> ::protocol::chat::v1::Event_RolePermissionsUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_RolePermissionsUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_RoleUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_RoleUpdated>(Arena*);
template<> ::protocol::chat::v1::Event_Typing* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_Typing>(Arena*);
template<> ::protocol::chat::v1::Event_UserRolesUpdated* Arena::CreateMaybeMessage<::protocol::chat::v1::Event_UserRolesUpdated>(Arena*);
template<> ::protocol::chat::v1::StreamEventsRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::StreamEventsRequest>(Arena*);
template<> ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* Arena::CreateMaybeMessage<::protocol::chat::v1::StreamEventsRequest_SubscribeToActions>(Arena*);
template<> ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* Arena::CreateMaybeMessage<::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild>(Arena*);
template<> ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* Arena::CreateMaybeMessage<::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

enum Event_LeaveReason : int {
  Event_LeaveReason_willingly = 0,
  Event_LeaveReason_banned = 1,
  Event_LeaveReason_kicked = 2,
  Event_LeaveReason_Event_LeaveReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Event_LeaveReason_Event_LeaveReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Event_LeaveReason_IsValid(int value);
constexpr Event_LeaveReason Event_LeaveReason_LeaveReason_MIN = Event_LeaveReason_willingly;
constexpr Event_LeaveReason Event_LeaveReason_LeaveReason_MAX = Event_LeaveReason_kicked;
constexpr int Event_LeaveReason_LeaveReason_ARRAYSIZE = Event_LeaveReason_LeaveReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_LeaveReason_descriptor();
template<typename T>
inline const std::string& Event_LeaveReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Event_LeaveReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Event_LeaveReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Event_LeaveReason_descriptor(), enum_t_value);
}
inline bool Event_LeaveReason_Parse(
    const std::string& name, Event_LeaveReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_LeaveReason>(
    Event_LeaveReason_descriptor(), name, value);
}
// ===================================================================

class StreamEventsRequest_SubscribeToGuild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild) */ {
 public:
  inline StreamEventsRequest_SubscribeToGuild() : StreamEventsRequest_SubscribeToGuild(nullptr) {};
  virtual ~StreamEventsRequest_SubscribeToGuild();

  StreamEventsRequest_SubscribeToGuild(const StreamEventsRequest_SubscribeToGuild& from);
  StreamEventsRequest_SubscribeToGuild(StreamEventsRequest_SubscribeToGuild&& from) noexcept
    : StreamEventsRequest_SubscribeToGuild() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest_SubscribeToGuild& operator=(const StreamEventsRequest_SubscribeToGuild& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest_SubscribeToGuild& operator=(StreamEventsRequest_SubscribeToGuild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventsRequest_SubscribeToGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventsRequest_SubscribeToGuild* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest_SubscribeToGuild*>(
               &_StreamEventsRequest_SubscribeToGuild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamEventsRequest_SubscribeToGuild& a, StreamEventsRequest_SubscribeToGuild& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest_SubscribeToGuild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest_SubscribeToGuild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventsRequest_SubscribeToGuild* New() const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToGuild>(nullptr);
  }

  StreamEventsRequest_SubscribeToGuild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToGuild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventsRequest_SubscribeToGuild& from);
  void MergeFrom(const StreamEventsRequest_SubscribeToGuild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest_SubscribeToGuild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.StreamEventsRequest.SubscribeToGuild";
  }
  protected:
  explicit StreamEventsRequest_SubscribeToGuild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsRequest_SubscribeToActions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.StreamEventsRequest.SubscribeToActions) */ {
 public:
  inline StreamEventsRequest_SubscribeToActions() : StreamEventsRequest_SubscribeToActions(nullptr) {};
  virtual ~StreamEventsRequest_SubscribeToActions();

  StreamEventsRequest_SubscribeToActions(const StreamEventsRequest_SubscribeToActions& from);
  StreamEventsRequest_SubscribeToActions(StreamEventsRequest_SubscribeToActions&& from) noexcept
    : StreamEventsRequest_SubscribeToActions() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest_SubscribeToActions& operator=(const StreamEventsRequest_SubscribeToActions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest_SubscribeToActions& operator=(StreamEventsRequest_SubscribeToActions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventsRequest_SubscribeToActions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventsRequest_SubscribeToActions* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest_SubscribeToActions*>(
               &_StreamEventsRequest_SubscribeToActions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamEventsRequest_SubscribeToActions& a, StreamEventsRequest_SubscribeToActions& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest_SubscribeToActions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest_SubscribeToActions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventsRequest_SubscribeToActions* New() const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToActions>(nullptr);
  }

  StreamEventsRequest_SubscribeToActions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToActions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventsRequest_SubscribeToActions& from);
  void MergeFrom(const StreamEventsRequest_SubscribeToActions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest_SubscribeToActions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.StreamEventsRequest.SubscribeToActions";
  }
  protected:
  explicit StreamEventsRequest_SubscribeToActions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsRequest_SubscribeToHomeserverEvents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents) */ {
 public:
  inline StreamEventsRequest_SubscribeToHomeserverEvents() : StreamEventsRequest_SubscribeToHomeserverEvents(nullptr) {};
  virtual ~StreamEventsRequest_SubscribeToHomeserverEvents();

  StreamEventsRequest_SubscribeToHomeserverEvents(const StreamEventsRequest_SubscribeToHomeserverEvents& from);
  StreamEventsRequest_SubscribeToHomeserverEvents(StreamEventsRequest_SubscribeToHomeserverEvents&& from) noexcept
    : StreamEventsRequest_SubscribeToHomeserverEvents() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest_SubscribeToHomeserverEvents& operator=(const StreamEventsRequest_SubscribeToHomeserverEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest_SubscribeToHomeserverEvents& operator=(StreamEventsRequest_SubscribeToHomeserverEvents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventsRequest_SubscribeToHomeserverEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventsRequest_SubscribeToHomeserverEvents* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest_SubscribeToHomeserverEvents*>(
               &_StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamEventsRequest_SubscribeToHomeserverEvents& a, StreamEventsRequest_SubscribeToHomeserverEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest_SubscribeToHomeserverEvents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest_SubscribeToHomeserverEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventsRequest_SubscribeToHomeserverEvents* New() const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToHomeserverEvents>(nullptr);
  }

  StreamEventsRequest_SubscribeToHomeserverEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventsRequest_SubscribeToHomeserverEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventsRequest_SubscribeToHomeserverEvents& from);
  void MergeFrom(const StreamEventsRequest_SubscribeToHomeserverEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest_SubscribeToHomeserverEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents";
  }
  protected:
  explicit StreamEventsRequest_SubscribeToHomeserverEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.StreamEventsRequest) */ {
 public:
  inline StreamEventsRequest() : StreamEventsRequest(nullptr) {};
  virtual ~StreamEventsRequest();

  StreamEventsRequest(const StreamEventsRequest& from);
  StreamEventsRequest(StreamEventsRequest&& from) noexcept
    : StreamEventsRequest() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest& operator=(const StreamEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest& operator=(StreamEventsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamEventsRequest& default_instance();

  enum RequestCase {
    kSubscribeToGuild = 1,
    kSubscribeToActions = 2,
    kSubscribeToHomeserverEvents = 3,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamEventsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest*>(
               &_StreamEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamEventsRequest& a, StreamEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamEventsRequest* New() const final {
    return CreateMaybeMessage<StreamEventsRequest>(nullptr);
  }

  StreamEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamEventsRequest& from);
  void MergeFrom(const StreamEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.StreamEventsRequest";
  }
  protected:
  explicit StreamEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamEventsRequest_SubscribeToGuild SubscribeToGuild;
  typedef StreamEventsRequest_SubscribeToActions SubscribeToActions;
  typedef StreamEventsRequest_SubscribeToHomeserverEvents SubscribeToHomeserverEvents;

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeToGuildFieldNumber = 1,
    kSubscribeToActionsFieldNumber = 2,
    kSubscribeToHomeserverEventsFieldNumber = 3,
  };
  // .protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
  bool has_subscribe_to_guild() const;
  private:
  bool _internal_has_subscribe_to_guild() const;
  public:
  void clear_subscribe_to_guild();
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild& subscribe_to_guild() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* release_subscribe_to_guild();
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* mutable_subscribe_to_guild();
  void set_allocated_subscribe_to_guild(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild);
  private:
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild& _internal_subscribe_to_guild() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* _internal_mutable_subscribe_to_guild();
  public:
  void unsafe_arena_set_allocated_subscribe_to_guild(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild);
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* unsafe_arena_release_subscribe_to_guild();

  // .protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
  bool has_subscribe_to_actions() const;
  private:
  bool _internal_has_subscribe_to_actions() const;
  public:
  void clear_subscribe_to_actions();
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions& subscribe_to_actions() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* release_subscribe_to_actions();
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* mutable_subscribe_to_actions();
  void set_allocated_subscribe_to_actions(::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions);
  private:
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions& _internal_subscribe_to_actions() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* _internal_mutable_subscribe_to_actions();
  public:
  void unsafe_arena_set_allocated_subscribe_to_actions(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions);
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* unsafe_arena_release_subscribe_to_actions();

  // .protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
  bool has_subscribe_to_homeserver_events() const;
  private:
  bool _internal_has_subscribe_to_homeserver_events() const;
  public:
  void clear_subscribe_to_homeserver_events();
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents& subscribe_to_homeserver_events() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* release_subscribe_to_homeserver_events();
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* mutable_subscribe_to_homeserver_events();
  void set_allocated_subscribe_to_homeserver_events(::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events);
  private:
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents& _internal_subscribe_to_homeserver_events() const;
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* _internal_mutable_subscribe_to_homeserver_events();
  public:
  void unsafe_arena_set_allocated_subscribe_to_homeserver_events(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events);
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* unsafe_arena_release_subscribe_to_homeserver_events();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:protocol.chat.v1.StreamEventsRequest)
 private:
  class _Internal;
  void set_has_subscribe_to_guild();
  void set_has_subscribe_to_actions();
  void set_has_subscribe_to_homeserver_events();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    RequestUnion() {}
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild_;
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions_;
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_MessageSent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.MessageSent) */ {
 public:
  inline Event_MessageSent() : Event_MessageSent(nullptr) {};
  virtual ~Event_MessageSent();

  Event_MessageSent(const Event_MessageSent& from);
  Event_MessageSent(Event_MessageSent&& from) noexcept
    : Event_MessageSent() {
    *this = ::std::move(from);
  }

  inline Event_MessageSent& operator=(const Event_MessageSent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_MessageSent& operator=(Event_MessageSent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_MessageSent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_MessageSent* internal_default_instance() {
    return reinterpret_cast<const Event_MessageSent*>(
               &_Event_MessageSent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Event_MessageSent& a, Event_MessageSent& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_MessageSent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_MessageSent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_MessageSent* New() const final {
    return CreateMaybeMessage<Event_MessageSent>(nullptr);
  }

  Event_MessageSent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_MessageSent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_MessageSent& from);
  void MergeFrom(const Event_MessageSent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_MessageSent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.MessageSent";
  }
  protected:
  explicit Event_MessageSent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kEchoIdFieldNumber = 1,
  };
  // .protocol.harmonytypes.v1.Message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::protocol::harmonytypes::v1::Message& message() const;
  ::protocol::harmonytypes::v1::Message* release_message();
  ::protocol::harmonytypes::v1::Message* mutable_message();
  void set_allocated_message(::protocol::harmonytypes::v1::Message* message);
  private:
  const ::protocol::harmonytypes::v1::Message& _internal_message() const;
  ::protocol::harmonytypes::v1::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::protocol::harmonytypes::v1::Message* message);
  ::protocol::harmonytypes::v1::Message* unsafe_arena_release_message();

  // uint64 echo_id = 1;
  void clear_echo_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_id() const;
  void set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_echo_id() const;
  void _internal_set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.MessageSent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::harmonytypes::v1::Message* message_;
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_MessageUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.MessageUpdated) */ {
 public:
  inline Event_MessageUpdated() : Event_MessageUpdated(nullptr) {};
  virtual ~Event_MessageUpdated();

  Event_MessageUpdated(const Event_MessageUpdated& from);
  Event_MessageUpdated(Event_MessageUpdated&& from) noexcept
    : Event_MessageUpdated() {
    *this = ::std::move(from);
  }

  inline Event_MessageUpdated& operator=(const Event_MessageUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_MessageUpdated& operator=(Event_MessageUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_MessageUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_MessageUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_MessageUpdated*>(
               &_Event_MessageUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Event_MessageUpdated& a, Event_MessageUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_MessageUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_MessageUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_MessageUpdated* New() const final {
    return CreateMaybeMessage<Event_MessageUpdated>(nullptr);
  }

  Event_MessageUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_MessageUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_MessageUpdated& from);
  void MergeFrom(const Event_MessageUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_MessageUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.MessageUpdated";
  }
  protected:
  explicit Event_MessageUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 5,
    kEditedAtFieldNumber = 4,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // string content = 5;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .google.protobuf.Timestamp edited_at = 4;
  bool has_edited_at() const;
  private:
  bool _internal_has_edited_at() const;
  public:
  void clear_edited_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edited_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edited_at();
  void set_allocated_edited_at(PROTOBUF_NAMESPACE_ID::Timestamp* edited_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edited_at();
  public:
  void unsafe_arena_set_allocated_edited_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* edited_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edited_at();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.MessageUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edited_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_MessageDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.MessageDeleted) */ {
 public:
  inline Event_MessageDeleted() : Event_MessageDeleted(nullptr) {};
  virtual ~Event_MessageDeleted();

  Event_MessageDeleted(const Event_MessageDeleted& from);
  Event_MessageDeleted(Event_MessageDeleted&& from) noexcept
    : Event_MessageDeleted() {
    *this = ::std::move(from);
  }

  inline Event_MessageDeleted& operator=(const Event_MessageDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_MessageDeleted& operator=(Event_MessageDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_MessageDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_MessageDeleted* internal_default_instance() {
    return reinterpret_cast<const Event_MessageDeleted*>(
               &_Event_MessageDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Event_MessageDeleted& a, Event_MessageDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_MessageDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_MessageDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_MessageDeleted* New() const final {
    return CreateMaybeMessage<Event_MessageDeleted>(nullptr);
  }

  Event_MessageDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_MessageDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_MessageDeleted& from);
  void MergeFrom(const Event_MessageDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_MessageDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.MessageDeleted";
  }
  protected:
  explicit Event_MessageDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.MessageDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ChannelCreated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ChannelCreated) */ {
 public:
  inline Event_ChannelCreated() : Event_ChannelCreated(nullptr) {};
  virtual ~Event_ChannelCreated();

  Event_ChannelCreated(const Event_ChannelCreated& from);
  Event_ChannelCreated(Event_ChannelCreated&& from) noexcept
    : Event_ChannelCreated() {
    *this = ::std::move(from);
  }

  inline Event_ChannelCreated& operator=(const Event_ChannelCreated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ChannelCreated& operator=(Event_ChannelCreated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ChannelCreated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ChannelCreated* internal_default_instance() {
    return reinterpret_cast<const Event_ChannelCreated*>(
               &_Event_ChannelCreated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Event_ChannelCreated& a, Event_ChannelCreated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ChannelCreated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ChannelCreated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ChannelCreated* New() const final {
    return CreateMaybeMessage<Event_ChannelCreated>(nullptr);
  }

  Event_ChannelCreated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ChannelCreated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ChannelCreated& from);
  void MergeFrom(const Event_ChannelCreated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ChannelCreated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ChannelCreated";
  }
  protected:
  explicit Event_ChannelCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kMetadataFieldNumber = 7,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kPreviousIdFieldNumber = 4,
    kNextIdFieldNumber = 5,
    kIsCategoryFieldNumber = 6,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 previous_id = 4;
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 5;
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_category = 6;
  void clear_is_category();
  bool is_category() const;
  void set_is_category(bool value);
  private:
  bool _internal_is_category() const;
  void _internal_set_is_category(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ChannelCreated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  bool is_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ChannelUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ChannelUpdated) */ {
 public:
  inline Event_ChannelUpdated() : Event_ChannelUpdated(nullptr) {};
  virtual ~Event_ChannelUpdated();

  Event_ChannelUpdated(const Event_ChannelUpdated& from);
  Event_ChannelUpdated(Event_ChannelUpdated&& from) noexcept
    : Event_ChannelUpdated() {
    *this = ::std::move(from);
  }

  inline Event_ChannelUpdated& operator=(const Event_ChannelUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ChannelUpdated& operator=(Event_ChannelUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ChannelUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ChannelUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_ChannelUpdated*>(
               &_Event_ChannelUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Event_ChannelUpdated& a, Event_ChannelUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ChannelUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ChannelUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ChannelUpdated* New() const final {
    return CreateMaybeMessage<Event_ChannelUpdated>(nullptr);
  }

  Event_ChannelUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ChannelUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ChannelUpdated& from);
  void MergeFrom(const Event_ChannelUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ChannelUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ChannelUpdated";
  }
  protected:
  explicit Event_ChannelUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kMetadataFieldNumber = 8,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kPreviousIdFieldNumber = 5,
    kNextIdFieldNumber = 6,
    kUpdateNameFieldNumber = 4,
    kUpdateOrderFieldNumber = 7,
    kUpdateMetadataFieldNumber = 9,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 8;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 previous_id = 5;
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 6;
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_name = 4;
  void clear_update_name();
  bool update_name() const;
  void set_update_name(bool value);
  private:
  bool _internal_update_name() const;
  void _internal_set_update_name(bool value);
  public:

  // bool update_order = 7;
  void clear_update_order();
  bool update_order() const;
  void set_update_order(bool value);
  private:
  bool _internal_update_order() const;
  void _internal_set_update_order(bool value);
  public:

  // bool update_metadata = 9;
  void clear_update_metadata();
  bool update_metadata() const;
  void set_update_metadata(bool value);
  private:
  bool _internal_update_metadata() const;
  void _internal_set_update_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ChannelUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  bool update_name_;
  bool update_order_;
  bool update_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ChannelsReordered PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ChannelsReordered) */ {
 public:
  inline Event_ChannelsReordered() : Event_ChannelsReordered(nullptr) {};
  virtual ~Event_ChannelsReordered();

  Event_ChannelsReordered(const Event_ChannelsReordered& from);
  Event_ChannelsReordered(Event_ChannelsReordered&& from) noexcept
    : Event_ChannelsReordered() {
    *this = ::std::move(from);
  }

  inline Event_ChannelsReordered& operator=(const Event_ChannelsReordered& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ChannelsReordered& operator=(Event_ChannelsReordered&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ChannelsReordered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ChannelsReordered* internal_default_instance() {
    return reinterpret_cast<const Event_ChannelsReordered*>(
               &_Event_ChannelsReordered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Event_ChannelsReordered& a, Event_ChannelsReordered& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ChannelsReordered* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ChannelsReordered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ChannelsReordered* New() const final {
    return CreateMaybeMessage<Event_ChannelsReordered>(nullptr);
  }

  Event_ChannelsReordered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ChannelsReordered>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ChannelsReordered& from);
  void MergeFrom(const Event_ChannelsReordered& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ChannelsReordered* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ChannelsReordered";
  }
  protected:
  explicit Event_ChannelsReordered(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdsFieldNumber = 1,
    kGuildIdFieldNumber = 2,
  };
  // repeated uint64 channel_ids = 1;
  int channel_ids_size() const;
  private:
  int _internal_channel_ids_size() const;
  public:
  void clear_channel_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_channel_ids() const;
  void _internal_add_channel_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_channel_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_ids(int index) const;
  void set_channel_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_channel_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      channel_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_channel_ids();

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ChannelsReordered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > channel_ids_;
  mutable std::atomic<int> _channel_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ChannelDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ChannelDeleted) */ {
 public:
  inline Event_ChannelDeleted() : Event_ChannelDeleted(nullptr) {};
  virtual ~Event_ChannelDeleted();

  Event_ChannelDeleted(const Event_ChannelDeleted& from);
  Event_ChannelDeleted(Event_ChannelDeleted&& from) noexcept
    : Event_ChannelDeleted() {
    *this = ::std::move(from);
  }

  inline Event_ChannelDeleted& operator=(const Event_ChannelDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ChannelDeleted& operator=(Event_ChannelDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ChannelDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ChannelDeleted* internal_default_instance() {
    return reinterpret_cast<const Event_ChannelDeleted*>(
               &_Event_ChannelDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Event_ChannelDeleted& a, Event_ChannelDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ChannelDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ChannelDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ChannelDeleted* New() const final {
    return CreateMaybeMessage<Event_ChannelDeleted>(nullptr);
  }

  Event_ChannelDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ChannelDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ChannelDeleted& from);
  void MergeFrom(const Event_ChannelDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ChannelDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ChannelDeleted";
  }
  protected:
  explicit Event_ChannelDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ChannelDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_GuildUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.GuildUpdated) */ {
 public:
  inline Event_GuildUpdated() : Event_GuildUpdated(nullptr) {};
  virtual ~Event_GuildUpdated();

  Event_GuildUpdated(const Event_GuildUpdated& from);
  Event_GuildUpdated(Event_GuildUpdated&& from) noexcept
    : Event_GuildUpdated() {
    *this = ::std::move(from);
  }

  inline Event_GuildUpdated& operator=(const Event_GuildUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_GuildUpdated& operator=(Event_GuildUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_GuildUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_GuildUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_GuildUpdated*>(
               &_Event_GuildUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Event_GuildUpdated& a, Event_GuildUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_GuildUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_GuildUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_GuildUpdated* New() const final {
    return CreateMaybeMessage<Event_GuildUpdated>(nullptr);
  }

  Event_GuildUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_GuildUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_GuildUpdated& from);
  void MergeFrom(const Event_GuildUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_GuildUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.GuildUpdated";
  }
  protected:
  explicit Event_GuildUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPictureFieldNumber = 4,
    kMetadataFieldNumber = 6,
    kGuildIdFieldNumber = 1,
    kUpdateNameFieldNumber = 3,
    kUpdatePictureFieldNumber = 5,
    kUpdateMetadataFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string picture = 4;
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_picture();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_picture(
      std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_name = 3;
  void clear_update_name();
  bool update_name() const;
  void set_update_name(bool value);
  private:
  bool _internal_update_name() const;
  void _internal_set_update_name(bool value);
  public:

  // bool update_picture = 5;
  void clear_update_picture();
  bool update_picture() const;
  void set_update_picture(bool value);
  private:
  bool _internal_update_picture() const;
  void _internal_set_update_picture(bool value);
  public:

  // bool update_metadata = 7;
  void clear_update_metadata();
  bool update_metadata() const;
  void set_update_metadata(bool value);
  private:
  bool _internal_update_metadata() const;
  void _internal_set_update_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.GuildUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  bool update_name_;
  bool update_picture_;
  bool update_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_GuildDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.GuildDeleted) */ {
 public:
  inline Event_GuildDeleted() : Event_GuildDeleted(nullptr) {};
  virtual ~Event_GuildDeleted();

  Event_GuildDeleted(const Event_GuildDeleted& from);
  Event_GuildDeleted(Event_GuildDeleted&& from) noexcept
    : Event_GuildDeleted() {
    *this = ::std::move(from);
  }

  inline Event_GuildDeleted& operator=(const Event_GuildDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_GuildDeleted& operator=(Event_GuildDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_GuildDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_GuildDeleted* internal_default_instance() {
    return reinterpret_cast<const Event_GuildDeleted*>(
               &_Event_GuildDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Event_GuildDeleted& a, Event_GuildDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_GuildDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_GuildDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_GuildDeleted* New() const final {
    return CreateMaybeMessage<Event_GuildDeleted>(nullptr);
  }

  Event_GuildDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_GuildDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_GuildDeleted& from);
  void MergeFrom(const Event_GuildDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_GuildDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.GuildDeleted";
  }
  protected:
  explicit Event_GuildDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.GuildDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_MemberJoined PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.MemberJoined) */ {
 public:
  inline Event_MemberJoined() : Event_MemberJoined(nullptr) {};
  virtual ~Event_MemberJoined();

  Event_MemberJoined(const Event_MemberJoined& from);
  Event_MemberJoined(Event_MemberJoined&& from) noexcept
    : Event_MemberJoined() {
    *this = ::std::move(from);
  }

  inline Event_MemberJoined& operator=(const Event_MemberJoined& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_MemberJoined& operator=(Event_MemberJoined&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_MemberJoined& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_MemberJoined* internal_default_instance() {
    return reinterpret_cast<const Event_MemberJoined*>(
               &_Event_MemberJoined_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Event_MemberJoined& a, Event_MemberJoined& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_MemberJoined* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_MemberJoined* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_MemberJoined* New() const final {
    return CreateMaybeMessage<Event_MemberJoined>(nullptr);
  }

  Event_MemberJoined* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_MemberJoined>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_MemberJoined& from);
  void MergeFrom(const Event_MemberJoined& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_MemberJoined* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.MemberJoined";
  }
  protected:
  explicit Event_MemberJoined(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
  };
  // uint64 member_id = 1;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.MemberJoined)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_MemberLeft PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.MemberLeft) */ {
 public:
  inline Event_MemberLeft() : Event_MemberLeft(nullptr) {};
  virtual ~Event_MemberLeft();

  Event_MemberLeft(const Event_MemberLeft& from);
  Event_MemberLeft(Event_MemberLeft&& from) noexcept
    : Event_MemberLeft() {
    *this = ::std::move(from);
  }

  inline Event_MemberLeft& operator=(const Event_MemberLeft& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_MemberLeft& operator=(Event_MemberLeft&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_MemberLeft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_MemberLeft* internal_default_instance() {
    return reinterpret_cast<const Event_MemberLeft*>(
               &_Event_MemberLeft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Event_MemberLeft& a, Event_MemberLeft& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_MemberLeft* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_MemberLeft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_MemberLeft* New() const final {
    return CreateMaybeMessage<Event_MemberLeft>(nullptr);
  }

  Event_MemberLeft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_MemberLeft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_MemberLeft& from);
  void MergeFrom(const Event_MemberLeft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_MemberLeft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.MemberLeft";
  }
  protected:
  explicit Event_MemberLeft(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
    kLeaveReasonFieldNumber = 3,
  };
  // uint64 member_id = 1;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .protocol.chat.v1.Event.LeaveReason leave_reason = 3;
  void clear_leave_reason();
  ::protocol::chat::v1::Event_LeaveReason leave_reason() const;
  void set_leave_reason(::protocol::chat::v1::Event_LeaveReason value);
  private:
  ::protocol::chat::v1::Event_LeaveReason _internal_leave_reason() const;
  void _internal_set_leave_reason(::protocol::chat::v1::Event_LeaveReason value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.MemberLeft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  int leave_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_GuildAddedToList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.GuildAddedToList) */ {
 public:
  inline Event_GuildAddedToList() : Event_GuildAddedToList(nullptr) {};
  virtual ~Event_GuildAddedToList();

  Event_GuildAddedToList(const Event_GuildAddedToList& from);
  Event_GuildAddedToList(Event_GuildAddedToList&& from) noexcept
    : Event_GuildAddedToList() {
    *this = ::std::move(from);
  }

  inline Event_GuildAddedToList& operator=(const Event_GuildAddedToList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_GuildAddedToList& operator=(Event_GuildAddedToList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_GuildAddedToList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_GuildAddedToList* internal_default_instance() {
    return reinterpret_cast<const Event_GuildAddedToList*>(
               &_Event_GuildAddedToList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Event_GuildAddedToList& a, Event_GuildAddedToList& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_GuildAddedToList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_GuildAddedToList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_GuildAddedToList* New() const final {
    return CreateMaybeMessage<Event_GuildAddedToList>(nullptr);
  }

  Event_GuildAddedToList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_GuildAddedToList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_GuildAddedToList& from);
  void MergeFrom(const Event_GuildAddedToList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_GuildAddedToList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.GuildAddedToList";
  }
  protected:
  explicit Event_GuildAddedToList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeserverFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string homeserver = 2;
  void clear_homeserver();
  const std::string& homeserver() const;
  void set_homeserver(const std::string& value);
  void set_homeserver(std::string&& value);
  void set_homeserver(const char* value);
  void set_homeserver(const char* value, size_t size);
  std::string* mutable_homeserver();
  std::string* release_homeserver();
  void set_allocated_homeserver(std::string* homeserver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homeserver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homeserver(
      std::string* homeserver);
  private:
  const std::string& _internal_homeserver() const;
  void _internal_set_homeserver(const std::string& value);
  std::string* _internal_mutable_homeserver();
  public:

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.GuildAddedToList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeserver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_GuildRemovedFromList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.GuildRemovedFromList) */ {
 public:
  inline Event_GuildRemovedFromList() : Event_GuildRemovedFromList(nullptr) {};
  virtual ~Event_GuildRemovedFromList();

  Event_GuildRemovedFromList(const Event_GuildRemovedFromList& from);
  Event_GuildRemovedFromList(Event_GuildRemovedFromList&& from) noexcept
    : Event_GuildRemovedFromList() {
    *this = ::std::move(from);
  }

  inline Event_GuildRemovedFromList& operator=(const Event_GuildRemovedFromList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_GuildRemovedFromList& operator=(Event_GuildRemovedFromList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_GuildRemovedFromList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_GuildRemovedFromList* internal_default_instance() {
    return reinterpret_cast<const Event_GuildRemovedFromList*>(
               &_Event_GuildRemovedFromList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Event_GuildRemovedFromList& a, Event_GuildRemovedFromList& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_GuildRemovedFromList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_GuildRemovedFromList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_GuildRemovedFromList* New() const final {
    return CreateMaybeMessage<Event_GuildRemovedFromList>(nullptr);
  }

  Event_GuildRemovedFromList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_GuildRemovedFromList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_GuildRemovedFromList& from);
  void MergeFrom(const Event_GuildRemovedFromList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_GuildRemovedFromList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.GuildRemovedFromList";
  }
  protected:
  explicit Event_GuildRemovedFromList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeserverFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string homeserver = 2;
  void clear_homeserver();
  const std::string& homeserver() const;
  void set_homeserver(const std::string& value);
  void set_homeserver(std::string&& value);
  void set_homeserver(const char* value);
  void set_homeserver(const char* value, size_t size);
  std::string* mutable_homeserver();
  std::string* release_homeserver();
  void set_allocated_homeserver(std::string* homeserver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homeserver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homeserver(
      std::string* homeserver);
  private:
  const std::string& _internal_homeserver() const;
  void _internal_set_homeserver(const std::string& value);
  std::string* _internal_mutable_homeserver();
  public:

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.GuildRemovedFromList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeserver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ActionPerformed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ActionPerformed) */ {
 public:
  inline Event_ActionPerformed() : Event_ActionPerformed(nullptr) {};
  virtual ~Event_ActionPerformed();

  Event_ActionPerformed(const Event_ActionPerformed& from);
  Event_ActionPerformed(Event_ActionPerformed&& from) noexcept
    : Event_ActionPerformed() {
    *this = ::std::move(from);
  }

  inline Event_ActionPerformed& operator=(const Event_ActionPerformed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ActionPerformed& operator=(Event_ActionPerformed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ActionPerformed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ActionPerformed* internal_default_instance() {
    return reinterpret_cast<const Event_ActionPerformed*>(
               &_Event_ActionPerformed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Event_ActionPerformed& a, Event_ActionPerformed& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ActionPerformed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ActionPerformed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ActionPerformed* New() const final {
    return CreateMaybeMessage<Event_ActionPerformed>(nullptr);
  }

  Event_ActionPerformed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ActionPerformed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ActionPerformed& from);
  void MergeFrom(const Event_ActionPerformed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ActionPerformed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ActionPerformed";
  }
  protected:
  explicit Event_ActionPerformed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 4,
    kActionDataFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // string action_id = 4;
  void clear_action_id();
  const std::string& action_id() const;
  void set_action_id(const std::string& value);
  void set_action_id(std::string&& value);
  void set_action_id(const char* value);
  void set_action_id(const char* value, size_t size);
  std::string* mutable_action_id();
  std::string* release_action_id();
  void set_allocated_action_id(std::string* action_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_id(
      std::string* action_id);
  private:
  const std::string& _internal_action_id() const;
  void _internal_set_action_id(const std::string& value);
  std::string* _internal_mutable_action_id();
  public:

  // string action_data = 5;
  void clear_action_data();
  const std::string& action_data() const;
  void set_action_data(const std::string& value);
  void set_action_data(std::string&& value);
  void set_action_data(const char* value);
  void set_action_data(const char* value, size_t size);
  std::string* mutable_action_data();
  std::string* release_action_data();
  void set_allocated_action_data(std::string* action_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_data(
      std::string* action_data);
  private:
  const std::string& _internal_action_data() const;
  void _internal_set_action_data(const std::string& value);
  std::string* _internal_mutable_action_data();
  public:

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ActionPerformed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_RoleMoved PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.RoleMoved) */ {
 public:
  inline Event_RoleMoved() : Event_RoleMoved(nullptr) {};
  virtual ~Event_RoleMoved();

  Event_RoleMoved(const Event_RoleMoved& from);
  Event_RoleMoved(Event_RoleMoved&& from) noexcept
    : Event_RoleMoved() {
    *this = ::std::move(from);
  }

  inline Event_RoleMoved& operator=(const Event_RoleMoved& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_RoleMoved& operator=(Event_RoleMoved&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_RoleMoved& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_RoleMoved* internal_default_instance() {
    return reinterpret_cast<const Event_RoleMoved*>(
               &_Event_RoleMoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Event_RoleMoved& a, Event_RoleMoved& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_RoleMoved* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_RoleMoved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_RoleMoved* New() const final {
    return CreateMaybeMessage<Event_RoleMoved>(nullptr);
  }

  Event_RoleMoved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_RoleMoved>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_RoleMoved& from);
  void MergeFrom(const Event_RoleMoved& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_RoleMoved* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.RoleMoved";
  }
  protected:
  explicit Event_RoleMoved(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kPreviousIdFieldNumber = 3,
    kNextIdFieldNumber = 4,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 previous_id = 3;
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 4;
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.RoleMoved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_RoleDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.RoleDeleted) */ {
 public:
  inline Event_RoleDeleted() : Event_RoleDeleted(nullptr) {};
  virtual ~Event_RoleDeleted();

  Event_RoleDeleted(const Event_RoleDeleted& from);
  Event_RoleDeleted(Event_RoleDeleted&& from) noexcept
    : Event_RoleDeleted() {
    *this = ::std::move(from);
  }

  inline Event_RoleDeleted& operator=(const Event_RoleDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_RoleDeleted& operator=(Event_RoleDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_RoleDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_RoleDeleted* internal_default_instance() {
    return reinterpret_cast<const Event_RoleDeleted*>(
               &_Event_RoleDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Event_RoleDeleted& a, Event_RoleDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_RoleDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_RoleDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_RoleDeleted* New() const final {
    return CreateMaybeMessage<Event_RoleDeleted>(nullptr);
  }

  Event_RoleDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_RoleDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_RoleDeleted& from);
  void MergeFrom(const Event_RoleDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_RoleDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.RoleDeleted";
  }
  protected:
  explicit Event_RoleDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.RoleDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_RoleCreated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.RoleCreated) */ {
 public:
  inline Event_RoleCreated() : Event_RoleCreated(nullptr) {};
  virtual ~Event_RoleCreated();

  Event_RoleCreated(const Event_RoleCreated& from);
  Event_RoleCreated(Event_RoleCreated&& from) noexcept
    : Event_RoleCreated() {
    *this = ::std::move(from);
  }

  inline Event_RoleCreated& operator=(const Event_RoleCreated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_RoleCreated& operator=(Event_RoleCreated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_RoleCreated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_RoleCreated* internal_default_instance() {
    return reinterpret_cast<const Event_RoleCreated*>(
               &_Event_RoleCreated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Event_RoleCreated& a, Event_RoleCreated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_RoleCreated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_RoleCreated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_RoleCreated* New() const final {
    return CreateMaybeMessage<Event_RoleCreated>(nullptr);
  }

  Event_RoleCreated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_RoleCreated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_RoleCreated& from);
  void MergeFrom(const Event_RoleCreated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_RoleCreated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.RoleCreated";
  }
  protected:
  explicit Event_RoleCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // .protocol.chat.v1.Role role = 3;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::protocol::chat::v1::Role& role() const;
  ::protocol::chat::v1::Role* release_role();
  ::protocol::chat::v1::Role* mutable_role();
  void set_allocated_role(::protocol::chat::v1::Role* role);
  private:
  const ::protocol::chat::v1::Role& _internal_role() const;
  ::protocol::chat::v1::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::protocol::chat::v1::Role* role);
  ::protocol::chat::v1::Role* unsafe_arena_release_role();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.RoleCreated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::Role* role_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_RoleUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.RoleUpdated) */ {
 public:
  inline Event_RoleUpdated() : Event_RoleUpdated(nullptr) {};
  virtual ~Event_RoleUpdated();

  Event_RoleUpdated(const Event_RoleUpdated& from);
  Event_RoleUpdated(Event_RoleUpdated&& from) noexcept
    : Event_RoleUpdated() {
    *this = ::std::move(from);
  }

  inline Event_RoleUpdated& operator=(const Event_RoleUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_RoleUpdated& operator=(Event_RoleUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_RoleUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_RoleUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_RoleUpdated*>(
               &_Event_RoleUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Event_RoleUpdated& a, Event_RoleUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_RoleUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_RoleUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_RoleUpdated* New() const final {
    return CreateMaybeMessage<Event_RoleUpdated>(nullptr);
  }

  Event_RoleUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_RoleUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_RoleUpdated& from);
  void MergeFrom(const Event_RoleUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_RoleUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.RoleUpdated";
  }
  protected:
  explicit Event_RoleUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 4,
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 3,
  };
  // .protocol.chat.v1.Role role = 4;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::protocol::chat::v1::Role& role() const;
  ::protocol::chat::v1::Role* release_role();
  ::protocol::chat::v1::Role* mutable_role();
  void set_allocated_role(::protocol::chat::v1::Role* role);
  private:
  const ::protocol::chat::v1::Role& _internal_role() const;
  ::protocol::chat::v1::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::protocol::chat::v1::Role* role);
  ::protocol::chat::v1::Role* unsafe_arena_release_role();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 3;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.RoleUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::Role* role_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_RolePermissionsUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.RolePermissionsUpdated) */ {
 public:
  inline Event_RolePermissionsUpdated() : Event_RolePermissionsUpdated(nullptr) {};
  virtual ~Event_RolePermissionsUpdated();

  Event_RolePermissionsUpdated(const Event_RolePermissionsUpdated& from);
  Event_RolePermissionsUpdated(Event_RolePermissionsUpdated&& from) noexcept
    : Event_RolePermissionsUpdated() {
    *this = ::std::move(from);
  }

  inline Event_RolePermissionsUpdated& operator=(const Event_RolePermissionsUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_RolePermissionsUpdated& operator=(Event_RolePermissionsUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_RolePermissionsUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_RolePermissionsUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_RolePermissionsUpdated*>(
               &_Event_RolePermissionsUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Event_RolePermissionsUpdated& a, Event_RolePermissionsUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_RolePermissionsUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_RolePermissionsUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_RolePermissionsUpdated* New() const final {
    return CreateMaybeMessage<Event_RolePermissionsUpdated>(nullptr);
  }

  Event_RolePermissionsUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_RolePermissionsUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_RolePermissionsUpdated& from);
  void MergeFrom(const Event_RolePermissionsUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_RolePermissionsUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.RolePermissionsUpdated";
  }
  protected:
  explicit Event_RolePermissionsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermsFieldNumber = 4,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kRoleIdFieldNumber = 3,
  };
  // .protocol.chat.v1.PermissionList perms = 4;
  bool has_perms() const;
  private:
  bool _internal_has_perms() const;
  public:
  void clear_perms();
  const ::protocol::chat::v1::PermissionList& perms() const;
  ::protocol::chat::v1::PermissionList* release_perms();
  ::protocol::chat::v1::PermissionList* mutable_perms();
  void set_allocated_perms(::protocol::chat::v1::PermissionList* perms);
  private:
  const ::protocol::chat::v1::PermissionList& _internal_perms() const;
  ::protocol::chat::v1::PermissionList* _internal_mutable_perms();
  public:
  void unsafe_arena_set_allocated_perms(
      ::protocol::chat::v1::PermissionList* perms);
  ::protocol::chat::v1::PermissionList* unsafe_arena_release_perms();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 3;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.RolePermissionsUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::PermissionList* perms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_UserRolesUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.UserRolesUpdated) */ {
 public:
  inline Event_UserRolesUpdated() : Event_UserRolesUpdated(nullptr) {};
  virtual ~Event_UserRolesUpdated();

  Event_UserRolesUpdated(const Event_UserRolesUpdated& from);
  Event_UserRolesUpdated(Event_UserRolesUpdated&& from) noexcept
    : Event_UserRolesUpdated() {
    *this = ::std::move(from);
  }

  inline Event_UserRolesUpdated& operator=(const Event_UserRolesUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_UserRolesUpdated& operator=(Event_UserRolesUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_UserRolesUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_UserRolesUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_UserRolesUpdated*>(
               &_Event_UserRolesUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Event_UserRolesUpdated& a, Event_UserRolesUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_UserRolesUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_UserRolesUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_UserRolesUpdated* New() const final {
    return CreateMaybeMessage<Event_UserRolesUpdated>(nullptr);
  }

  Event_UserRolesUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_UserRolesUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_UserRolesUpdated& from);
  void MergeFrom(const Event_UserRolesUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_UserRolesUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.UserRolesUpdated";
  }
  protected:
  explicit Event_UserRolesUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdsFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // repeated uint64 role_ids = 3;
  int role_ids_size() const;
  private:
  int _internal_role_ids_size() const;
  public:
  void clear_role_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_role_ids() const;
  void _internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_role_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 role_ids(int index) const;
  void set_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      role_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_role_ids();

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.UserRolesUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > role_ids_;
  mutable std::atomic<int> _role_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_ProfileUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.ProfileUpdated) */ {
 public:
  inline Event_ProfileUpdated() : Event_ProfileUpdated(nullptr) {};
  virtual ~Event_ProfileUpdated();

  Event_ProfileUpdated(const Event_ProfileUpdated& from);
  Event_ProfileUpdated(Event_ProfileUpdated&& from) noexcept
    : Event_ProfileUpdated() {
    *this = ::std::move(from);
  }

  inline Event_ProfileUpdated& operator=(const Event_ProfileUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_ProfileUpdated& operator=(Event_ProfileUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_ProfileUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_ProfileUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_ProfileUpdated*>(
               &_Event_ProfileUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Event_ProfileUpdated& a, Event_ProfileUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_ProfileUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_ProfileUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_ProfileUpdated* New() const final {
    return CreateMaybeMessage<Event_ProfileUpdated>(nullptr);
  }

  Event_ProfileUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_ProfileUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_ProfileUpdated& from);
  void MergeFrom(const Event_ProfileUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_ProfileUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.ProfileUpdated";
  }
  protected:
  explicit Event_ProfileUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewUsernameFieldNumber = 2,
    kNewAvatarFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kUpdateUsernameFieldNumber = 3,
    kUpdateAvatarFieldNumber = 5,
    kUpdateStatusFieldNumber = 7,
    kIsBotFieldNumber = 8,
    kNewStatusFieldNumber = 6,
    kUpdateIsBotFieldNumber = 9,
  };
  // string new_username = 2;
  void clear_new_username();
  const std::string& new_username() const;
  void set_new_username(const std::string& value);
  void set_new_username(std::string&& value);
  void set_new_username(const char* value);
  void set_new_username(const char* value, size_t size);
  std::string* mutable_new_username();
  std::string* release_new_username();
  void set_allocated_new_username(std::string* new_username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_username(
      std::string* new_username);
  private:
  const std::string& _internal_new_username() const;
  void _internal_set_new_username(const std::string& value);
  std::string* _internal_mutable_new_username();
  public:

  // string new_avatar = 4;
  void clear_new_avatar();
  const std::string& new_avatar() const;
  void set_new_avatar(const std::string& value);
  void set_new_avatar(std::string&& value);
  void set_new_avatar(const char* value);
  void set_new_avatar(const char* value, size_t size);
  std::string* mutable_new_avatar();
  std::string* release_new_avatar();
  void set_allocated_new_avatar(std::string* new_avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_avatar(
      std::string* new_avatar);
  private:
  const std::string& _internal_new_avatar() const;
  void _internal_set_new_avatar(const std::string& value);
  std::string* _internal_mutable_new_avatar();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_username = 3;
  void clear_update_username();
  bool update_username() const;
  void set_update_username(bool value);
  private:
  bool _internal_update_username() const;
  void _internal_set_update_username(bool value);
  public:

  // bool update_avatar = 5;
  void clear_update_avatar();
  bool update_avatar() const;
  void set_update_avatar(bool value);
  private:
  bool _internal_update_avatar() const;
  void _internal_set_update_avatar(bool value);
  public:

  // bool update_status = 7;
  void clear_update_status();
  bool update_status() const;
  void set_update_status(bool value);
  private:
  bool _internal_update_status() const;
  void _internal_set_update_status(bool value);
  public:

  // bool is_bot = 8;
  void clear_is_bot();
  bool is_bot() const;
  void set_is_bot(bool value);
  private:
  bool _internal_is_bot() const;
  void _internal_set_is_bot(bool value);
  public:

  // .protocol.harmonytypes.v1.UserStatus new_status = 6;
  void clear_new_status();
  ::protocol::harmonytypes::v1::UserStatus new_status() const;
  void set_new_status(::protocol::harmonytypes::v1::UserStatus value);
  private:
  ::protocol::harmonytypes::v1::UserStatus _internal_new_status() const;
  void _internal_set_new_status(::protocol::harmonytypes::v1::UserStatus value);
  public:

  // bool update_is_bot = 9;
  void clear_update_is_bot();
  bool update_is_bot() const;
  void set_update_is_bot(bool value);
  private:
  bool _internal_update_is_bot() const;
  void _internal_set_update_is_bot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.ProfileUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_avatar_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  bool update_username_;
  bool update_avatar_;
  bool update_status_;
  bool is_bot_;
  int new_status_;
  bool update_is_bot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_Typing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.Typing) */ {
 public:
  inline Event_Typing() : Event_Typing(nullptr) {};
  virtual ~Event_Typing();

  Event_Typing(const Event_Typing& from);
  Event_Typing(Event_Typing&& from) noexcept
    : Event_Typing() {
    *this = ::std::move(from);
  }

  inline Event_Typing& operator=(const Event_Typing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_Typing& operator=(Event_Typing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_Typing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_Typing* internal_default_instance() {
    return reinterpret_cast<const Event_Typing*>(
               &_Event_Typing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Event_Typing& a, Event_Typing& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_Typing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_Typing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_Typing* New() const final {
    return CreateMaybeMessage<Event_Typing>(nullptr);
  }

  Event_Typing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_Typing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_Typing& from);
  void MergeFrom(const Event_Typing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_Typing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.Typing";
  }
  protected:
  explicit Event_Typing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 3;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.Typing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_PermissionUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.PermissionUpdated) */ {
 public:
  inline Event_PermissionUpdated() : Event_PermissionUpdated(nullptr) {};
  virtual ~Event_PermissionUpdated();

  Event_PermissionUpdated(const Event_PermissionUpdated& from);
  Event_PermissionUpdated(Event_PermissionUpdated&& from) noexcept
    : Event_PermissionUpdated() {
    *this = ::std::move(from);
  }

  inline Event_PermissionUpdated& operator=(const Event_PermissionUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_PermissionUpdated& operator=(Event_PermissionUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_PermissionUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_PermissionUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_PermissionUpdated*>(
               &_Event_PermissionUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Event_PermissionUpdated& a, Event_PermissionUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_PermissionUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_PermissionUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_PermissionUpdated* New() const final {
    return CreateMaybeMessage<Event_PermissionUpdated>(nullptr);
  }

  Event_PermissionUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_PermissionUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_PermissionUpdated& from);
  void MergeFrom(const Event_PermissionUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_PermissionUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.PermissionUpdated";
  }
  protected:
  explicit Event_PermissionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kOkFieldNumber = 4,
  };
  // string query = 3;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // uint64 guild_id = 1;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool ok = 4;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.PermissionUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_EmotePackUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.EmotePackUpdated) */ {
 public:
  inline Event_EmotePackUpdated() : Event_EmotePackUpdated(nullptr) {};
  virtual ~Event_EmotePackUpdated();

  Event_EmotePackUpdated(const Event_EmotePackUpdated& from);
  Event_EmotePackUpdated(Event_EmotePackUpdated&& from) noexcept
    : Event_EmotePackUpdated() {
    *this = ::std::move(from);
  }

  inline Event_EmotePackUpdated& operator=(const Event_EmotePackUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_EmotePackUpdated& operator=(Event_EmotePackUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_EmotePackUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_EmotePackUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_EmotePackUpdated*>(
               &_Event_EmotePackUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Event_EmotePackUpdated& a, Event_EmotePackUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_EmotePackUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_EmotePackUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_EmotePackUpdated* New() const final {
    return CreateMaybeMessage<Event_EmotePackUpdated>(nullptr);
  }

  Event_EmotePackUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_EmotePackUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_EmotePackUpdated& from);
  void MergeFrom(const Event_EmotePackUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_EmotePackUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.EmotePackUpdated";
  }
  protected:
  explicit Event_EmotePackUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackNameFieldNumber = 2,
    kPackIdFieldNumber = 1,
    kUpdatePackNameFieldNumber = 3,
  };
  // string pack_name = 2;
  void clear_pack_name();
  const std::string& pack_name() const;
  void set_pack_name(const std::string& value);
  void set_pack_name(std::string&& value);
  void set_pack_name(const char* value);
  void set_pack_name(const char* value, size_t size);
  std::string* mutable_pack_name();
  std::string* release_pack_name();
  void set_allocated_pack_name(std::string* pack_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pack_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pack_name(
      std::string* pack_name);
  private:
  const std::string& _internal_pack_name() const;
  void _internal_set_pack_name(const std::string& value);
  std::string* _internal_mutable_pack_name();
  public:

  // uint64 pack_id = 1;
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_pack_name = 3;
  void clear_update_pack_name();
  bool update_pack_name() const;
  void set_update_pack_name(bool value);
  private:
  bool _internal_update_pack_name() const;
  void _internal_set_update_pack_name(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.EmotePackUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  bool update_pack_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_EmotePackDeleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.EmotePackDeleted) */ {
 public:
  inline Event_EmotePackDeleted() : Event_EmotePackDeleted(nullptr) {};
  virtual ~Event_EmotePackDeleted();

  Event_EmotePackDeleted(const Event_EmotePackDeleted& from);
  Event_EmotePackDeleted(Event_EmotePackDeleted&& from) noexcept
    : Event_EmotePackDeleted() {
    *this = ::std::move(from);
  }

  inline Event_EmotePackDeleted& operator=(const Event_EmotePackDeleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_EmotePackDeleted& operator=(Event_EmotePackDeleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_EmotePackDeleted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_EmotePackDeleted* internal_default_instance() {
    return reinterpret_cast<const Event_EmotePackDeleted*>(
               &_Event_EmotePackDeleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Event_EmotePackDeleted& a, Event_EmotePackDeleted& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_EmotePackDeleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_EmotePackDeleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_EmotePackDeleted* New() const final {
    return CreateMaybeMessage<Event_EmotePackDeleted>(nullptr);
  }

  Event_EmotePackDeleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_EmotePackDeleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_EmotePackDeleted& from);
  void MergeFrom(const Event_EmotePackDeleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_EmotePackDeleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.EmotePackDeleted";
  }
  protected:
  explicit Event_EmotePackDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // uint64 pack_id = 1;
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.EmotePackDeleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_EmotePackAdded PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.EmotePackAdded) */ {
 public:
  inline Event_EmotePackAdded() : Event_EmotePackAdded(nullptr) {};
  virtual ~Event_EmotePackAdded();

  Event_EmotePackAdded(const Event_EmotePackAdded& from);
  Event_EmotePackAdded(Event_EmotePackAdded&& from) noexcept
    : Event_EmotePackAdded() {
    *this = ::std::move(from);
  }

  inline Event_EmotePackAdded& operator=(const Event_EmotePackAdded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_EmotePackAdded& operator=(Event_EmotePackAdded&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_EmotePackAdded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_EmotePackAdded* internal_default_instance() {
    return reinterpret_cast<const Event_EmotePackAdded*>(
               &_Event_EmotePackAdded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Event_EmotePackAdded& a, Event_EmotePackAdded& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_EmotePackAdded* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_EmotePackAdded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_EmotePackAdded* New() const final {
    return CreateMaybeMessage<Event_EmotePackAdded>(nullptr);
  }

  Event_EmotePackAdded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_EmotePackAdded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_EmotePackAdded& from);
  void MergeFrom(const Event_EmotePackAdded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_EmotePackAdded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.EmotePackAdded";
  }
  protected:
  explicit Event_EmotePackAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackFieldNumber = 1,
  };
  // .protocol.chat.v1.EmotePack pack = 1;
  bool has_pack() const;
  private:
  bool _internal_has_pack() const;
  public:
  void clear_pack();
  const ::protocol::chat::v1::EmotePack& pack() const;
  ::protocol::chat::v1::EmotePack* release_pack();
  ::protocol::chat::v1::EmotePack* mutable_pack();
  void set_allocated_pack(::protocol::chat::v1::EmotePack* pack);
  private:
  const ::protocol::chat::v1::EmotePack& _internal_pack() const;
  ::protocol::chat::v1::EmotePack* _internal_mutable_pack();
  public:
  void unsafe_arena_set_allocated_pack(
      ::protocol::chat::v1::EmotePack* pack);
  ::protocol::chat::v1::EmotePack* unsafe_arena_release_pack();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.EmotePackAdded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::EmotePack* pack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event_EmotePackEmotesUpdated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event.EmotePackEmotesUpdated) */ {
 public:
  inline Event_EmotePackEmotesUpdated() : Event_EmotePackEmotesUpdated(nullptr) {};
  virtual ~Event_EmotePackEmotesUpdated();

  Event_EmotePackEmotesUpdated(const Event_EmotePackEmotesUpdated& from);
  Event_EmotePackEmotesUpdated(Event_EmotePackEmotesUpdated&& from) noexcept
    : Event_EmotePackEmotesUpdated() {
    *this = ::std::move(from);
  }

  inline Event_EmotePackEmotesUpdated& operator=(const Event_EmotePackEmotesUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_EmotePackEmotesUpdated& operator=(Event_EmotePackEmotesUpdated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_EmotePackEmotesUpdated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_EmotePackEmotesUpdated* internal_default_instance() {
    return reinterpret_cast<const Event_EmotePackEmotesUpdated*>(
               &_Event_EmotePackEmotesUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Event_EmotePackEmotesUpdated& a, Event_EmotePackEmotesUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_EmotePackEmotesUpdated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_EmotePackEmotesUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_EmotePackEmotesUpdated* New() const final {
    return CreateMaybeMessage<Event_EmotePackEmotesUpdated>(nullptr);
  }

  Event_EmotePackEmotesUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_EmotePackEmotesUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_EmotePackEmotesUpdated& from);
  void MergeFrom(const Event_EmotePackEmotesUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_EmotePackEmotesUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event.EmotePackEmotesUpdated";
  }
  protected:
  explicit Event_EmotePackEmotesUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddedEmotesFieldNumber = 2,
    kDeletedEmotesFieldNumber = 3,
    kPackIdFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.Emote added_emotes = 2;
  int added_emotes_size() const;
  private:
  int _internal_added_emotes_size() const;
  public:
  void clear_added_emotes();
  ::protocol::chat::v1::Emote* mutable_added_emotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Emote >*
      mutable_added_emotes();
  private:
  const ::protocol::chat::v1::Emote& _internal_added_emotes(int index) const;
  ::protocol::chat::v1::Emote* _internal_add_added_emotes();
  public:
  const ::protocol::chat::v1::Emote& added_emotes(int index) const;
  ::protocol::chat::v1::Emote* add_added_emotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Emote >&
      added_emotes() const;

  // repeated string deleted_emotes = 3;
  int deleted_emotes_size() const;
  private:
  int _internal_deleted_emotes_size() const;
  public:
  void clear_deleted_emotes();
  const std::string& deleted_emotes(int index) const;
  std::string* mutable_deleted_emotes(int index);
  void set_deleted_emotes(int index, const std::string& value);
  void set_deleted_emotes(int index, std::string&& value);
  void set_deleted_emotes(int index, const char* value);
  void set_deleted_emotes(int index, const char* value, size_t size);
  std::string* add_deleted_emotes();
  void add_deleted_emotes(const std::string& value);
  void add_deleted_emotes(std::string&& value);
  void add_deleted_emotes(const char* value);
  void add_deleted_emotes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deleted_emotes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deleted_emotes();
  private:
  const std::string& _internal_deleted_emotes(int index) const;
  std::string* _internal_add_deleted_emotes();
  public:

  // uint64 pack_id = 1;
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event.EmotePackEmotesUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Emote > added_emotes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deleted_emotes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  enum EventCase {
    kGuildAddedToList = 1,
    kGuildRemovedFromList = 2,
    kActionPerformed = 3,
    kSentMessage = 4,
    kEditedMessage = 5,
    kDeletedMessage = 6,
    kCreatedChannel = 7,
    kEditedChannel = 8,
    kDeletedChannel = 9,
    kChannelsReordered = 27,
    kEditedGuild = 10,
    kDeletedGuild = 11,
    kJoinedMember = 12,
    kLeftMember = 13,
    kProfileUpdated = 14,
    kTyping = 15,
    kRoleCreated = 16,
    kRoleDeleted = 17,
    kRoleMoved = 18,
    kRoleUpdated = 19,
    kRolePermsUpdated = 20,
    kUserRolesUpdated = 21,
    kPermissionUpdated = 22,
    kEmotePackAdded = 23,
    kEmotePackUpdated = 24,
    kEmotePackDeleted = 25,
    kEmotePackEmotesUpdated = 26,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fstreaming_2eproto);
    return ::descriptor_table_chat_2fv1_2fstreaming_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_MessageSent MessageSent;
  typedef Event_MessageUpdated MessageUpdated;
  typedef Event_MessageDeleted MessageDeleted;
  typedef Event_ChannelCreated ChannelCreated;
  typedef Event_ChannelUpdated ChannelUpdated;
  typedef Event_ChannelsReordered ChannelsReordered;
  typedef Event_ChannelDeleted ChannelDeleted;
  typedef Event_GuildUpdated GuildUpdated;
  typedef Event_GuildDeleted GuildDeleted;
  typedef Event_MemberJoined MemberJoined;
  typedef Event_MemberLeft MemberLeft;
  typedef Event_GuildAddedToList GuildAddedToList;
  typedef Event_GuildRemovedFromList GuildRemovedFromList;
  typedef Event_ActionPerformed ActionPerformed;
  typedef Event_RoleMoved RoleMoved;
  typedef Event_RoleDeleted RoleDeleted;
  typedef Event_RoleCreated RoleCreated;
  typedef Event_RoleUpdated RoleUpdated;
  typedef Event_RolePermissionsUpdated RolePermissionsUpdated;
  typedef Event_UserRolesUpdated UserRolesUpdated;
  typedef Event_ProfileUpdated ProfileUpdated;
  typedef Event_Typing Typing;
  typedef Event_PermissionUpdated PermissionUpdated;
  typedef Event_EmotePackUpdated EmotePackUpdated;
  typedef Event_EmotePackDeleted EmotePackDeleted;
  typedef Event_EmotePackAdded EmotePackAdded;
  typedef Event_EmotePackEmotesUpdated EmotePackEmotesUpdated;

  typedef Event_LeaveReason LeaveReason;
  static constexpr LeaveReason willingly =
    Event_LeaveReason_willingly;
  static constexpr LeaveReason banned =
    Event_LeaveReason_banned;
  static constexpr LeaveReason kicked =
    Event_LeaveReason_kicked;
  static inline bool LeaveReason_IsValid(int value) {
    return Event_LeaveReason_IsValid(value);
  }
  static constexpr LeaveReason LeaveReason_MIN =
    Event_LeaveReason_LeaveReason_MIN;
  static constexpr LeaveReason LeaveReason_MAX =
    Event_LeaveReason_LeaveReason_MAX;
  static constexpr int LeaveReason_ARRAYSIZE =
    Event_LeaveReason_LeaveReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LeaveReason_descriptor() {
    return Event_LeaveReason_descriptor();
  }
  template<typename T>
  static inline const std::string& LeaveReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LeaveReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LeaveReason_Name.");
    return Event_LeaveReason_Name(enum_t_value);
  }
  static inline bool LeaveReason_Parse(const std::string& name,
      LeaveReason* value) {
    return Event_LeaveReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGuildAddedToListFieldNumber = 1,
    kGuildRemovedFromListFieldNumber = 2,
    kActionPerformedFieldNumber = 3,
    kSentMessageFieldNumber = 4,
    kEditedMessageFieldNumber = 5,
    kDeletedMessageFieldNumber = 6,
    kCreatedChannelFieldNumber = 7,
    kEditedChannelFieldNumber = 8,
    kDeletedChannelFieldNumber = 9,
    kChannelsReorderedFieldNumber = 27,
    kEditedGuildFieldNumber = 10,
    kDeletedGuildFieldNumber = 11,
    kJoinedMemberFieldNumber = 12,
    kLeftMemberFieldNumber = 13,
    kProfileUpdatedFieldNumber = 14,
    kTypingFieldNumber = 15,
    kRoleCreatedFieldNumber = 16,
    kRoleDeletedFieldNumber = 17,
    kRoleMovedFieldNumber = 18,
    kRoleUpdatedFieldNumber = 19,
    kRolePermsUpdatedFieldNumber = 20,
    kUserRolesUpdatedFieldNumber = 21,
    kPermissionUpdatedFieldNumber = 22,
    kEmotePackAddedFieldNumber = 23,
    kEmotePackUpdatedFieldNumber = 24,
    kEmotePackDeletedFieldNumber = 25,
    kEmotePackEmotesUpdatedFieldNumber = 26,
  };
  // .protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
  bool has_guild_added_to_list() const;
  private:
  bool _internal_has_guild_added_to_list() const;
  public:
  void clear_guild_added_to_list();
  const ::protocol::chat::v1::Event_GuildAddedToList& guild_added_to_list() const;
  ::protocol::chat::v1::Event_GuildAddedToList* release_guild_added_to_list();
  ::protocol::chat::v1::Event_GuildAddedToList* mutable_guild_added_to_list();
  void set_allocated_guild_added_to_list(::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list);
  private:
  const ::protocol::chat::v1::Event_GuildAddedToList& _internal_guild_added_to_list() const;
  ::protocol::chat::v1::Event_GuildAddedToList* _internal_mutable_guild_added_to_list();
  public:
  void unsafe_arena_set_allocated_guild_added_to_list(
      ::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list);
  ::protocol::chat::v1::Event_GuildAddedToList* unsafe_arena_release_guild_added_to_list();

  // .protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
  bool has_guild_removed_from_list() const;
  private:
  bool _internal_has_guild_removed_from_list() const;
  public:
  void clear_guild_removed_from_list();
  const ::protocol::chat::v1::Event_GuildRemovedFromList& guild_removed_from_list() const;
  ::protocol::chat::v1::Event_GuildRemovedFromList* release_guild_removed_from_list();
  ::protocol::chat::v1::Event_GuildRemovedFromList* mutable_guild_removed_from_list();
  void set_allocated_guild_removed_from_list(::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list);
  private:
  const ::protocol::chat::v1::Event_GuildRemovedFromList& _internal_guild_removed_from_list() const;
  ::protocol::chat::v1::Event_GuildRemovedFromList* _internal_mutable_guild_removed_from_list();
  public:
  void unsafe_arena_set_allocated_guild_removed_from_list(
      ::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list);
  ::protocol::chat::v1::Event_GuildRemovedFromList* unsafe_arena_release_guild_removed_from_list();

  // .protocol.chat.v1.Event.ActionPerformed action_performed = 3;
  bool has_action_performed() const;
  private:
  bool _internal_has_action_performed() const;
  public:
  void clear_action_performed();
  const ::protocol::chat::v1::Event_ActionPerformed& action_performed() const;
  ::protocol::chat::v1::Event_ActionPerformed* release_action_performed();
  ::protocol::chat::v1::Event_ActionPerformed* mutable_action_performed();
  void set_allocated_action_performed(::protocol::chat::v1::Event_ActionPerformed* action_performed);
  private:
  const ::protocol::chat::v1::Event_ActionPerformed& _internal_action_performed() const;
  ::protocol::chat::v1::Event_ActionPerformed* _internal_mutable_action_performed();
  public:
  void unsafe_arena_set_allocated_action_performed(
      ::protocol::chat::v1::Event_ActionPerformed* action_performed);
  ::protocol::chat::v1::Event_ActionPerformed* unsafe_arena_release_action_performed();

  // .protocol.chat.v1.Event.MessageSent sent_message = 4;
  bool has_sent_message() const;
  private:
  bool _internal_has_sent_message() const;
  public:
  void clear_sent_message();
  const ::protocol::chat::v1::Event_MessageSent& sent_message() const;
  ::protocol::chat::v1::Event_MessageSent* release_sent_message();
  ::protocol::chat::v1::Event_MessageSent* mutable_sent_message();
  void set_allocated_sent_message(::protocol::chat::v1::Event_MessageSent* sent_message);
  private:
  const ::protocol::chat::v1::Event_MessageSent& _internal_sent_message() const;
  ::protocol::chat::v1::Event_MessageSent* _internal_mutable_sent_message();
  public:
  void unsafe_arena_set_allocated_sent_message(
      ::protocol::chat::v1::Event_MessageSent* sent_message);
  ::protocol::chat::v1::Event_MessageSent* unsafe_arena_release_sent_message();

  // .protocol.chat.v1.Event.MessageUpdated edited_message = 5;
  bool has_edited_message() const;
  private:
  bool _internal_has_edited_message() const;
  public:
  void clear_edited_message();
  const ::protocol::chat::v1::Event_MessageUpdated& edited_message() const;
  ::protocol::chat::v1::Event_MessageUpdated* release_edited_message();
  ::protocol::chat::v1::Event_MessageUpdated* mutable_edited_message();
  void set_allocated_edited_message(::protocol::chat::v1::Event_MessageUpdated* edited_message);
  private:
  const ::protocol::chat::v1::Event_MessageUpdated& _internal_edited_message() const;
  ::protocol::chat::v1::Event_MessageUpdated* _internal_mutable_edited_message();
  public:
  void unsafe_arena_set_allocated_edited_message(
      ::protocol::chat::v1::Event_MessageUpdated* edited_message);
  ::protocol::chat::v1::Event_MessageUpdated* unsafe_arena_release_edited_message();

  // .protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
  bool has_deleted_message() const;
  private:
  bool _internal_has_deleted_message() const;
  public:
  void clear_deleted_message();
  const ::protocol::chat::v1::Event_MessageDeleted& deleted_message() const;
  ::protocol::chat::v1::Event_MessageDeleted* release_deleted_message();
  ::protocol::chat::v1::Event_MessageDeleted* mutable_deleted_message();
  void set_allocated_deleted_message(::protocol::chat::v1::Event_MessageDeleted* deleted_message);
  private:
  const ::protocol::chat::v1::Event_MessageDeleted& _internal_deleted_message() const;
  ::protocol::chat::v1::Event_MessageDeleted* _internal_mutable_deleted_message();
  public:
  void unsafe_arena_set_allocated_deleted_message(
      ::protocol::chat::v1::Event_MessageDeleted* deleted_message);
  ::protocol::chat::v1::Event_MessageDeleted* unsafe_arena_release_deleted_message();

  // .protocol.chat.v1.Event.ChannelCreated created_channel = 7;
  bool has_created_channel() const;
  private:
  bool _internal_has_created_channel() const;
  public:
  void clear_created_channel();
  const ::protocol::chat::v1::Event_ChannelCreated& created_channel() const;
  ::protocol::chat::v1::Event_ChannelCreated* release_created_channel();
  ::protocol::chat::v1::Event_ChannelCreated* mutable_created_channel();
  void set_allocated_created_channel(::protocol::chat::v1::Event_ChannelCreated* created_channel);
  private:
  const ::protocol::chat::v1::Event_ChannelCreated& _internal_created_channel() const;
  ::protocol::chat::v1::Event_ChannelCreated* _internal_mutable_created_channel();
  public:
  void unsafe_arena_set_allocated_created_channel(
      ::protocol::chat::v1::Event_ChannelCreated* created_channel);
  ::protocol::chat::v1::Event_ChannelCreated* unsafe_arena_release_created_channel();

  // .protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
  bool has_edited_channel() const;
  private:
  bool _internal_has_edited_channel() const;
  public:
  void clear_edited_channel();
  const ::protocol::chat::v1::Event_ChannelUpdated& edited_channel() const;
  ::protocol::chat::v1::Event_ChannelUpdated* release_edited_channel();
  ::protocol::chat::v1::Event_ChannelUpdated* mutable_edited_channel();
  void set_allocated_edited_channel(::protocol::chat::v1::Event_ChannelUpdated* edited_channel);
  private:
  const ::protocol::chat::v1::Event_ChannelUpdated& _internal_edited_channel() const;
  ::protocol::chat::v1::Event_ChannelUpdated* _internal_mutable_edited_channel();
  public:
  void unsafe_arena_set_allocated_edited_channel(
      ::protocol::chat::v1::Event_ChannelUpdated* edited_channel);
  ::protocol::chat::v1::Event_ChannelUpdated* unsafe_arena_release_edited_channel();

  // .protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
  bool has_deleted_channel() const;
  private:
  bool _internal_has_deleted_channel() const;
  public:
  void clear_deleted_channel();
  const ::protocol::chat::v1::Event_ChannelDeleted& deleted_channel() const;
  ::protocol::chat::v1::Event_ChannelDeleted* release_deleted_channel();
  ::protocol::chat::v1::Event_ChannelDeleted* mutable_deleted_channel();
  void set_allocated_deleted_channel(::protocol::chat::v1::Event_ChannelDeleted* deleted_channel);
  private:
  const ::protocol::chat::v1::Event_ChannelDeleted& _internal_deleted_channel() const;
  ::protocol::chat::v1::Event_ChannelDeleted* _internal_mutable_deleted_channel();
  public:
  void unsafe_arena_set_allocated_deleted_channel(
      ::protocol::chat::v1::Event_ChannelDeleted* deleted_channel);
  ::protocol::chat::v1::Event_ChannelDeleted* unsafe_arena_release_deleted_channel();

  // .protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
  bool has_channels_reordered() const;
  private:
  bool _internal_has_channels_reordered() const;
  public:
  void clear_channels_reordered();
  const ::protocol::chat::v1::Event_ChannelsReordered& channels_reordered() const;
  ::protocol::chat::v1::Event_ChannelsReordered* release_channels_reordered();
  ::protocol::chat::v1::Event_ChannelsReordered* mutable_channels_reordered();
  void set_allocated_channels_reordered(::protocol::chat::v1::Event_ChannelsReordered* channels_reordered);
  private:
  const ::protocol::chat::v1::Event_ChannelsReordered& _internal_channels_reordered() const;
  ::protocol::chat::v1::Event_ChannelsReordered* _internal_mutable_channels_reordered();
  public:
  void unsafe_arena_set_allocated_channels_reordered(
      ::protocol::chat::v1::Event_ChannelsReordered* channels_reordered);
  ::protocol::chat::v1::Event_ChannelsReordered* unsafe_arena_release_channels_reordered();

  // .protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
  bool has_edited_guild() const;
  private:
  bool _internal_has_edited_guild() const;
  public:
  void clear_edited_guild();
  const ::protocol::chat::v1::Event_GuildUpdated& edited_guild() const;
  ::protocol::chat::v1::Event_GuildUpdated* release_edited_guild();
  ::protocol::chat::v1::Event_GuildUpdated* mutable_edited_guild();
  void set_allocated_edited_guild(::protocol::chat::v1::Event_GuildUpdated* edited_guild);
  private:
  const ::protocol::chat::v1::Event_GuildUpdated& _internal_edited_guild() const;
  ::protocol::chat::v1::Event_GuildUpdated* _internal_mutable_edited_guild();
  public:
  void unsafe_arena_set_allocated_edited_guild(
      ::protocol::chat::v1::Event_GuildUpdated* edited_guild);
  ::protocol::chat::v1::Event_GuildUpdated* unsafe_arena_release_edited_guild();

  // .protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
  bool has_deleted_guild() const;
  private:
  bool _internal_has_deleted_guild() const;
  public:
  void clear_deleted_guild();
  const ::protocol::chat::v1::Event_GuildDeleted& deleted_guild() const;
  ::protocol::chat::v1::Event_GuildDeleted* release_deleted_guild();
  ::protocol::chat::v1::Event_GuildDeleted* mutable_deleted_guild();
  void set_allocated_deleted_guild(::protocol::chat::v1::Event_GuildDeleted* deleted_guild);
  private:
  const ::protocol::chat::v1::Event_GuildDeleted& _internal_deleted_guild() const;
  ::protocol::chat::v1::Event_GuildDeleted* _internal_mutable_deleted_guild();
  public:
  void unsafe_arena_set_allocated_deleted_guild(
      ::protocol::chat::v1::Event_GuildDeleted* deleted_guild);
  ::protocol::chat::v1::Event_GuildDeleted* unsafe_arena_release_deleted_guild();

  // .protocol.chat.v1.Event.MemberJoined joined_member = 12;
  bool has_joined_member() const;
  private:
  bool _internal_has_joined_member() const;
  public:
  void clear_joined_member();
  const ::protocol::chat::v1::Event_MemberJoined& joined_member() const;
  ::protocol::chat::v1::Event_MemberJoined* release_joined_member();
  ::protocol::chat::v1::Event_MemberJoined* mutable_joined_member();
  void set_allocated_joined_member(::protocol::chat::v1::Event_MemberJoined* joined_member);
  private:
  const ::protocol::chat::v1::Event_MemberJoined& _internal_joined_member() const;
  ::protocol::chat::v1::Event_MemberJoined* _internal_mutable_joined_member();
  public:
  void unsafe_arena_set_allocated_joined_member(
      ::protocol::chat::v1::Event_MemberJoined* joined_member);
  ::protocol::chat::v1::Event_MemberJoined* unsafe_arena_release_joined_member();

  // .protocol.chat.v1.Event.MemberLeft left_member = 13;
  bool has_left_member() const;
  private:
  bool _internal_has_left_member() const;
  public:
  void clear_left_member();
  const ::protocol::chat::v1::Event_MemberLeft& left_member() const;
  ::protocol::chat::v1::Event_MemberLeft* release_left_member();
  ::protocol::chat::v1::Event_MemberLeft* mutable_left_member();
  void set_allocated_left_member(::protocol::chat::v1::Event_MemberLeft* left_member);
  private:
  const ::protocol::chat::v1::Event_MemberLeft& _internal_left_member() const;
  ::protocol::chat::v1::Event_MemberLeft* _internal_mutable_left_member();
  public:
  void unsafe_arena_set_allocated_left_member(
      ::protocol::chat::v1::Event_MemberLeft* left_member);
  ::protocol::chat::v1::Event_MemberLeft* unsafe_arena_release_left_member();

  // .protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
  bool has_profile_updated() const;
  private:
  bool _internal_has_profile_updated() const;
  public:
  void clear_profile_updated();
  const ::protocol::chat::v1::Event_ProfileUpdated& profile_updated() const;
  ::protocol::chat::v1::Event_ProfileUpdated* release_profile_updated();
  ::protocol::chat::v1::Event_ProfileUpdated* mutable_profile_updated();
  void set_allocated_profile_updated(::protocol::chat::v1::Event_ProfileUpdated* profile_updated);
  private:
  const ::protocol::chat::v1::Event_ProfileUpdated& _internal_profile_updated() const;
  ::protocol::chat::v1::Event_ProfileUpdated* _internal_mutable_profile_updated();
  public:
  void unsafe_arena_set_allocated_profile_updated(
      ::protocol::chat::v1::Event_ProfileUpdated* profile_updated);
  ::protocol::chat::v1::Event_ProfileUpdated* unsafe_arena_release_profile_updated();

  // .protocol.chat.v1.Event.Typing typing = 15;
  bool has_typing() const;
  private:
  bool _internal_has_typing() const;
  public:
  void clear_typing();
  const ::protocol::chat::v1::Event_Typing& typing() const;
  ::protocol::chat::v1::Event_Typing* release_typing();
  ::protocol::chat::v1::Event_Typing* mutable_typing();
  void set_allocated_typing(::protocol::chat::v1::Event_Typing* typing);
  private:
  const ::protocol::chat::v1::Event_Typing& _internal_typing() const;
  ::protocol::chat::v1::Event_Typing* _internal_mutable_typing();
  public:
  void unsafe_arena_set_allocated_typing(
      ::protocol::chat::v1::Event_Typing* typing);
  ::protocol::chat::v1::Event_Typing* unsafe_arena_release_typing();

  // .protocol.chat.v1.Event.RoleCreated role_created = 16;
  bool has_role_created() const;
  private:
  bool _internal_has_role_created() const;
  public:
  void clear_role_created();
  const ::protocol::chat::v1::Event_RoleCreated& role_created() const;
  ::protocol::chat::v1::Event_RoleCreated* release_role_created();
  ::protocol::chat::v1::Event_RoleCreated* mutable_role_created();
  void set_allocated_role_created(::protocol::chat::v1::Event_RoleCreated* role_created);
  private:
  const ::protocol::chat::v1::Event_RoleCreated& _internal_role_created() const;
  ::protocol::chat::v1::Event_RoleCreated* _internal_mutable_role_created();
  public:
  void unsafe_arena_set_allocated_role_created(
      ::protocol::chat::v1::Event_RoleCreated* role_created);
  ::protocol::chat::v1::Event_RoleCreated* unsafe_arena_release_role_created();

  // .protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
  bool has_role_deleted() const;
  private:
  bool _internal_has_role_deleted() const;
  public:
  void clear_role_deleted();
  const ::protocol::chat::v1::Event_RoleDeleted& role_deleted() const;
  ::protocol::chat::v1::Event_RoleDeleted* release_role_deleted();
  ::protocol::chat::v1::Event_RoleDeleted* mutable_role_deleted();
  void set_allocated_role_deleted(::protocol::chat::v1::Event_RoleDeleted* role_deleted);
  private:
  const ::protocol::chat::v1::Event_RoleDeleted& _internal_role_deleted() const;
  ::protocol::chat::v1::Event_RoleDeleted* _internal_mutable_role_deleted();
  public:
  void unsafe_arena_set_allocated_role_deleted(
      ::protocol::chat::v1::Event_RoleDeleted* role_deleted);
  ::protocol::chat::v1::Event_RoleDeleted* unsafe_arena_release_role_deleted();

  // .protocol.chat.v1.Event.RoleMoved role_moved = 18;
  bool has_role_moved() const;
  private:
  bool _internal_has_role_moved() const;
  public:
  void clear_role_moved();
  const ::protocol::chat::v1::Event_RoleMoved& role_moved() const;
  ::protocol::chat::v1::Event_RoleMoved* release_role_moved();
  ::protocol::chat::v1::Event_RoleMoved* mutable_role_moved();
  void set_allocated_role_moved(::protocol::chat::v1::Event_RoleMoved* role_moved);
  private:
  const ::protocol::chat::v1::Event_RoleMoved& _internal_role_moved() const;
  ::protocol::chat::v1::Event_RoleMoved* _internal_mutable_role_moved();
  public:
  void unsafe_arena_set_allocated_role_moved(
      ::protocol::chat::v1::Event_RoleMoved* role_moved);
  ::protocol::chat::v1::Event_RoleMoved* unsafe_arena_release_role_moved();

  // .protocol.chat.v1.Event.RoleUpdated role_updated = 19;
  bool has_role_updated() const;
  private:
  bool _internal_has_role_updated() const;
  public:
  void clear_role_updated();
  const ::protocol::chat::v1::Event_RoleUpdated& role_updated() const;
  ::protocol::chat::v1::Event_RoleUpdated* release_role_updated();
  ::protocol::chat::v1::Event_RoleUpdated* mutable_role_updated();
  void set_allocated_role_updated(::protocol::chat::v1::Event_RoleUpdated* role_updated);
  private:
  const ::protocol::chat::v1::Event_RoleUpdated& _internal_role_updated() const;
  ::protocol::chat::v1::Event_RoleUpdated* _internal_mutable_role_updated();
  public:
  void unsafe_arena_set_allocated_role_updated(
      ::protocol::chat::v1::Event_RoleUpdated* role_updated);
  ::protocol::chat::v1::Event_RoleUpdated* unsafe_arena_release_role_updated();

  // .protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
  bool has_role_perms_updated() const;
  private:
  bool _internal_has_role_perms_updated() const;
  public:
  void clear_role_perms_updated();
  const ::protocol::chat::v1::Event_RolePermissionsUpdated& role_perms_updated() const;
  ::protocol::chat::v1::Event_RolePermissionsUpdated* release_role_perms_updated();
  ::protocol::chat::v1::Event_RolePermissionsUpdated* mutable_role_perms_updated();
  void set_allocated_role_perms_updated(::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated);
  private:
  const ::protocol::chat::v1::Event_RolePermissionsUpdated& _internal_role_perms_updated() const;
  ::protocol::chat::v1::Event_RolePermissionsUpdated* _internal_mutable_role_perms_updated();
  public:
  void unsafe_arena_set_allocated_role_perms_updated(
      ::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated);
  ::protocol::chat::v1::Event_RolePermissionsUpdated* unsafe_arena_release_role_perms_updated();

  // .protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
  bool has_user_roles_updated() const;
  private:
  bool _internal_has_user_roles_updated() const;
  public:
  void clear_user_roles_updated();
  const ::protocol::chat::v1::Event_UserRolesUpdated& user_roles_updated() const;
  ::protocol::chat::v1::Event_UserRolesUpdated* release_user_roles_updated();
  ::protocol::chat::v1::Event_UserRolesUpdated* mutable_user_roles_updated();
  void set_allocated_user_roles_updated(::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated);
  private:
  const ::protocol::chat::v1::Event_UserRolesUpdated& _internal_user_roles_updated() const;
  ::protocol::chat::v1::Event_UserRolesUpdated* _internal_mutable_user_roles_updated();
  public:
  void unsafe_arena_set_allocated_user_roles_updated(
      ::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated);
  ::protocol::chat::v1::Event_UserRolesUpdated* unsafe_arena_release_user_roles_updated();

  // .protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
  bool has_permission_updated() const;
  private:
  bool _internal_has_permission_updated() const;
  public:
  void clear_permission_updated();
  const ::protocol::chat::v1::Event_PermissionUpdated& permission_updated() const;
  ::protocol::chat::v1::Event_PermissionUpdated* release_permission_updated();
  ::protocol::chat::v1::Event_PermissionUpdated* mutable_permission_updated();
  void set_allocated_permission_updated(::protocol::chat::v1::Event_PermissionUpdated* permission_updated);
  private:
  const ::protocol::chat::v1::Event_PermissionUpdated& _internal_permission_updated() const;
  ::protocol::chat::v1::Event_PermissionUpdated* _internal_mutable_permission_updated();
  public:
  void unsafe_arena_set_allocated_permission_updated(
      ::protocol::chat::v1::Event_PermissionUpdated* permission_updated);
  ::protocol::chat::v1::Event_PermissionUpdated* unsafe_arena_release_permission_updated();

  // .protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
  bool has_emote_pack_added() const;
  private:
  bool _internal_has_emote_pack_added() const;
  public:
  void clear_emote_pack_added();
  const ::protocol::chat::v1::Event_EmotePackAdded& emote_pack_added() const;
  ::protocol::chat::v1::Event_EmotePackAdded* release_emote_pack_added();
  ::protocol::chat::v1::Event_EmotePackAdded* mutable_emote_pack_added();
  void set_allocated_emote_pack_added(::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added);
  private:
  const ::protocol::chat::v1::Event_EmotePackAdded& _internal_emote_pack_added() const;
  ::protocol::chat::v1::Event_EmotePackAdded* _internal_mutable_emote_pack_added();
  public:
  void unsafe_arena_set_allocated_emote_pack_added(
      ::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added);
  ::protocol::chat::v1::Event_EmotePackAdded* unsafe_arena_release_emote_pack_added();

  // .protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
  bool has_emote_pack_updated() const;
  private:
  bool _internal_has_emote_pack_updated() const;
  public:
  void clear_emote_pack_updated();
  const ::protocol::chat::v1::Event_EmotePackUpdated& emote_pack_updated() const;
  ::protocol::chat::v1::Event_EmotePackUpdated* release_emote_pack_updated();
  ::protocol::chat::v1::Event_EmotePackUpdated* mutable_emote_pack_updated();
  void set_allocated_emote_pack_updated(::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated);
  private:
  const ::protocol::chat::v1::Event_EmotePackUpdated& _internal_emote_pack_updated() const;
  ::protocol::chat::v1::Event_EmotePackUpdated* _internal_mutable_emote_pack_updated();
  public:
  void unsafe_arena_set_allocated_emote_pack_updated(
      ::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated);
  ::protocol::chat::v1::Event_EmotePackUpdated* unsafe_arena_release_emote_pack_updated();

  // .protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
  bool has_emote_pack_deleted() const;
  private:
  bool _internal_has_emote_pack_deleted() const;
  public:
  void clear_emote_pack_deleted();
  const ::protocol::chat::v1::Event_EmotePackDeleted& emote_pack_deleted() const;
  ::protocol::chat::v1::Event_EmotePackDeleted* release_emote_pack_deleted();
  ::protocol::chat::v1::Event_EmotePackDeleted* mutable_emote_pack_deleted();
  void set_allocated_emote_pack_deleted(::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted);
  private:
  const ::protocol::chat::v1::Event_EmotePackDeleted& _internal_emote_pack_deleted() const;
  ::protocol::chat::v1::Event_EmotePackDeleted* _internal_mutable_emote_pack_deleted();
  public:
  void unsafe_arena_set_allocated_emote_pack_deleted(
      ::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted);
  ::protocol::chat::v1::Event_EmotePackDeleted* unsafe_arena_release_emote_pack_deleted();

  // .protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
  bool has_emote_pack_emotes_updated() const;
  private:
  bool _internal_has_emote_pack_emotes_updated() const;
  public:
  void clear_emote_pack_emotes_updated();
  const ::protocol::chat::v1::Event_EmotePackEmotesUpdated& emote_pack_emotes_updated() const;
  ::protocol::chat::v1::Event_EmotePackEmotesUpdated* release_emote_pack_emotes_updated();
  ::protocol::chat::v1::Event_EmotePackEmotesUpdated* mutable_emote_pack_emotes_updated();
  void set_allocated_emote_pack_emotes_updated(::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated);
  private:
  const ::protocol::chat::v1::Event_EmotePackEmotesUpdated& _internal_emote_pack_emotes_updated() const;
  ::protocol::chat::v1::Event_EmotePackEmotesUpdated* _internal_mutable_emote_pack_emotes_updated();
  public:
  void unsafe_arena_set_allocated_emote_pack_emotes_updated(
      ::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated);
  ::protocol::chat::v1::Event_EmotePackEmotesUpdated* unsafe_arena_release_emote_pack_emotes_updated();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Event)
 private:
  class _Internal;
  void set_has_guild_added_to_list();
  void set_has_guild_removed_from_list();
  void set_has_action_performed();
  void set_has_sent_message();
  void set_has_edited_message();
  void set_has_deleted_message();
  void set_has_created_channel();
  void set_has_edited_channel();
  void set_has_deleted_channel();
  void set_has_channels_reordered();
  void set_has_edited_guild();
  void set_has_deleted_guild();
  void set_has_joined_member();
  void set_has_left_member();
  void set_has_profile_updated();
  void set_has_typing();
  void set_has_role_created();
  void set_has_role_deleted();
  void set_has_role_moved();
  void set_has_role_updated();
  void set_has_role_perms_updated();
  void set_has_user_roles_updated();
  void set_has_permission_updated();
  void set_has_emote_pack_added();
  void set_has_emote_pack_updated();
  void set_has_emote_pack_deleted();
  void set_has_emote_pack_emotes_updated();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list_;
    ::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list_;
    ::protocol::chat::v1::Event_ActionPerformed* action_performed_;
    ::protocol::chat::v1::Event_MessageSent* sent_message_;
    ::protocol::chat::v1::Event_MessageUpdated* edited_message_;
    ::protocol::chat::v1::Event_MessageDeleted* deleted_message_;
    ::protocol::chat::v1::Event_ChannelCreated* created_channel_;
    ::protocol::chat::v1::Event_ChannelUpdated* edited_channel_;
    ::protocol::chat::v1::Event_ChannelDeleted* deleted_channel_;
    ::protocol::chat::v1::Event_ChannelsReordered* channels_reordered_;
    ::protocol::chat::v1::Event_GuildUpdated* edited_guild_;
    ::protocol::chat::v1::Event_GuildDeleted* deleted_guild_;
    ::protocol::chat::v1::Event_MemberJoined* joined_member_;
    ::protocol::chat::v1::Event_MemberLeft* left_member_;
    ::protocol::chat::v1::Event_ProfileUpdated* profile_updated_;
    ::protocol::chat::v1::Event_Typing* typing_;
    ::protocol::chat::v1::Event_RoleCreated* role_created_;
    ::protocol::chat::v1::Event_RoleDeleted* role_deleted_;
    ::protocol::chat::v1::Event_RoleMoved* role_moved_;
    ::protocol::chat::v1::Event_RoleUpdated* role_updated_;
    ::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated_;
    ::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated_;
    ::protocol::chat::v1::Event_PermissionUpdated* permission_updated_;
    ::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added_;
    ::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated_;
    ::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted_;
    ::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2fv1_2fstreaming_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamEventsRequest_SubscribeToGuild

// uint64 guild_id = 1;
inline void StreamEventsRequest_SubscribeToGuild::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventsRequest_SubscribeToGuild::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamEventsRequest_SubscribeToGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.guild_id)
  return _internal_guild_id();
}
inline void StreamEventsRequest_SubscribeToGuild::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void StreamEventsRequest_SubscribeToGuild::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild.guild_id)
}

// -------------------------------------------------------------------

// StreamEventsRequest_SubscribeToActions

// -------------------------------------------------------------------

// StreamEventsRequest_SubscribeToHomeserverEvents

// -------------------------------------------------------------------

// StreamEventsRequest

// .protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
inline bool StreamEventsRequest::_internal_has_subscribe_to_guild() const {
  return request_case() == kSubscribeToGuild;
}
inline bool StreamEventsRequest::has_subscribe_to_guild() const {
  return _internal_has_subscribe_to_guild();
}
inline void StreamEventsRequest::set_has_subscribe_to_guild() {
  _oneof_case_[0] = kSubscribeToGuild;
}
inline void StreamEventsRequest::clear_subscribe_to_guild() {
  if (_internal_has_subscribe_to_guild()) {
    if (GetArena() == nullptr) {
      delete request_.subscribe_to_guild_;
    }
    clear_has_request();
  }
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* StreamEventsRequest::release_subscribe_to_guild() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
  if (_internal_has_subscribe_to_guild()) {
    clear_has_request();
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* temp = request_.subscribe_to_guild_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.subscribe_to_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild& StreamEventsRequest::_internal_subscribe_to_guild() const {
  return _internal_has_subscribe_to_guild()
      ? *request_.subscribe_to_guild_
      : *reinterpret_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToGuild_default_instance_);
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild& StreamEventsRequest::subscribe_to_guild() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
  return _internal_subscribe_to_guild();
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* StreamEventsRequest::unsafe_arena_release_subscribe_to_guild() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
  if (_internal_has_subscribe_to_guild()) {
    clear_has_request();
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* temp = request_.subscribe_to_guild_;
    request_.subscribe_to_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamEventsRequest::unsafe_arena_set_allocated_subscribe_to_guild(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild) {
  clear_request();
  if (subscribe_to_guild) {
    set_has_subscribe_to_guild();
    request_.subscribe_to_guild_ = subscribe_to_guild;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* StreamEventsRequest::_internal_mutable_subscribe_to_guild() {
  if (!_internal_has_subscribe_to_guild()) {
    clear_request();
    set_has_subscribe_to_guild();
    request_.subscribe_to_guild_ = CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild >(GetArena());
  }
  return request_.subscribe_to_guild_;
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* StreamEventsRequest::mutable_subscribe_to_guild() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
  return _internal_mutable_subscribe_to_guild();
}

// .protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
inline bool StreamEventsRequest::_internal_has_subscribe_to_actions() const {
  return request_case() == kSubscribeToActions;
}
inline bool StreamEventsRequest::has_subscribe_to_actions() const {
  return _internal_has_subscribe_to_actions();
}
inline void StreamEventsRequest::set_has_subscribe_to_actions() {
  _oneof_case_[0] = kSubscribeToActions;
}
inline void StreamEventsRequest::clear_subscribe_to_actions() {
  if (_internal_has_subscribe_to_actions()) {
    if (GetArena() == nullptr) {
      delete request_.subscribe_to_actions_;
    }
    clear_has_request();
  }
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* StreamEventsRequest::release_subscribe_to_actions() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
  if (_internal_has_subscribe_to_actions()) {
    clear_has_request();
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* temp = request_.subscribe_to_actions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.subscribe_to_actions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions& StreamEventsRequest::_internal_subscribe_to_actions() const {
  return _internal_has_subscribe_to_actions()
      ? *request_.subscribe_to_actions_
      : *reinterpret_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToActions_default_instance_);
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions& StreamEventsRequest::subscribe_to_actions() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
  return _internal_subscribe_to_actions();
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* StreamEventsRequest::unsafe_arena_release_subscribe_to_actions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
  if (_internal_has_subscribe_to_actions()) {
    clear_has_request();
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* temp = request_.subscribe_to_actions_;
    request_.subscribe_to_actions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamEventsRequest::unsafe_arena_set_allocated_subscribe_to_actions(::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions) {
  clear_request();
  if (subscribe_to_actions) {
    set_has_subscribe_to_actions();
    request_.subscribe_to_actions_ = subscribe_to_actions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* StreamEventsRequest::_internal_mutable_subscribe_to_actions() {
  if (!_internal_has_subscribe_to_actions()) {
    clear_request();
    set_has_subscribe_to_actions();
    request_.subscribe_to_actions_ = CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions >(GetArena());
  }
  return request_.subscribe_to_actions_;
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* StreamEventsRequest::mutable_subscribe_to_actions() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
  return _internal_mutable_subscribe_to_actions();
}

// .protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
inline bool StreamEventsRequest::_internal_has_subscribe_to_homeserver_events() const {
  return request_case() == kSubscribeToHomeserverEvents;
}
inline bool StreamEventsRequest::has_subscribe_to_homeserver_events() const {
  return _internal_has_subscribe_to_homeserver_events();
}
inline void StreamEventsRequest::set_has_subscribe_to_homeserver_events() {
  _oneof_case_[0] = kSubscribeToHomeserverEvents;
}
inline void StreamEventsRequest::clear_subscribe_to_homeserver_events() {
  if (_internal_has_subscribe_to_homeserver_events()) {
    if (GetArena() == nullptr) {
      delete request_.subscribe_to_homeserver_events_;
    }
    clear_has_request();
  }
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* StreamEventsRequest::release_subscribe_to_homeserver_events() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
  if (_internal_has_subscribe_to_homeserver_events()) {
    clear_has_request();
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* temp = request_.subscribe_to_homeserver_events_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.subscribe_to_homeserver_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents& StreamEventsRequest::_internal_subscribe_to_homeserver_events() const {
  return _internal_has_subscribe_to_homeserver_events()
      ? *request_.subscribe_to_homeserver_events_
      : *reinterpret_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_);
}
inline const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents& StreamEventsRequest::subscribe_to_homeserver_events() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
  return _internal_subscribe_to_homeserver_events();
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* StreamEventsRequest::unsafe_arena_release_subscribe_to_homeserver_events() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
  if (_internal_has_subscribe_to_homeserver_events()) {
    clear_has_request();
    ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* temp = request_.subscribe_to_homeserver_events_;
    request_.subscribe_to_homeserver_events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamEventsRequest::unsafe_arena_set_allocated_subscribe_to_homeserver_events(::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events) {
  clear_request();
  if (subscribe_to_homeserver_events) {
    set_has_subscribe_to_homeserver_events();
    request_.subscribe_to_homeserver_events_ = subscribe_to_homeserver_events;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* StreamEventsRequest::_internal_mutable_subscribe_to_homeserver_events() {
  if (!_internal_has_subscribe_to_homeserver_events()) {
    clear_request();
    set_has_subscribe_to_homeserver_events();
    request_.subscribe_to_homeserver_events_ = CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents >(GetArena());
  }
  return request_.subscribe_to_homeserver_events_;
}
inline ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* StreamEventsRequest::mutable_subscribe_to_homeserver_events() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
  return _internal_mutable_subscribe_to_homeserver_events();
}

inline bool StreamEventsRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void StreamEventsRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline StreamEventsRequest::RequestCase StreamEventsRequest::request_case() const {
  return StreamEventsRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event_MessageSent

// uint64 echo_id = 1;
inline void Event_MessageSent::clear_echo_id() {
  echo_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageSent::_internal_echo_id() const {
  return echo_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageSent::echo_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageSent.echo_id)
  return _internal_echo_id();
}
inline void Event_MessageSent::_internal_set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  echo_id_ = value;
}
inline void Event_MessageSent::set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_echo_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageSent.echo_id)
}

// .protocol.harmonytypes.v1.Message message = 2;
inline bool Event_MessageSent::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool Event_MessageSent::has_message() const {
  return _internal_has_message();
}
inline const ::protocol::harmonytypes::v1::Message& Event_MessageSent::_internal_message() const {
  const ::protocol::harmonytypes::v1::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Message*>(
      &::protocol::harmonytypes::v1::_Message_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Message& Event_MessageSent::message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageSent.message)
  return _internal_message();
}
inline void Event_MessageSent::unsafe_arena_set_allocated_message(
    ::protocol::harmonytypes::v1::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.MessageSent.message)
}
inline ::protocol::harmonytypes::v1::Message* Event_MessageSent::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Message* Event_MessageSent::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.MessageSent.message)
  
  ::protocol::harmonytypes::v1::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Message* Event_MessageSent::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::protocol::harmonytypes::v1::Message* Event_MessageSent::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.MessageSent.message)
  return _internal_mutable_message();
}
inline void Event_MessageSent::set_allocated_message(::protocol::harmonytypes::v1::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.MessageSent.message)
}

// -------------------------------------------------------------------

// Event_MessageUpdated

// uint64 guild_id = 1;
inline void Event_MessageUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_MessageUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_MessageUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageUpdated.guild_id)
}

// uint64 channel_id = 2;
inline void Event_MessageUpdated::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageUpdated.channel_id)
  return _internal_channel_id();
}
inline void Event_MessageUpdated::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_MessageUpdated::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageUpdated.channel_id)
}

// uint64 message_id = 3;
inline void Event_MessageUpdated::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageUpdated::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageUpdated.message_id)
  return _internal_message_id();
}
inline void Event_MessageUpdated::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void Event_MessageUpdated::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageUpdated.message_id)
}

// .google.protobuf.Timestamp edited_at = 4;
inline bool Event_MessageUpdated::_internal_has_edited_at() const {
  return this != internal_default_instance() && edited_at_ != nullptr;
}
inline bool Event_MessageUpdated::has_edited_at() const {
  return _internal_has_edited_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event_MessageUpdated::_internal_edited_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edited_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event_MessageUpdated::edited_at() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageUpdated.edited_at)
  return _internal_edited_at();
}
inline void Event_MessageUpdated::unsafe_arena_set_allocated_edited_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* edited_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at_);
  }
  edited_at_ = edited_at;
  if (edited_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.MessageUpdated.edited_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event_MessageUpdated::release_edited_at() {
  auto temp = unsafe_arena_release_edited_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event_MessageUpdated::unsafe_arena_release_edited_at() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.MessageUpdated.edited_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edited_at_;
  edited_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event_MessageUpdated::_internal_mutable_edited_at() {
  
  if (edited_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edited_at_ = p;
  }
  return edited_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event_MessageUpdated::mutable_edited_at() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.MessageUpdated.edited_at)
  return _internal_mutable_edited_at();
}
inline void Event_MessageUpdated::set_allocated_edited_at(PROTOBUF_NAMESPACE_ID::Timestamp* edited_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at_);
  }
  if (edited_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at)->GetArena();
    if (message_arena != submessage_arena) {
      edited_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edited_at, submessage_arena);
    }
    
  } else {
    
  }
  edited_at_ = edited_at;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.MessageUpdated.edited_at)
}

// string content = 5;
inline void Event_MessageUpdated::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_MessageUpdated::content() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageUpdated.content)
  return _internal_content();
}
inline void Event_MessageUpdated::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageUpdated.content)
}
inline std::string* Event_MessageUpdated::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.MessageUpdated.content)
  return _internal_mutable_content();
}
inline const std::string& Event_MessageUpdated::_internal_content() const {
  return content_.Get();
}
inline void Event_MessageUpdated::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_MessageUpdated::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.MessageUpdated.content)
}
inline void Event_MessageUpdated::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.MessageUpdated.content)
}
inline void Event_MessageUpdated::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.MessageUpdated.content)
}
inline std::string* Event_MessageUpdated::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_MessageUpdated::release_content() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.MessageUpdated.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_MessageUpdated::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.MessageUpdated.content)
}
inline std::string* Event_MessageUpdated::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.MessageUpdated.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_MessageUpdated::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.MessageUpdated.content)
}

// -------------------------------------------------------------------

// Event_MessageDeleted

// uint64 guild_id = 1;
inline void Event_MessageDeleted::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageDeleted.guild_id)
  return _internal_guild_id();
}
inline void Event_MessageDeleted::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_MessageDeleted::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageDeleted.guild_id)
}

// uint64 channel_id = 2;
inline void Event_MessageDeleted::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageDeleted.channel_id)
  return _internal_channel_id();
}
inline void Event_MessageDeleted::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_MessageDeleted::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageDeleted.channel_id)
}

// uint64 message_id = 3;
inline void Event_MessageDeleted::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MessageDeleted::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MessageDeleted.message_id)
  return _internal_message_id();
}
inline void Event_MessageDeleted::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void Event_MessageDeleted::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MessageDeleted.message_id)
}

// -------------------------------------------------------------------

// Event_ChannelCreated

// uint64 guild_id = 1;
inline void Event_ChannelCreated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.guild_id)
  return _internal_guild_id();
}
inline void Event_ChannelCreated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_ChannelCreated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.guild_id)
}

// uint64 channel_id = 2;
inline void Event_ChannelCreated::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.channel_id)
  return _internal_channel_id();
}
inline void Event_ChannelCreated::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_ChannelCreated::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.channel_id)
}

// string name = 3;
inline void Event_ChannelCreated::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ChannelCreated::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.name)
  return _internal_name();
}
inline void Event_ChannelCreated::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.name)
}
inline std::string* Event_ChannelCreated::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ChannelCreated.name)
  return _internal_mutable_name();
}
inline const std::string& Event_ChannelCreated::_internal_name() const {
  return name_.Get();
}
inline void Event_ChannelCreated::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ChannelCreated::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ChannelCreated.name)
}
inline void Event_ChannelCreated::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ChannelCreated.name)
}
inline void Event_ChannelCreated::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ChannelCreated.name)
}
inline std::string* Event_ChannelCreated::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ChannelCreated::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ChannelCreated.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ChannelCreated::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ChannelCreated.name)
}
inline std::string* Event_ChannelCreated::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ChannelCreated.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ChannelCreated::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ChannelCreated.name)
}

// uint64 previous_id = 4;
inline void Event_ChannelCreated::clear_previous_id() {
  previous_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::_internal_previous_id() const {
  return previous_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::previous_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.previous_id)
  return _internal_previous_id();
}
inline void Event_ChannelCreated::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  previous_id_ = value;
}
inline void Event_ChannelCreated::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.previous_id)
}

// uint64 next_id = 5;
inline void Event_ChannelCreated::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelCreated::next_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.next_id)
  return _internal_next_id();
}
inline void Event_ChannelCreated::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void Event_ChannelCreated::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.next_id)
}

// bool is_category = 6;
inline void Event_ChannelCreated::clear_is_category() {
  is_category_ = false;
}
inline bool Event_ChannelCreated::_internal_is_category() const {
  return is_category_;
}
inline bool Event_ChannelCreated::is_category() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.is_category)
  return _internal_is_category();
}
inline void Event_ChannelCreated::_internal_set_is_category(bool value) {
  
  is_category_ = value;
}
inline void Event_ChannelCreated::set_is_category(bool value) {
  _internal_set_is_category(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelCreated.is_category)
}

// .protocol.harmonytypes.v1.Metadata metadata = 7;
inline bool Event_ChannelCreated::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Event_ChannelCreated::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_ChannelCreated::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_ChannelCreated::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelCreated.metadata)
  return _internal_metadata();
}
inline void Event_ChannelCreated::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ChannelCreated.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelCreated::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelCreated::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ChannelCreated.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelCreated::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelCreated::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ChannelCreated.metadata)
  return _internal_mutable_metadata();
}
inline void Event_ChannelCreated::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ChannelCreated.metadata)
}

// -------------------------------------------------------------------

// Event_ChannelUpdated

// uint64 guild_id = 1;
inline void Event_ChannelUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_ChannelUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_ChannelUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.guild_id)
}

// uint64 channel_id = 2;
inline void Event_ChannelUpdated::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.channel_id)
  return _internal_channel_id();
}
inline void Event_ChannelUpdated::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_ChannelUpdated::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.channel_id)
}

// string name = 3;
inline void Event_ChannelUpdated::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ChannelUpdated::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.name)
  return _internal_name();
}
inline void Event_ChannelUpdated::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.name)
}
inline std::string* Event_ChannelUpdated::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ChannelUpdated.name)
  return _internal_mutable_name();
}
inline const std::string& Event_ChannelUpdated::_internal_name() const {
  return name_.Get();
}
inline void Event_ChannelUpdated::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ChannelUpdated::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ChannelUpdated.name)
}
inline void Event_ChannelUpdated::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ChannelUpdated.name)
}
inline void Event_ChannelUpdated::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ChannelUpdated.name)
}
inline std::string* Event_ChannelUpdated::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ChannelUpdated::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ChannelUpdated.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ChannelUpdated::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ChannelUpdated.name)
}
inline std::string* Event_ChannelUpdated::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ChannelUpdated.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ChannelUpdated::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ChannelUpdated.name)
}

// bool update_name = 4;
inline void Event_ChannelUpdated::clear_update_name() {
  update_name_ = false;
}
inline bool Event_ChannelUpdated::_internal_update_name() const {
  return update_name_;
}
inline bool Event_ChannelUpdated::update_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.update_name)
  return _internal_update_name();
}
inline void Event_ChannelUpdated::_internal_set_update_name(bool value) {
  
  update_name_ = value;
}
inline void Event_ChannelUpdated::set_update_name(bool value) {
  _internal_set_update_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.update_name)
}

// uint64 previous_id = 5;
inline void Event_ChannelUpdated::clear_previous_id() {
  previous_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::_internal_previous_id() const {
  return previous_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::previous_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.previous_id)
  return _internal_previous_id();
}
inline void Event_ChannelUpdated::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  previous_id_ = value;
}
inline void Event_ChannelUpdated::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.previous_id)
}

// uint64 next_id = 6;
inline void Event_ChannelUpdated::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelUpdated::next_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.next_id)
  return _internal_next_id();
}
inline void Event_ChannelUpdated::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void Event_ChannelUpdated::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.next_id)
}

// bool update_order = 7;
inline void Event_ChannelUpdated::clear_update_order() {
  update_order_ = false;
}
inline bool Event_ChannelUpdated::_internal_update_order() const {
  return update_order_;
}
inline bool Event_ChannelUpdated::update_order() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.update_order)
  return _internal_update_order();
}
inline void Event_ChannelUpdated::_internal_set_update_order(bool value) {
  
  update_order_ = value;
}
inline void Event_ChannelUpdated::set_update_order(bool value) {
  _internal_set_update_order(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.update_order)
}

// .protocol.harmonytypes.v1.Metadata metadata = 8;
inline bool Event_ChannelUpdated::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Event_ChannelUpdated::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_ChannelUpdated::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_ChannelUpdated::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.metadata)
  return _internal_metadata();
}
inline void Event_ChannelUpdated::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ChannelUpdated.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelUpdated::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelUpdated::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ChannelUpdated.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelUpdated::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_ChannelUpdated::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ChannelUpdated.metadata)
  return _internal_mutable_metadata();
}
inline void Event_ChannelUpdated::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ChannelUpdated.metadata)
}

// bool update_metadata = 9;
inline void Event_ChannelUpdated::clear_update_metadata() {
  update_metadata_ = false;
}
inline bool Event_ChannelUpdated::_internal_update_metadata() const {
  return update_metadata_;
}
inline bool Event_ChannelUpdated::update_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelUpdated.update_metadata)
  return _internal_update_metadata();
}
inline void Event_ChannelUpdated::_internal_set_update_metadata(bool value) {
  
  update_metadata_ = value;
}
inline void Event_ChannelUpdated::set_update_metadata(bool value) {
  _internal_set_update_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelUpdated.update_metadata)
}

// -------------------------------------------------------------------

// Event_ChannelsReordered

// uint64 guild_id = 2;
inline void Event_ChannelsReordered::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelsReordered::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelsReordered::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelsReordered.guild_id)
  return _internal_guild_id();
}
inline void Event_ChannelsReordered::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_ChannelsReordered::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelsReordered.guild_id)
}

// repeated uint64 channel_ids = 1;
inline int Event_ChannelsReordered::_internal_channel_ids_size() const {
  return channel_ids_.size();
}
inline int Event_ChannelsReordered::channel_ids_size() const {
  return _internal_channel_ids_size();
}
inline void Event_ChannelsReordered::clear_channel_ids() {
  channel_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelsReordered::_internal_channel_ids(int index) const {
  return channel_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelsReordered::channel_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelsReordered.channel_ids)
  return _internal_channel_ids(index);
}
inline void Event_ChannelsReordered::set_channel_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelsReordered.channel_ids)
}
inline void Event_ChannelsReordered::_internal_add_channel_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  channel_ids_.Add(value);
}
inline void Event_ChannelsReordered::add_channel_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_channel_ids(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.Event.ChannelsReordered.channel_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Event_ChannelsReordered::_internal_channel_ids() const {
  return channel_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Event_ChannelsReordered::channel_ids() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.Event.ChannelsReordered.channel_ids)
  return _internal_channel_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Event_ChannelsReordered::_internal_mutable_channel_ids() {
  return &channel_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Event_ChannelsReordered::mutable_channel_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.Event.ChannelsReordered.channel_ids)
  return _internal_mutable_channel_ids();
}

// -------------------------------------------------------------------

// Event_ChannelDeleted

// uint64 guild_id = 1;
inline void Event_ChannelDeleted::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelDeleted::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelDeleted::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelDeleted.guild_id)
  return _internal_guild_id();
}
inline void Event_ChannelDeleted::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_ChannelDeleted::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelDeleted.guild_id)
}

// uint64 channel_id = 2;
inline void Event_ChannelDeleted::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelDeleted::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ChannelDeleted::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ChannelDeleted.channel_id)
  return _internal_channel_id();
}
inline void Event_ChannelDeleted::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_ChannelDeleted::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ChannelDeleted.channel_id)
}

// -------------------------------------------------------------------

// Event_GuildUpdated

// uint64 guild_id = 1;
inline void Event_GuildUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_GuildUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_GuildUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.guild_id)
}

// string name = 2;
inline void Event_GuildUpdated::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_GuildUpdated::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.name)
  return _internal_name();
}
inline void Event_GuildUpdated::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.name)
}
inline std::string* Event_GuildUpdated::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.GuildUpdated.name)
  return _internal_mutable_name();
}
inline const std::string& Event_GuildUpdated::_internal_name() const {
  return name_.Get();
}
inline void Event_GuildUpdated::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_GuildUpdated::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.GuildUpdated.name)
}
inline void Event_GuildUpdated::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.GuildUpdated.name)
}
inline void Event_GuildUpdated::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.GuildUpdated.name)
}
inline std::string* Event_GuildUpdated::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_GuildUpdated::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.GuildUpdated.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_GuildUpdated::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.GuildUpdated.name)
}
inline std::string* Event_GuildUpdated::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.GuildUpdated.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_GuildUpdated::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.GuildUpdated.name)
}

// bool update_name = 3;
inline void Event_GuildUpdated::clear_update_name() {
  update_name_ = false;
}
inline bool Event_GuildUpdated::_internal_update_name() const {
  return update_name_;
}
inline bool Event_GuildUpdated::update_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.update_name)
  return _internal_update_name();
}
inline void Event_GuildUpdated::_internal_set_update_name(bool value) {
  
  update_name_ = value;
}
inline void Event_GuildUpdated::set_update_name(bool value) {
  _internal_set_update_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.update_name)
}

// string picture = 4;
inline void Event_GuildUpdated::clear_picture() {
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_GuildUpdated::picture() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.picture)
  return _internal_picture();
}
inline void Event_GuildUpdated::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.picture)
}
inline std::string* Event_GuildUpdated::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.GuildUpdated.picture)
  return _internal_mutable_picture();
}
inline const std::string& Event_GuildUpdated::_internal_picture() const {
  return picture_.Get();
}
inline void Event_GuildUpdated::_internal_set_picture(const std::string& value) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_GuildUpdated::set_picture(std::string&& value) {
  
  picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.GuildUpdated.picture)
}
inline void Event_GuildUpdated::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.GuildUpdated.picture)
}
inline void Event_GuildUpdated::set_picture(const char* value,
    size_t size) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.GuildUpdated.picture)
}
inline std::string* Event_GuildUpdated::_internal_mutable_picture() {
  
  return picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_GuildUpdated::release_picture() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.GuildUpdated.picture)
  return picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_GuildUpdated::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.GuildUpdated.picture)
}
inline std::string* Event_GuildUpdated::unsafe_arena_release_picture() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.GuildUpdated.picture)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return picture_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_GuildUpdated::unsafe_arena_set_allocated_picture(
    std::string* picture) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      picture, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.GuildUpdated.picture)
}

// bool update_picture = 5;
inline void Event_GuildUpdated::clear_update_picture() {
  update_picture_ = false;
}
inline bool Event_GuildUpdated::_internal_update_picture() const {
  return update_picture_;
}
inline bool Event_GuildUpdated::update_picture() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.update_picture)
  return _internal_update_picture();
}
inline void Event_GuildUpdated::_internal_set_update_picture(bool value) {
  
  update_picture_ = value;
}
inline void Event_GuildUpdated::set_update_picture(bool value) {
  _internal_set_update_picture(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.update_picture)
}

// .protocol.harmonytypes.v1.Metadata metadata = 6;
inline bool Event_GuildUpdated::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Event_GuildUpdated::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_GuildUpdated::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& Event_GuildUpdated::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.metadata)
  return _internal_metadata();
}
inline void Event_GuildUpdated::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.GuildUpdated.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* Event_GuildUpdated::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_GuildUpdated::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.GuildUpdated.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_GuildUpdated::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* Event_GuildUpdated::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.GuildUpdated.metadata)
  return _internal_mutable_metadata();
}
inline void Event_GuildUpdated::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.GuildUpdated.metadata)
}

// bool update_metadata = 7;
inline void Event_GuildUpdated::clear_update_metadata() {
  update_metadata_ = false;
}
inline bool Event_GuildUpdated::_internal_update_metadata() const {
  return update_metadata_;
}
inline bool Event_GuildUpdated::update_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildUpdated.update_metadata)
  return _internal_update_metadata();
}
inline void Event_GuildUpdated::_internal_set_update_metadata(bool value) {
  
  update_metadata_ = value;
}
inline void Event_GuildUpdated::set_update_metadata(bool value) {
  _internal_set_update_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildUpdated.update_metadata)
}

// -------------------------------------------------------------------

// Event_GuildDeleted

// uint64 guild_id = 1;
inline void Event_GuildDeleted::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildDeleted::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildDeleted::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildDeleted.guild_id)
  return _internal_guild_id();
}
inline void Event_GuildDeleted::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_GuildDeleted::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildDeleted.guild_id)
}

// -------------------------------------------------------------------

// Event_MemberJoined

// uint64 member_id = 1;
inline void Event_MemberJoined::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberJoined::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberJoined::member_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MemberJoined.member_id)
  return _internal_member_id();
}
inline void Event_MemberJoined::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void Event_MemberJoined::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MemberJoined.member_id)
}

// uint64 guild_id = 2;
inline void Event_MemberJoined::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberJoined::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberJoined::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MemberJoined.guild_id)
  return _internal_guild_id();
}
inline void Event_MemberJoined::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_MemberJoined::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MemberJoined.guild_id)
}

// -------------------------------------------------------------------

// Event_MemberLeft

// uint64 member_id = 1;
inline void Event_MemberLeft::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberLeft::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberLeft::member_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MemberLeft.member_id)
  return _internal_member_id();
}
inline void Event_MemberLeft::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void Event_MemberLeft::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MemberLeft.member_id)
}

// uint64 guild_id = 2;
inline void Event_MemberLeft::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberLeft::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_MemberLeft::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MemberLeft.guild_id)
  return _internal_guild_id();
}
inline void Event_MemberLeft::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_MemberLeft::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MemberLeft.guild_id)
}

// .protocol.chat.v1.Event.LeaveReason leave_reason = 3;
inline void Event_MemberLeft::clear_leave_reason() {
  leave_reason_ = 0;
}
inline ::protocol::chat::v1::Event_LeaveReason Event_MemberLeft::_internal_leave_reason() const {
  return static_cast< ::protocol::chat::v1::Event_LeaveReason >(leave_reason_);
}
inline ::protocol::chat::v1::Event_LeaveReason Event_MemberLeft::leave_reason() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.MemberLeft.leave_reason)
  return _internal_leave_reason();
}
inline void Event_MemberLeft::_internal_set_leave_reason(::protocol::chat::v1::Event_LeaveReason value) {
  
  leave_reason_ = value;
}
inline void Event_MemberLeft::set_leave_reason(::protocol::chat::v1::Event_LeaveReason value) {
  _internal_set_leave_reason(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.MemberLeft.leave_reason)
}

// -------------------------------------------------------------------

// Event_GuildAddedToList

// uint64 guild_id = 1;
inline void Event_GuildAddedToList::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildAddedToList::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildAddedToList::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildAddedToList.guild_id)
  return _internal_guild_id();
}
inline void Event_GuildAddedToList::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_GuildAddedToList::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildAddedToList.guild_id)
}

// string homeserver = 2;
inline void Event_GuildAddedToList::clear_homeserver() {
  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_GuildAddedToList::homeserver() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildAddedToList.homeserver)
  return _internal_homeserver();
}
inline void Event_GuildAddedToList::set_homeserver(const std::string& value) {
  _internal_set_homeserver(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}
inline std::string* Event_GuildAddedToList::mutable_homeserver() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.GuildAddedToList.homeserver)
  return _internal_mutable_homeserver();
}
inline const std::string& Event_GuildAddedToList::_internal_homeserver() const {
  return homeserver_.Get();
}
inline void Event_GuildAddedToList::_internal_set_homeserver(const std::string& value) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_GuildAddedToList::set_homeserver(std::string&& value) {
  
  homeserver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}
inline void Event_GuildAddedToList::set_homeserver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}
inline void Event_GuildAddedToList::set_homeserver(const char* value,
    size_t size) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}
inline std::string* Event_GuildAddedToList::_internal_mutable_homeserver() {
  
  return homeserver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_GuildAddedToList::release_homeserver() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.GuildAddedToList.homeserver)
  return homeserver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_GuildAddedToList::set_allocated_homeserver(std::string* homeserver) {
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeserver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}
inline std::string* Event_GuildAddedToList::unsafe_arena_release_homeserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.GuildAddedToList.homeserver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return homeserver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_GuildAddedToList::unsafe_arena_set_allocated_homeserver(
    std::string* homeserver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homeserver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.GuildAddedToList.homeserver)
}

// -------------------------------------------------------------------

// Event_GuildRemovedFromList

// uint64 guild_id = 1;
inline void Event_GuildRemovedFromList::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildRemovedFromList::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_GuildRemovedFromList::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildRemovedFromList.guild_id)
  return _internal_guild_id();
}
inline void Event_GuildRemovedFromList::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_GuildRemovedFromList::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildRemovedFromList.guild_id)
}

// string homeserver = 2;
inline void Event_GuildRemovedFromList::clear_homeserver() {
  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_GuildRemovedFromList::homeserver() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
  return _internal_homeserver();
}
inline void Event_GuildRemovedFromList::set_homeserver(const std::string& value) {
  _internal_set_homeserver(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}
inline std::string* Event_GuildRemovedFromList::mutable_homeserver() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
  return _internal_mutable_homeserver();
}
inline const std::string& Event_GuildRemovedFromList::_internal_homeserver() const {
  return homeserver_.Get();
}
inline void Event_GuildRemovedFromList::_internal_set_homeserver(const std::string& value) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_GuildRemovedFromList::set_homeserver(std::string&& value) {
  
  homeserver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}
inline void Event_GuildRemovedFromList::set_homeserver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}
inline void Event_GuildRemovedFromList::set_homeserver(const char* value,
    size_t size) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}
inline std::string* Event_GuildRemovedFromList::_internal_mutable_homeserver() {
  
  return homeserver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_GuildRemovedFromList::release_homeserver() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
  return homeserver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_GuildRemovedFromList::set_allocated_homeserver(std::string* homeserver) {
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeserver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}
inline std::string* Event_GuildRemovedFromList::unsafe_arena_release_homeserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return homeserver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_GuildRemovedFromList::unsafe_arena_set_allocated_homeserver(
    std::string* homeserver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homeserver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.GuildRemovedFromList.homeserver)
}

// -------------------------------------------------------------------

// Event_ActionPerformed

// uint64 guild_id = 1;
inline void Event_ActionPerformed::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ActionPerformed.guild_id)
  return _internal_guild_id();
}
inline void Event_ActionPerformed::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_ActionPerformed::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ActionPerformed.guild_id)
}

// uint64 channel_id = 2;
inline void Event_ActionPerformed::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ActionPerformed.channel_id)
  return _internal_channel_id();
}
inline void Event_ActionPerformed::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_ActionPerformed::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ActionPerformed.channel_id)
}

// uint64 message_id = 3;
inline void Event_ActionPerformed::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ActionPerformed::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ActionPerformed.message_id)
  return _internal_message_id();
}
inline void Event_ActionPerformed::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void Event_ActionPerformed::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ActionPerformed.message_id)
}

// string action_id = 4;
inline void Event_ActionPerformed::clear_action_id() {
  action_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ActionPerformed::action_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ActionPerformed.action_id)
  return _internal_action_id();
}
inline void Event_ActionPerformed::set_action_id(const std::string& value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ActionPerformed.action_id)
}
inline std::string* Event_ActionPerformed::mutable_action_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ActionPerformed.action_id)
  return _internal_mutable_action_id();
}
inline const std::string& Event_ActionPerformed::_internal_action_id() const {
  return action_id_.Get();
}
inline void Event_ActionPerformed::_internal_set_action_id(const std::string& value) {
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ActionPerformed::set_action_id(std::string&& value) {
  
  action_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ActionPerformed.action_id)
}
inline void Event_ActionPerformed::set_action_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ActionPerformed.action_id)
}
inline void Event_ActionPerformed::set_action_id(const char* value,
    size_t size) {
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ActionPerformed.action_id)
}
inline std::string* Event_ActionPerformed::_internal_mutable_action_id() {
  
  return action_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ActionPerformed::release_action_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ActionPerformed.action_id)
  return action_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ActionPerformed::set_allocated_action_id(std::string* action_id) {
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ActionPerformed.action_id)
}
inline std::string* Event_ActionPerformed::unsafe_arena_release_action_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ActionPerformed.action_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ActionPerformed::unsafe_arena_set_allocated_action_id(
    std::string* action_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ActionPerformed.action_id)
}

// string action_data = 5;
inline void Event_ActionPerformed::clear_action_data() {
  action_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ActionPerformed::action_data() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ActionPerformed.action_data)
  return _internal_action_data();
}
inline void Event_ActionPerformed::set_action_data(const std::string& value) {
  _internal_set_action_data(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ActionPerformed.action_data)
}
inline std::string* Event_ActionPerformed::mutable_action_data() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ActionPerformed.action_data)
  return _internal_mutable_action_data();
}
inline const std::string& Event_ActionPerformed::_internal_action_data() const {
  return action_data_.Get();
}
inline void Event_ActionPerformed::_internal_set_action_data(const std::string& value) {
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ActionPerformed::set_action_data(std::string&& value) {
  
  action_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ActionPerformed.action_data)
}
inline void Event_ActionPerformed::set_action_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ActionPerformed.action_data)
}
inline void Event_ActionPerformed::set_action_data(const char* value,
    size_t size) {
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ActionPerformed.action_data)
}
inline std::string* Event_ActionPerformed::_internal_mutable_action_data() {
  
  return action_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ActionPerformed::release_action_data() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ActionPerformed.action_data)
  return action_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ActionPerformed::set_allocated_action_data(std::string* action_data) {
  if (action_data != nullptr) {
    
  } else {
    
  }
  action_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ActionPerformed.action_data)
}
inline std::string* Event_ActionPerformed::unsafe_arena_release_action_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ActionPerformed.action_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ActionPerformed::unsafe_arena_set_allocated_action_data(
    std::string* action_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_data != nullptr) {
    
  } else {
    
  }
  action_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ActionPerformed.action_data)
}

// -------------------------------------------------------------------

// Event_RoleMoved

// uint64 guild_id = 1;
inline void Event_RoleMoved::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleMoved.guild_id)
  return _internal_guild_id();
}
inline void Event_RoleMoved::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_RoleMoved::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleMoved.guild_id)
}

// uint64 role_id = 2;
inline void Event_RoleMoved::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleMoved.role_id)
  return _internal_role_id();
}
inline void Event_RoleMoved::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Event_RoleMoved::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleMoved.role_id)
}

// uint64 previous_id = 3;
inline void Event_RoleMoved::clear_previous_id() {
  previous_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::_internal_previous_id() const {
  return previous_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::previous_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleMoved.previous_id)
  return _internal_previous_id();
}
inline void Event_RoleMoved::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  previous_id_ = value;
}
inline void Event_RoleMoved::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleMoved.previous_id)
}

// uint64 next_id = 4;
inline void Event_RoleMoved::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleMoved::next_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleMoved.next_id)
  return _internal_next_id();
}
inline void Event_RoleMoved::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void Event_RoleMoved::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleMoved.next_id)
}

// -------------------------------------------------------------------

// Event_RoleDeleted

// uint64 guild_id = 1;
inline void Event_RoleDeleted::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleDeleted::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleDeleted::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleDeleted.guild_id)
  return _internal_guild_id();
}
inline void Event_RoleDeleted::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_RoleDeleted::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleDeleted.guild_id)
}

// uint64 role_id = 2;
inline void Event_RoleDeleted::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleDeleted::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleDeleted::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleDeleted.role_id)
  return _internal_role_id();
}
inline void Event_RoleDeleted::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Event_RoleDeleted::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleDeleted.role_id)
}

// -------------------------------------------------------------------

// Event_RoleCreated

// uint64 guild_id = 1;
inline void Event_RoleCreated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleCreated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleCreated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleCreated.guild_id)
  return _internal_guild_id();
}
inline void Event_RoleCreated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_RoleCreated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleCreated.guild_id)
}

// uint64 role_id = 2;
inline void Event_RoleCreated::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleCreated::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleCreated::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleCreated.role_id)
  return _internal_role_id();
}
inline void Event_RoleCreated::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Event_RoleCreated::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleCreated.role_id)
}

// .protocol.chat.v1.Role role = 3;
inline bool Event_RoleCreated::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool Event_RoleCreated::has_role() const {
  return _internal_has_role();
}
inline const ::protocol::chat::v1::Role& Event_RoleCreated::_internal_role() const {
  const ::protocol::chat::v1::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::Role*>(
      &::protocol::chat::v1::_Role_default_instance_);
}
inline const ::protocol::chat::v1::Role& Event_RoleCreated::role() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleCreated.role)
  return _internal_role();
}
inline void Event_RoleCreated::unsafe_arena_set_allocated_role(
    ::protocol::chat::v1::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.RoleCreated.role)
}
inline ::protocol::chat::v1::Role* Event_RoleCreated::release_role() {
  auto temp = unsafe_arena_release_role();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::Role* Event_RoleCreated::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.RoleCreated.role)
  
  ::protocol::chat::v1::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::Role* Event_RoleCreated::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::protocol::chat::v1::Role* Event_RoleCreated::mutable_role() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.RoleCreated.role)
  return _internal_mutable_role();
}
inline void Event_RoleCreated::set_allocated_role(::protocol::chat::v1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role)->GetArena();
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.RoleCreated.role)
}

// -------------------------------------------------------------------

// Event_RoleUpdated

// uint64 guild_id = 1;
inline void Event_RoleUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_RoleUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_RoleUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleUpdated.guild_id)
}

// uint64 role_id = 3;
inline void Event_RoleUpdated::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleUpdated::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RoleUpdated::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleUpdated.role_id)
  return _internal_role_id();
}
inline void Event_RoleUpdated::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Event_RoleUpdated::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RoleUpdated.role_id)
}

// .protocol.chat.v1.Role role = 4;
inline bool Event_RoleUpdated::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool Event_RoleUpdated::has_role() const {
  return _internal_has_role();
}
inline const ::protocol::chat::v1::Role& Event_RoleUpdated::_internal_role() const {
  const ::protocol::chat::v1::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::Role*>(
      &::protocol::chat::v1::_Role_default_instance_);
}
inline const ::protocol::chat::v1::Role& Event_RoleUpdated::role() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RoleUpdated.role)
  return _internal_role();
}
inline void Event_RoleUpdated::unsafe_arena_set_allocated_role(
    ::protocol::chat::v1::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.RoleUpdated.role)
}
inline ::protocol::chat::v1::Role* Event_RoleUpdated::release_role() {
  auto temp = unsafe_arena_release_role();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::Role* Event_RoleUpdated::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.RoleUpdated.role)
  
  ::protocol::chat::v1::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::Role* Event_RoleUpdated::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::protocol::chat::v1::Role* Event_RoleUpdated::mutable_role() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.RoleUpdated.role)
  return _internal_mutable_role();
}
inline void Event_RoleUpdated::set_allocated_role(::protocol::chat::v1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role)->GetArena();
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.RoleUpdated.role)
}

// -------------------------------------------------------------------

// Event_RolePermissionsUpdated

// uint64 guild_id = 1;
inline void Event_RolePermissionsUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RolePermissionsUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_RolePermissionsUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_RolePermissionsUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RolePermissionsUpdated.guild_id)
}

// uint64 channel_id = 2;
inline void Event_RolePermissionsUpdated::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RolePermissionsUpdated.channel_id)
  return _internal_channel_id();
}
inline void Event_RolePermissionsUpdated::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_RolePermissionsUpdated::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RolePermissionsUpdated.channel_id)
}

// uint64 role_id = 3;
inline void Event_RolePermissionsUpdated::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_RolePermissionsUpdated::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RolePermissionsUpdated.role_id)
  return _internal_role_id();
}
inline void Event_RolePermissionsUpdated::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Event_RolePermissionsUpdated::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.RolePermissionsUpdated.role_id)
}

// .protocol.chat.v1.PermissionList perms = 4;
inline bool Event_RolePermissionsUpdated::_internal_has_perms() const {
  return this != internal_default_instance() && perms_ != nullptr;
}
inline bool Event_RolePermissionsUpdated::has_perms() const {
  return _internal_has_perms();
}
inline const ::protocol::chat::v1::PermissionList& Event_RolePermissionsUpdated::_internal_perms() const {
  const ::protocol::chat::v1::PermissionList* p = perms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::PermissionList*>(
      &::protocol::chat::v1::_PermissionList_default_instance_);
}
inline const ::protocol::chat::v1::PermissionList& Event_RolePermissionsUpdated::perms() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.RolePermissionsUpdated.perms)
  return _internal_perms();
}
inline void Event_RolePermissionsUpdated::unsafe_arena_set_allocated_perms(
    ::protocol::chat::v1::PermissionList* perms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perms_);
  }
  perms_ = perms;
  if (perms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.RolePermissionsUpdated.perms)
}
inline ::protocol::chat::v1::PermissionList* Event_RolePermissionsUpdated::release_perms() {
  auto temp = unsafe_arena_release_perms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::PermissionList* Event_RolePermissionsUpdated::unsafe_arena_release_perms() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.RolePermissionsUpdated.perms)
  
  ::protocol::chat::v1::PermissionList* temp = perms_;
  perms_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::PermissionList* Event_RolePermissionsUpdated::_internal_mutable_perms() {
  
  if (perms_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::PermissionList>(GetArena());
    perms_ = p;
  }
  return perms_;
}
inline ::protocol::chat::v1::PermissionList* Event_RolePermissionsUpdated::mutable_perms() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.RolePermissionsUpdated.perms)
  return _internal_mutable_perms();
}
inline void Event_RolePermissionsUpdated::set_allocated_perms(::protocol::chat::v1::PermissionList* perms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perms_);
  }
  if (perms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perms)->GetArena();
    if (message_arena != submessage_arena) {
      perms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perms, submessage_arena);
    }
    
  } else {
    
  }
  perms_ = perms;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.RolePermissionsUpdated.perms)
}

// -------------------------------------------------------------------

// Event_UserRolesUpdated

// uint64 guild_id = 1;
inline void Event_UserRolesUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.UserRolesUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_UserRolesUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_UserRolesUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.UserRolesUpdated.guild_id)
}

// uint64 user_id = 2;
inline void Event_UserRolesUpdated::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.UserRolesUpdated.user_id)
  return _internal_user_id();
}
inline void Event_UserRolesUpdated::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Event_UserRolesUpdated::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.UserRolesUpdated.user_id)
}

// repeated uint64 role_ids = 3;
inline int Event_UserRolesUpdated::_internal_role_ids_size() const {
  return role_ids_.size();
}
inline int Event_UserRolesUpdated::role_ids_size() const {
  return _internal_role_ids_size();
}
inline void Event_UserRolesUpdated::clear_role_ids() {
  role_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::_internal_role_ids(int index) const {
  return role_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRolesUpdated::role_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.UserRolesUpdated.role_ids)
  return _internal_role_ids(index);
}
inline void Event_UserRolesUpdated::set_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  role_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.UserRolesUpdated.role_ids)
}
inline void Event_UserRolesUpdated::_internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  role_ids_.Add(value);
}
inline void Event_UserRolesUpdated::add_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_role_ids(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.Event.UserRolesUpdated.role_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Event_UserRolesUpdated::_internal_role_ids() const {
  return role_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Event_UserRolesUpdated::role_ids() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.Event.UserRolesUpdated.role_ids)
  return _internal_role_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Event_UserRolesUpdated::_internal_mutable_role_ids() {
  return &role_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Event_UserRolesUpdated::mutable_role_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.Event.UserRolesUpdated.role_ids)
  return _internal_mutable_role_ids();
}

// -------------------------------------------------------------------

// Event_ProfileUpdated

// uint64 user_id = 1;
inline void Event_ProfileUpdated::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ProfileUpdated::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_ProfileUpdated::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.user_id)
  return _internal_user_id();
}
inline void Event_ProfileUpdated::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Event_ProfileUpdated::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.user_id)
}

// string new_username = 2;
inline void Event_ProfileUpdated::clear_new_username() {
  new_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ProfileUpdated::new_username() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.new_username)
  return _internal_new_username();
}
inline void Event_ProfileUpdated::set_new_username(const std::string& value) {
  _internal_set_new_username(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.new_username)
}
inline std::string* Event_ProfileUpdated::mutable_new_username() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ProfileUpdated.new_username)
  return _internal_mutable_new_username();
}
inline const std::string& Event_ProfileUpdated::_internal_new_username() const {
  return new_username_.Get();
}
inline void Event_ProfileUpdated::_internal_set_new_username(const std::string& value) {
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ProfileUpdated::set_new_username(std::string&& value) {
  
  new_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ProfileUpdated.new_username)
}
inline void Event_ProfileUpdated::set_new_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ProfileUpdated.new_username)
}
inline void Event_ProfileUpdated::set_new_username(const char* value,
    size_t size) {
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ProfileUpdated.new_username)
}
inline std::string* Event_ProfileUpdated::_internal_mutable_new_username() {
  
  return new_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ProfileUpdated::release_new_username() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ProfileUpdated.new_username)
  return new_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ProfileUpdated::set_allocated_new_username(std::string* new_username) {
  if (new_username != nullptr) {
    
  } else {
    
  }
  new_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ProfileUpdated.new_username)
}
inline std::string* Event_ProfileUpdated::unsafe_arena_release_new_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ProfileUpdated.new_username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ProfileUpdated::unsafe_arena_set_allocated_new_username(
    std::string* new_username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_username != nullptr) {
    
  } else {
    
  }
  new_username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ProfileUpdated.new_username)
}

// bool update_username = 3;
inline void Event_ProfileUpdated::clear_update_username() {
  update_username_ = false;
}
inline bool Event_ProfileUpdated::_internal_update_username() const {
  return update_username_;
}
inline bool Event_ProfileUpdated::update_username() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.update_username)
  return _internal_update_username();
}
inline void Event_ProfileUpdated::_internal_set_update_username(bool value) {
  
  update_username_ = value;
}
inline void Event_ProfileUpdated::set_update_username(bool value) {
  _internal_set_update_username(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.update_username)
}

// string new_avatar = 4;
inline void Event_ProfileUpdated::clear_new_avatar() {
  new_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_ProfileUpdated::new_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
  return _internal_new_avatar();
}
inline void Event_ProfileUpdated::set_new_avatar(const std::string& value) {
  _internal_set_new_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}
inline std::string* Event_ProfileUpdated::mutable_new_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
  return _internal_mutable_new_avatar();
}
inline const std::string& Event_ProfileUpdated::_internal_new_avatar() const {
  return new_avatar_.Get();
}
inline void Event_ProfileUpdated::_internal_set_new_avatar(const std::string& value) {
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_ProfileUpdated::set_new_avatar(std::string&& value) {
  
  new_avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}
inline void Event_ProfileUpdated::set_new_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}
inline void Event_ProfileUpdated::set_new_avatar(const char* value,
    size_t size) {
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}
inline std::string* Event_ProfileUpdated::_internal_mutable_new_avatar() {
  
  return new_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_ProfileUpdated::release_new_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
  return new_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_ProfileUpdated::set_allocated_new_avatar(std::string* new_avatar) {
  if (new_avatar != nullptr) {
    
  } else {
    
  }
  new_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}
inline std::string* Event_ProfileUpdated::unsafe_arena_release_new_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_ProfileUpdated::unsafe_arena_set_allocated_new_avatar(
    std::string* new_avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_avatar != nullptr) {
    
  } else {
    
  }
  new_avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.ProfileUpdated.new_avatar)
}

// bool update_avatar = 5;
inline void Event_ProfileUpdated::clear_update_avatar() {
  update_avatar_ = false;
}
inline bool Event_ProfileUpdated::_internal_update_avatar() const {
  return update_avatar_;
}
inline bool Event_ProfileUpdated::update_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.update_avatar)
  return _internal_update_avatar();
}
inline void Event_ProfileUpdated::_internal_set_update_avatar(bool value) {
  
  update_avatar_ = value;
}
inline void Event_ProfileUpdated::set_update_avatar(bool value) {
  _internal_set_update_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.update_avatar)
}

// .protocol.harmonytypes.v1.UserStatus new_status = 6;
inline void Event_ProfileUpdated::clear_new_status() {
  new_status_ = 0;
}
inline ::protocol::harmonytypes::v1::UserStatus Event_ProfileUpdated::_internal_new_status() const {
  return static_cast< ::protocol::harmonytypes::v1::UserStatus >(new_status_);
}
inline ::protocol::harmonytypes::v1::UserStatus Event_ProfileUpdated::new_status() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.new_status)
  return _internal_new_status();
}
inline void Event_ProfileUpdated::_internal_set_new_status(::protocol::harmonytypes::v1::UserStatus value) {
  
  new_status_ = value;
}
inline void Event_ProfileUpdated::set_new_status(::protocol::harmonytypes::v1::UserStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.new_status)
}

// bool update_status = 7;
inline void Event_ProfileUpdated::clear_update_status() {
  update_status_ = false;
}
inline bool Event_ProfileUpdated::_internal_update_status() const {
  return update_status_;
}
inline bool Event_ProfileUpdated::update_status() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.update_status)
  return _internal_update_status();
}
inline void Event_ProfileUpdated::_internal_set_update_status(bool value) {
  
  update_status_ = value;
}
inline void Event_ProfileUpdated::set_update_status(bool value) {
  _internal_set_update_status(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.update_status)
}

// bool is_bot = 8;
inline void Event_ProfileUpdated::clear_is_bot() {
  is_bot_ = false;
}
inline bool Event_ProfileUpdated::_internal_is_bot() const {
  return is_bot_;
}
inline bool Event_ProfileUpdated::is_bot() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.is_bot)
  return _internal_is_bot();
}
inline void Event_ProfileUpdated::_internal_set_is_bot(bool value) {
  
  is_bot_ = value;
}
inline void Event_ProfileUpdated::set_is_bot(bool value) {
  _internal_set_is_bot(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.is_bot)
}

// bool update_is_bot = 9;
inline void Event_ProfileUpdated::clear_update_is_bot() {
  update_is_bot_ = false;
}
inline bool Event_ProfileUpdated::_internal_update_is_bot() const {
  return update_is_bot_;
}
inline bool Event_ProfileUpdated::update_is_bot() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.ProfileUpdated.update_is_bot)
  return _internal_update_is_bot();
}
inline void Event_ProfileUpdated::_internal_set_update_is_bot(bool value) {
  
  update_is_bot_ = value;
}
inline void Event_ProfileUpdated::set_update_is_bot(bool value) {
  _internal_set_update_is_bot(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.ProfileUpdated.update_is_bot)
}

// -------------------------------------------------------------------

// Event_Typing

// uint64 user_id = 1;
inline void Event_Typing::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.Typing.user_id)
  return _internal_user_id();
}
inline void Event_Typing::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Event_Typing::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.Typing.user_id)
}

// uint64 guild_id = 2;
inline void Event_Typing::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.Typing.guild_id)
  return _internal_guild_id();
}
inline void Event_Typing::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_Typing::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.Typing.guild_id)
}

// uint64 channel_id = 3;
inline void Event_Typing::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_Typing::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.Typing.channel_id)
  return _internal_channel_id();
}
inline void Event_Typing::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_Typing::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.Typing.channel_id)
}

// -------------------------------------------------------------------

// Event_PermissionUpdated

// uint64 guild_id = 1;
inline void Event_PermissionUpdated::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_PermissionUpdated::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_PermissionUpdated::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.PermissionUpdated.guild_id)
  return _internal_guild_id();
}
inline void Event_PermissionUpdated::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_PermissionUpdated::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.PermissionUpdated.guild_id)
}

// uint64 channel_id = 2;
inline void Event_PermissionUpdated::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_PermissionUpdated::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_PermissionUpdated::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.PermissionUpdated.channel_id)
  return _internal_channel_id();
}
inline void Event_PermissionUpdated::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Event_PermissionUpdated::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.PermissionUpdated.channel_id)
}

// string query = 3;
inline void Event_PermissionUpdated::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_PermissionUpdated::query() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.PermissionUpdated.query)
  return _internal_query();
}
inline void Event_PermissionUpdated::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.PermissionUpdated.query)
}
inline std::string* Event_PermissionUpdated::mutable_query() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.PermissionUpdated.query)
  return _internal_mutable_query();
}
inline const std::string& Event_PermissionUpdated::_internal_query() const {
  return query_.Get();
}
inline void Event_PermissionUpdated::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_PermissionUpdated::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.PermissionUpdated.query)
}
inline void Event_PermissionUpdated::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.PermissionUpdated.query)
}
inline void Event_PermissionUpdated::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.PermissionUpdated.query)
}
inline std::string* Event_PermissionUpdated::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_PermissionUpdated::release_query() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.PermissionUpdated.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_PermissionUpdated::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.PermissionUpdated.query)
}
inline std::string* Event_PermissionUpdated::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.PermissionUpdated.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_PermissionUpdated::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    
  } else {
    
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.PermissionUpdated.query)
}

// bool ok = 4;
inline void Event_PermissionUpdated::clear_ok() {
  ok_ = false;
}
inline bool Event_PermissionUpdated::_internal_ok() const {
  return ok_;
}
inline bool Event_PermissionUpdated::ok() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.PermissionUpdated.ok)
  return _internal_ok();
}
inline void Event_PermissionUpdated::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void Event_PermissionUpdated::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.PermissionUpdated.ok)
}

// -------------------------------------------------------------------

// Event_EmotePackUpdated

// uint64 pack_id = 1;
inline void Event_EmotePackUpdated::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackUpdated::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackUpdated::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackUpdated.pack_id)
  return _internal_pack_id();
}
inline void Event_EmotePackUpdated::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void Event_EmotePackUpdated::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackUpdated.pack_id)
}

// string pack_name = 2;
inline void Event_EmotePackUpdated::clear_pack_name() {
  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Event_EmotePackUpdated::pack_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
  return _internal_pack_name();
}
inline void Event_EmotePackUpdated::set_pack_name(const std::string& value) {
  _internal_set_pack_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}
inline std::string* Event_EmotePackUpdated::mutable_pack_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
  return _internal_mutable_pack_name();
}
inline const std::string& Event_EmotePackUpdated::_internal_pack_name() const {
  return pack_name_.Get();
}
inline void Event_EmotePackUpdated::_internal_set_pack_name(const std::string& value) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event_EmotePackUpdated::set_pack_name(std::string&& value) {
  
  pack_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}
inline void Event_EmotePackUpdated::set_pack_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}
inline void Event_EmotePackUpdated::set_pack_name(const char* value,
    size_t size) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}
inline std::string* Event_EmotePackUpdated::_internal_mutable_pack_name() {
  
  return pack_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event_EmotePackUpdated::release_pack_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
  return pack_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Event_EmotePackUpdated::set_allocated_pack_name(std::string* pack_name) {
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pack_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}
inline std::string* Event_EmotePackUpdated::unsafe_arena_release_pack_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pack_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Event_EmotePackUpdated::unsafe_arena_set_allocated_pack_name(
    std::string* pack_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pack_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.EmotePackUpdated.pack_name)
}

// bool update_pack_name = 3;
inline void Event_EmotePackUpdated::clear_update_pack_name() {
  update_pack_name_ = false;
}
inline bool Event_EmotePackUpdated::_internal_update_pack_name() const {
  return update_pack_name_;
}
inline bool Event_EmotePackUpdated::update_pack_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackUpdated.update_pack_name)
  return _internal_update_pack_name();
}
inline void Event_EmotePackUpdated::_internal_set_update_pack_name(bool value) {
  
  update_pack_name_ = value;
}
inline void Event_EmotePackUpdated::set_update_pack_name(bool value) {
  _internal_set_update_pack_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackUpdated.update_pack_name)
}

// -------------------------------------------------------------------

// Event_EmotePackDeleted

// uint64 pack_id = 1;
inline void Event_EmotePackDeleted::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackDeleted::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackDeleted::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackDeleted.pack_id)
  return _internal_pack_id();
}
inline void Event_EmotePackDeleted::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void Event_EmotePackDeleted::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackDeleted.pack_id)
}

// -------------------------------------------------------------------

// Event_EmotePackAdded

// .protocol.chat.v1.EmotePack pack = 1;
inline bool Event_EmotePackAdded::_internal_has_pack() const {
  return this != internal_default_instance() && pack_ != nullptr;
}
inline bool Event_EmotePackAdded::has_pack() const {
  return _internal_has_pack();
}
inline const ::protocol::chat::v1::EmotePack& Event_EmotePackAdded::_internal_pack() const {
  const ::protocol::chat::v1::EmotePack* p = pack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::EmotePack*>(
      &::protocol::chat::v1::_EmotePack_default_instance_);
}
inline const ::protocol::chat::v1::EmotePack& Event_EmotePackAdded::pack() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackAdded.pack)
  return _internal_pack();
}
inline void Event_EmotePackAdded::unsafe_arena_set_allocated_pack(
    ::protocol::chat::v1::EmotePack* pack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pack_);
  }
  pack_ = pack;
  if (pack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.EmotePackAdded.pack)
}
inline ::protocol::chat::v1::EmotePack* Event_EmotePackAdded::release_pack() {
  auto temp = unsafe_arena_release_pack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::EmotePack* Event_EmotePackAdded::unsafe_arena_release_pack() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.EmotePackAdded.pack)
  
  ::protocol::chat::v1::EmotePack* temp = pack_;
  pack_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::EmotePack* Event_EmotePackAdded::_internal_mutable_pack() {
  
  if (pack_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::EmotePack>(GetArena());
    pack_ = p;
  }
  return pack_;
}
inline ::protocol::chat::v1::EmotePack* Event_EmotePackAdded::mutable_pack() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.EmotePackAdded.pack)
  return _internal_mutable_pack();
}
inline void Event_EmotePackAdded::set_allocated_pack(::protocol::chat::v1::EmotePack* pack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pack_);
  }
  if (pack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pack)->GetArena();
    if (message_arena != submessage_arena) {
      pack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pack, submessage_arena);
    }
    
  } else {
    
  }
  pack_ = pack;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.EmotePackAdded.pack)
}

// -------------------------------------------------------------------

// Event_EmotePackEmotesUpdated

// uint64 pack_id = 1;
inline void Event_EmotePackEmotesUpdated::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackEmotesUpdated::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_EmotePackEmotesUpdated::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackEmotesUpdated.pack_id)
  return _internal_pack_id();
}
inline void Event_EmotePackEmotesUpdated::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void Event_EmotePackEmotesUpdated::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackEmotesUpdated.pack_id)
}

// repeated .protocol.chat.v1.Emote added_emotes = 2;
inline int Event_EmotePackEmotesUpdated::_internal_added_emotes_size() const {
  return added_emotes_.size();
}
inline int Event_EmotePackEmotesUpdated::added_emotes_size() const {
  return _internal_added_emotes_size();
}
inline ::protocol::chat::v1::Emote* Event_EmotePackEmotesUpdated::mutable_added_emotes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.EmotePackEmotesUpdated.added_emotes)
  return added_emotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Emote >*
Event_EmotePackEmotesUpdated::mutable_added_emotes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.Event.EmotePackEmotesUpdated.added_emotes)
  return &added_emotes_;
}
inline const ::protocol::chat::v1::Emote& Event_EmotePackEmotesUpdated::_internal_added_emotes(int index) const {
  return added_emotes_.Get(index);
}
inline const ::protocol::chat::v1::Emote& Event_EmotePackEmotesUpdated::added_emotes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackEmotesUpdated.added_emotes)
  return _internal_added_emotes(index);
}
inline ::protocol::chat::v1::Emote* Event_EmotePackEmotesUpdated::_internal_add_added_emotes() {
  return added_emotes_.Add();
}
inline ::protocol::chat::v1::Emote* Event_EmotePackEmotesUpdated::add_added_emotes() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.Event.EmotePackEmotesUpdated.added_emotes)
  return _internal_add_added_emotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Emote >&
Event_EmotePackEmotesUpdated::added_emotes() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.Event.EmotePackEmotesUpdated.added_emotes)
  return added_emotes_;
}

// repeated string deleted_emotes = 3;
inline int Event_EmotePackEmotesUpdated::_internal_deleted_emotes_size() const {
  return deleted_emotes_.size();
}
inline int Event_EmotePackEmotesUpdated::deleted_emotes_size() const {
  return _internal_deleted_emotes_size();
}
inline void Event_EmotePackEmotesUpdated::clear_deleted_emotes() {
  deleted_emotes_.Clear();
}
inline std::string* Event_EmotePackEmotesUpdated::add_deleted_emotes() {
  // @@protoc_insertion_point(field_add_mutable:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  return _internal_add_deleted_emotes();
}
inline const std::string& Event_EmotePackEmotesUpdated::_internal_deleted_emotes(int index) const {
  return deleted_emotes_.Get(index);
}
inline const std::string& Event_EmotePackEmotesUpdated::deleted_emotes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  return _internal_deleted_emotes(index);
}
inline std::string* Event_EmotePackEmotesUpdated::mutable_deleted_emotes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  return deleted_emotes_.Mutable(index);
}
inline void Event_EmotePackEmotesUpdated::set_deleted_emotes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  deleted_emotes_.Mutable(index)->assign(value);
}
inline void Event_EmotePackEmotesUpdated::set_deleted_emotes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  deleted_emotes_.Mutable(index)->assign(std::move(value));
}
inline void Event_EmotePackEmotesUpdated::set_deleted_emotes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_emotes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline void Event_EmotePackEmotesUpdated::set_deleted_emotes(int index, const char* value, size_t size) {
  deleted_emotes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline std::string* Event_EmotePackEmotesUpdated::_internal_add_deleted_emotes() {
  return deleted_emotes_.Add();
}
inline void Event_EmotePackEmotesUpdated::add_deleted_emotes(const std::string& value) {
  deleted_emotes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline void Event_EmotePackEmotesUpdated::add_deleted_emotes(std::string&& value) {
  deleted_emotes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline void Event_EmotePackEmotesUpdated::add_deleted_emotes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_emotes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline void Event_EmotePackEmotesUpdated::add_deleted_emotes(const char* value, size_t size) {
  deleted_emotes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Event_EmotePackEmotesUpdated::deleted_emotes() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  return deleted_emotes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Event_EmotePackEmotesUpdated::mutable_deleted_emotes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes)
  return &deleted_emotes_;
}

// -------------------------------------------------------------------

// Event

// .protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
inline bool Event::_internal_has_guild_added_to_list() const {
  return event_case() == kGuildAddedToList;
}
inline bool Event::has_guild_added_to_list() const {
  return _internal_has_guild_added_to_list();
}
inline void Event::set_has_guild_added_to_list() {
  _oneof_case_[0] = kGuildAddedToList;
}
inline void Event::clear_guild_added_to_list() {
  if (_internal_has_guild_added_to_list()) {
    if (GetArena() == nullptr) {
      delete event_.guild_added_to_list_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_GuildAddedToList* Event::release_guild_added_to_list() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.guild_added_to_list)
  if (_internal_has_guild_added_to_list()) {
    clear_has_event();
      ::protocol::chat::v1::Event_GuildAddedToList* temp = event_.guild_added_to_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.guild_added_to_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_GuildAddedToList& Event::_internal_guild_added_to_list() const {
  return _internal_has_guild_added_to_list()
      ? *event_.guild_added_to_list_
      : *reinterpret_cast< ::protocol::chat::v1::Event_GuildAddedToList*>(&::protocol::chat::v1::_Event_GuildAddedToList_default_instance_);
}
inline const ::protocol::chat::v1::Event_GuildAddedToList& Event::guild_added_to_list() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.guild_added_to_list)
  return _internal_guild_added_to_list();
}
inline ::protocol::chat::v1::Event_GuildAddedToList* Event::unsafe_arena_release_guild_added_to_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.guild_added_to_list)
  if (_internal_has_guild_added_to_list()) {
    clear_has_event();
    ::protocol::chat::v1::Event_GuildAddedToList* temp = event_.guild_added_to_list_;
    event_.guild_added_to_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_guild_added_to_list(::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list) {
  clear_event();
  if (guild_added_to_list) {
    set_has_guild_added_to_list();
    event_.guild_added_to_list_ = guild_added_to_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.guild_added_to_list)
}
inline ::protocol::chat::v1::Event_GuildAddedToList* Event::_internal_mutable_guild_added_to_list() {
  if (!_internal_has_guild_added_to_list()) {
    clear_event();
    set_has_guild_added_to_list();
    event_.guild_added_to_list_ = CreateMaybeMessage< ::protocol::chat::v1::Event_GuildAddedToList >(GetArena());
  }
  return event_.guild_added_to_list_;
}
inline ::protocol::chat::v1::Event_GuildAddedToList* Event::mutable_guild_added_to_list() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.guild_added_to_list)
  return _internal_mutable_guild_added_to_list();
}

// .protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
inline bool Event::_internal_has_guild_removed_from_list() const {
  return event_case() == kGuildRemovedFromList;
}
inline bool Event::has_guild_removed_from_list() const {
  return _internal_has_guild_removed_from_list();
}
inline void Event::set_has_guild_removed_from_list() {
  _oneof_case_[0] = kGuildRemovedFromList;
}
inline void Event::clear_guild_removed_from_list() {
  if (_internal_has_guild_removed_from_list()) {
    if (GetArena() == nullptr) {
      delete event_.guild_removed_from_list_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_GuildRemovedFromList* Event::release_guild_removed_from_list() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.guild_removed_from_list)
  if (_internal_has_guild_removed_from_list()) {
    clear_has_event();
      ::protocol::chat::v1::Event_GuildRemovedFromList* temp = event_.guild_removed_from_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.guild_removed_from_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_GuildRemovedFromList& Event::_internal_guild_removed_from_list() const {
  return _internal_has_guild_removed_from_list()
      ? *event_.guild_removed_from_list_
      : *reinterpret_cast< ::protocol::chat::v1::Event_GuildRemovedFromList*>(&::protocol::chat::v1::_Event_GuildRemovedFromList_default_instance_);
}
inline const ::protocol::chat::v1::Event_GuildRemovedFromList& Event::guild_removed_from_list() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.guild_removed_from_list)
  return _internal_guild_removed_from_list();
}
inline ::protocol::chat::v1::Event_GuildRemovedFromList* Event::unsafe_arena_release_guild_removed_from_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.guild_removed_from_list)
  if (_internal_has_guild_removed_from_list()) {
    clear_has_event();
    ::protocol::chat::v1::Event_GuildRemovedFromList* temp = event_.guild_removed_from_list_;
    event_.guild_removed_from_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_guild_removed_from_list(::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list) {
  clear_event();
  if (guild_removed_from_list) {
    set_has_guild_removed_from_list();
    event_.guild_removed_from_list_ = guild_removed_from_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.guild_removed_from_list)
}
inline ::protocol::chat::v1::Event_GuildRemovedFromList* Event::_internal_mutable_guild_removed_from_list() {
  if (!_internal_has_guild_removed_from_list()) {
    clear_event();
    set_has_guild_removed_from_list();
    event_.guild_removed_from_list_ = CreateMaybeMessage< ::protocol::chat::v1::Event_GuildRemovedFromList >(GetArena());
  }
  return event_.guild_removed_from_list_;
}
inline ::protocol::chat::v1::Event_GuildRemovedFromList* Event::mutable_guild_removed_from_list() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.guild_removed_from_list)
  return _internal_mutable_guild_removed_from_list();
}

// .protocol.chat.v1.Event.ActionPerformed action_performed = 3;
inline bool Event::_internal_has_action_performed() const {
  return event_case() == kActionPerformed;
}
inline bool Event::has_action_performed() const {
  return _internal_has_action_performed();
}
inline void Event::set_has_action_performed() {
  _oneof_case_[0] = kActionPerformed;
}
inline void Event::clear_action_performed() {
  if (_internal_has_action_performed()) {
    if (GetArena() == nullptr) {
      delete event_.action_performed_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ActionPerformed* Event::release_action_performed() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.action_performed)
  if (_internal_has_action_performed()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ActionPerformed* temp = event_.action_performed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.action_performed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ActionPerformed& Event::_internal_action_performed() const {
  return _internal_has_action_performed()
      ? *event_.action_performed_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ActionPerformed*>(&::protocol::chat::v1::_Event_ActionPerformed_default_instance_);
}
inline const ::protocol::chat::v1::Event_ActionPerformed& Event::action_performed() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.action_performed)
  return _internal_action_performed();
}
inline ::protocol::chat::v1::Event_ActionPerformed* Event::unsafe_arena_release_action_performed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.action_performed)
  if (_internal_has_action_performed()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ActionPerformed* temp = event_.action_performed_;
    event_.action_performed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_action_performed(::protocol::chat::v1::Event_ActionPerformed* action_performed) {
  clear_event();
  if (action_performed) {
    set_has_action_performed();
    event_.action_performed_ = action_performed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.action_performed)
}
inline ::protocol::chat::v1::Event_ActionPerformed* Event::_internal_mutable_action_performed() {
  if (!_internal_has_action_performed()) {
    clear_event();
    set_has_action_performed();
    event_.action_performed_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ActionPerformed >(GetArena());
  }
  return event_.action_performed_;
}
inline ::protocol::chat::v1::Event_ActionPerformed* Event::mutable_action_performed() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.action_performed)
  return _internal_mutable_action_performed();
}

// .protocol.chat.v1.Event.MessageSent sent_message = 4;
inline bool Event::_internal_has_sent_message() const {
  return event_case() == kSentMessage;
}
inline bool Event::has_sent_message() const {
  return _internal_has_sent_message();
}
inline void Event::set_has_sent_message() {
  _oneof_case_[0] = kSentMessage;
}
inline void Event::clear_sent_message() {
  if (_internal_has_sent_message()) {
    if (GetArena() == nullptr) {
      delete event_.sent_message_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_MessageSent* Event::release_sent_message() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.sent_message)
  if (_internal_has_sent_message()) {
    clear_has_event();
      ::protocol::chat::v1::Event_MessageSent* temp = event_.sent_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.sent_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_MessageSent& Event::_internal_sent_message() const {
  return _internal_has_sent_message()
      ? *event_.sent_message_
      : *reinterpret_cast< ::protocol::chat::v1::Event_MessageSent*>(&::protocol::chat::v1::_Event_MessageSent_default_instance_);
}
inline const ::protocol::chat::v1::Event_MessageSent& Event::sent_message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.sent_message)
  return _internal_sent_message();
}
inline ::protocol::chat::v1::Event_MessageSent* Event::unsafe_arena_release_sent_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.sent_message)
  if (_internal_has_sent_message()) {
    clear_has_event();
    ::protocol::chat::v1::Event_MessageSent* temp = event_.sent_message_;
    event_.sent_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_sent_message(::protocol::chat::v1::Event_MessageSent* sent_message) {
  clear_event();
  if (sent_message) {
    set_has_sent_message();
    event_.sent_message_ = sent_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.sent_message)
}
inline ::protocol::chat::v1::Event_MessageSent* Event::_internal_mutable_sent_message() {
  if (!_internal_has_sent_message()) {
    clear_event();
    set_has_sent_message();
    event_.sent_message_ = CreateMaybeMessage< ::protocol::chat::v1::Event_MessageSent >(GetArena());
  }
  return event_.sent_message_;
}
inline ::protocol::chat::v1::Event_MessageSent* Event::mutable_sent_message() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.sent_message)
  return _internal_mutable_sent_message();
}

// .protocol.chat.v1.Event.MessageUpdated edited_message = 5;
inline bool Event::_internal_has_edited_message() const {
  return event_case() == kEditedMessage;
}
inline bool Event::has_edited_message() const {
  return _internal_has_edited_message();
}
inline void Event::set_has_edited_message() {
  _oneof_case_[0] = kEditedMessage;
}
inline void Event::clear_edited_message() {
  if (_internal_has_edited_message()) {
    if (GetArena() == nullptr) {
      delete event_.edited_message_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_MessageUpdated* Event::release_edited_message() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.edited_message)
  if (_internal_has_edited_message()) {
    clear_has_event();
      ::protocol::chat::v1::Event_MessageUpdated* temp = event_.edited_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.edited_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_MessageUpdated& Event::_internal_edited_message() const {
  return _internal_has_edited_message()
      ? *event_.edited_message_
      : *reinterpret_cast< ::protocol::chat::v1::Event_MessageUpdated*>(&::protocol::chat::v1::_Event_MessageUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_MessageUpdated& Event::edited_message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.edited_message)
  return _internal_edited_message();
}
inline ::protocol::chat::v1::Event_MessageUpdated* Event::unsafe_arena_release_edited_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.edited_message)
  if (_internal_has_edited_message()) {
    clear_has_event();
    ::protocol::chat::v1::Event_MessageUpdated* temp = event_.edited_message_;
    event_.edited_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_edited_message(::protocol::chat::v1::Event_MessageUpdated* edited_message) {
  clear_event();
  if (edited_message) {
    set_has_edited_message();
    event_.edited_message_ = edited_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.edited_message)
}
inline ::protocol::chat::v1::Event_MessageUpdated* Event::_internal_mutable_edited_message() {
  if (!_internal_has_edited_message()) {
    clear_event();
    set_has_edited_message();
    event_.edited_message_ = CreateMaybeMessage< ::protocol::chat::v1::Event_MessageUpdated >(GetArena());
  }
  return event_.edited_message_;
}
inline ::protocol::chat::v1::Event_MessageUpdated* Event::mutable_edited_message() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.edited_message)
  return _internal_mutable_edited_message();
}

// .protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
inline bool Event::_internal_has_deleted_message() const {
  return event_case() == kDeletedMessage;
}
inline bool Event::has_deleted_message() const {
  return _internal_has_deleted_message();
}
inline void Event::set_has_deleted_message() {
  _oneof_case_[0] = kDeletedMessage;
}
inline void Event::clear_deleted_message() {
  if (_internal_has_deleted_message()) {
    if (GetArena() == nullptr) {
      delete event_.deleted_message_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_MessageDeleted* Event::release_deleted_message() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.deleted_message)
  if (_internal_has_deleted_message()) {
    clear_has_event();
      ::protocol::chat::v1::Event_MessageDeleted* temp = event_.deleted_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.deleted_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_MessageDeleted& Event::_internal_deleted_message() const {
  return _internal_has_deleted_message()
      ? *event_.deleted_message_
      : *reinterpret_cast< ::protocol::chat::v1::Event_MessageDeleted*>(&::protocol::chat::v1::_Event_MessageDeleted_default_instance_);
}
inline const ::protocol::chat::v1::Event_MessageDeleted& Event::deleted_message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.deleted_message)
  return _internal_deleted_message();
}
inline ::protocol::chat::v1::Event_MessageDeleted* Event::unsafe_arena_release_deleted_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.deleted_message)
  if (_internal_has_deleted_message()) {
    clear_has_event();
    ::protocol::chat::v1::Event_MessageDeleted* temp = event_.deleted_message_;
    event_.deleted_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_deleted_message(::protocol::chat::v1::Event_MessageDeleted* deleted_message) {
  clear_event();
  if (deleted_message) {
    set_has_deleted_message();
    event_.deleted_message_ = deleted_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.deleted_message)
}
inline ::protocol::chat::v1::Event_MessageDeleted* Event::_internal_mutable_deleted_message() {
  if (!_internal_has_deleted_message()) {
    clear_event();
    set_has_deleted_message();
    event_.deleted_message_ = CreateMaybeMessage< ::protocol::chat::v1::Event_MessageDeleted >(GetArena());
  }
  return event_.deleted_message_;
}
inline ::protocol::chat::v1::Event_MessageDeleted* Event::mutable_deleted_message() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.deleted_message)
  return _internal_mutable_deleted_message();
}

// .protocol.chat.v1.Event.ChannelCreated created_channel = 7;
inline bool Event::_internal_has_created_channel() const {
  return event_case() == kCreatedChannel;
}
inline bool Event::has_created_channel() const {
  return _internal_has_created_channel();
}
inline void Event::set_has_created_channel() {
  _oneof_case_[0] = kCreatedChannel;
}
inline void Event::clear_created_channel() {
  if (_internal_has_created_channel()) {
    if (GetArena() == nullptr) {
      delete event_.created_channel_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ChannelCreated* Event::release_created_channel() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.created_channel)
  if (_internal_has_created_channel()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ChannelCreated* temp = event_.created_channel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.created_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ChannelCreated& Event::_internal_created_channel() const {
  return _internal_has_created_channel()
      ? *event_.created_channel_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ChannelCreated*>(&::protocol::chat::v1::_Event_ChannelCreated_default_instance_);
}
inline const ::protocol::chat::v1::Event_ChannelCreated& Event::created_channel() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.created_channel)
  return _internal_created_channel();
}
inline ::protocol::chat::v1::Event_ChannelCreated* Event::unsafe_arena_release_created_channel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.created_channel)
  if (_internal_has_created_channel()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ChannelCreated* temp = event_.created_channel_;
    event_.created_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_created_channel(::protocol::chat::v1::Event_ChannelCreated* created_channel) {
  clear_event();
  if (created_channel) {
    set_has_created_channel();
    event_.created_channel_ = created_channel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.created_channel)
}
inline ::protocol::chat::v1::Event_ChannelCreated* Event::_internal_mutable_created_channel() {
  if (!_internal_has_created_channel()) {
    clear_event();
    set_has_created_channel();
    event_.created_channel_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelCreated >(GetArena());
  }
  return event_.created_channel_;
}
inline ::protocol::chat::v1::Event_ChannelCreated* Event::mutable_created_channel() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.created_channel)
  return _internal_mutable_created_channel();
}

// .protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
inline bool Event::_internal_has_edited_channel() const {
  return event_case() == kEditedChannel;
}
inline bool Event::has_edited_channel() const {
  return _internal_has_edited_channel();
}
inline void Event::set_has_edited_channel() {
  _oneof_case_[0] = kEditedChannel;
}
inline void Event::clear_edited_channel() {
  if (_internal_has_edited_channel()) {
    if (GetArena() == nullptr) {
      delete event_.edited_channel_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ChannelUpdated* Event::release_edited_channel() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.edited_channel)
  if (_internal_has_edited_channel()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ChannelUpdated* temp = event_.edited_channel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.edited_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ChannelUpdated& Event::_internal_edited_channel() const {
  return _internal_has_edited_channel()
      ? *event_.edited_channel_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ChannelUpdated*>(&::protocol::chat::v1::_Event_ChannelUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_ChannelUpdated& Event::edited_channel() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.edited_channel)
  return _internal_edited_channel();
}
inline ::protocol::chat::v1::Event_ChannelUpdated* Event::unsafe_arena_release_edited_channel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.edited_channel)
  if (_internal_has_edited_channel()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ChannelUpdated* temp = event_.edited_channel_;
    event_.edited_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_edited_channel(::protocol::chat::v1::Event_ChannelUpdated* edited_channel) {
  clear_event();
  if (edited_channel) {
    set_has_edited_channel();
    event_.edited_channel_ = edited_channel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.edited_channel)
}
inline ::protocol::chat::v1::Event_ChannelUpdated* Event::_internal_mutable_edited_channel() {
  if (!_internal_has_edited_channel()) {
    clear_event();
    set_has_edited_channel();
    event_.edited_channel_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelUpdated >(GetArena());
  }
  return event_.edited_channel_;
}
inline ::protocol::chat::v1::Event_ChannelUpdated* Event::mutable_edited_channel() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.edited_channel)
  return _internal_mutable_edited_channel();
}

// .protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
inline bool Event::_internal_has_deleted_channel() const {
  return event_case() == kDeletedChannel;
}
inline bool Event::has_deleted_channel() const {
  return _internal_has_deleted_channel();
}
inline void Event::set_has_deleted_channel() {
  _oneof_case_[0] = kDeletedChannel;
}
inline void Event::clear_deleted_channel() {
  if (_internal_has_deleted_channel()) {
    if (GetArena() == nullptr) {
      delete event_.deleted_channel_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ChannelDeleted* Event::release_deleted_channel() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.deleted_channel)
  if (_internal_has_deleted_channel()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ChannelDeleted* temp = event_.deleted_channel_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.deleted_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ChannelDeleted& Event::_internal_deleted_channel() const {
  return _internal_has_deleted_channel()
      ? *event_.deleted_channel_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ChannelDeleted*>(&::protocol::chat::v1::_Event_ChannelDeleted_default_instance_);
}
inline const ::protocol::chat::v1::Event_ChannelDeleted& Event::deleted_channel() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.deleted_channel)
  return _internal_deleted_channel();
}
inline ::protocol::chat::v1::Event_ChannelDeleted* Event::unsafe_arena_release_deleted_channel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.deleted_channel)
  if (_internal_has_deleted_channel()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ChannelDeleted* temp = event_.deleted_channel_;
    event_.deleted_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_deleted_channel(::protocol::chat::v1::Event_ChannelDeleted* deleted_channel) {
  clear_event();
  if (deleted_channel) {
    set_has_deleted_channel();
    event_.deleted_channel_ = deleted_channel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.deleted_channel)
}
inline ::protocol::chat::v1::Event_ChannelDeleted* Event::_internal_mutable_deleted_channel() {
  if (!_internal_has_deleted_channel()) {
    clear_event();
    set_has_deleted_channel();
    event_.deleted_channel_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelDeleted >(GetArena());
  }
  return event_.deleted_channel_;
}
inline ::protocol::chat::v1::Event_ChannelDeleted* Event::mutable_deleted_channel() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.deleted_channel)
  return _internal_mutable_deleted_channel();
}

// .protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
inline bool Event::_internal_has_channels_reordered() const {
  return event_case() == kChannelsReordered;
}
inline bool Event::has_channels_reordered() const {
  return _internal_has_channels_reordered();
}
inline void Event::set_has_channels_reordered() {
  _oneof_case_[0] = kChannelsReordered;
}
inline void Event::clear_channels_reordered() {
  if (_internal_has_channels_reordered()) {
    if (GetArena() == nullptr) {
      delete event_.channels_reordered_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ChannelsReordered* Event::release_channels_reordered() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.channels_reordered)
  if (_internal_has_channels_reordered()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ChannelsReordered* temp = event_.channels_reordered_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.channels_reordered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ChannelsReordered& Event::_internal_channels_reordered() const {
  return _internal_has_channels_reordered()
      ? *event_.channels_reordered_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ChannelsReordered*>(&::protocol::chat::v1::_Event_ChannelsReordered_default_instance_);
}
inline const ::protocol::chat::v1::Event_ChannelsReordered& Event::channels_reordered() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.channels_reordered)
  return _internal_channels_reordered();
}
inline ::protocol::chat::v1::Event_ChannelsReordered* Event::unsafe_arena_release_channels_reordered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.channels_reordered)
  if (_internal_has_channels_reordered()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ChannelsReordered* temp = event_.channels_reordered_;
    event_.channels_reordered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_channels_reordered(::protocol::chat::v1::Event_ChannelsReordered* channels_reordered) {
  clear_event();
  if (channels_reordered) {
    set_has_channels_reordered();
    event_.channels_reordered_ = channels_reordered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.channels_reordered)
}
inline ::protocol::chat::v1::Event_ChannelsReordered* Event::_internal_mutable_channels_reordered() {
  if (!_internal_has_channels_reordered()) {
    clear_event();
    set_has_channels_reordered();
    event_.channels_reordered_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelsReordered >(GetArena());
  }
  return event_.channels_reordered_;
}
inline ::protocol::chat::v1::Event_ChannelsReordered* Event::mutable_channels_reordered() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.channels_reordered)
  return _internal_mutable_channels_reordered();
}

// .protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
inline bool Event::_internal_has_edited_guild() const {
  return event_case() == kEditedGuild;
}
inline bool Event::has_edited_guild() const {
  return _internal_has_edited_guild();
}
inline void Event::set_has_edited_guild() {
  _oneof_case_[0] = kEditedGuild;
}
inline void Event::clear_edited_guild() {
  if (_internal_has_edited_guild()) {
    if (GetArena() == nullptr) {
      delete event_.edited_guild_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_GuildUpdated* Event::release_edited_guild() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.edited_guild)
  if (_internal_has_edited_guild()) {
    clear_has_event();
      ::protocol::chat::v1::Event_GuildUpdated* temp = event_.edited_guild_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.edited_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_GuildUpdated& Event::_internal_edited_guild() const {
  return _internal_has_edited_guild()
      ? *event_.edited_guild_
      : *reinterpret_cast< ::protocol::chat::v1::Event_GuildUpdated*>(&::protocol::chat::v1::_Event_GuildUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_GuildUpdated& Event::edited_guild() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.edited_guild)
  return _internal_edited_guild();
}
inline ::protocol::chat::v1::Event_GuildUpdated* Event::unsafe_arena_release_edited_guild() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.edited_guild)
  if (_internal_has_edited_guild()) {
    clear_has_event();
    ::protocol::chat::v1::Event_GuildUpdated* temp = event_.edited_guild_;
    event_.edited_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_edited_guild(::protocol::chat::v1::Event_GuildUpdated* edited_guild) {
  clear_event();
  if (edited_guild) {
    set_has_edited_guild();
    event_.edited_guild_ = edited_guild;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.edited_guild)
}
inline ::protocol::chat::v1::Event_GuildUpdated* Event::_internal_mutable_edited_guild() {
  if (!_internal_has_edited_guild()) {
    clear_event();
    set_has_edited_guild();
    event_.edited_guild_ = CreateMaybeMessage< ::protocol::chat::v1::Event_GuildUpdated >(GetArena());
  }
  return event_.edited_guild_;
}
inline ::protocol::chat::v1::Event_GuildUpdated* Event::mutable_edited_guild() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.edited_guild)
  return _internal_mutable_edited_guild();
}

// .protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
inline bool Event::_internal_has_deleted_guild() const {
  return event_case() == kDeletedGuild;
}
inline bool Event::has_deleted_guild() const {
  return _internal_has_deleted_guild();
}
inline void Event::set_has_deleted_guild() {
  _oneof_case_[0] = kDeletedGuild;
}
inline void Event::clear_deleted_guild() {
  if (_internal_has_deleted_guild()) {
    if (GetArena() == nullptr) {
      delete event_.deleted_guild_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_GuildDeleted* Event::release_deleted_guild() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.deleted_guild)
  if (_internal_has_deleted_guild()) {
    clear_has_event();
      ::protocol::chat::v1::Event_GuildDeleted* temp = event_.deleted_guild_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.deleted_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_GuildDeleted& Event::_internal_deleted_guild() const {
  return _internal_has_deleted_guild()
      ? *event_.deleted_guild_
      : *reinterpret_cast< ::protocol::chat::v1::Event_GuildDeleted*>(&::protocol::chat::v1::_Event_GuildDeleted_default_instance_);
}
inline const ::protocol::chat::v1::Event_GuildDeleted& Event::deleted_guild() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.deleted_guild)
  return _internal_deleted_guild();
}
inline ::protocol::chat::v1::Event_GuildDeleted* Event::unsafe_arena_release_deleted_guild() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.deleted_guild)
  if (_internal_has_deleted_guild()) {
    clear_has_event();
    ::protocol::chat::v1::Event_GuildDeleted* temp = event_.deleted_guild_;
    event_.deleted_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_deleted_guild(::protocol::chat::v1::Event_GuildDeleted* deleted_guild) {
  clear_event();
  if (deleted_guild) {
    set_has_deleted_guild();
    event_.deleted_guild_ = deleted_guild;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.deleted_guild)
}
inline ::protocol::chat::v1::Event_GuildDeleted* Event::_internal_mutable_deleted_guild() {
  if (!_internal_has_deleted_guild()) {
    clear_event();
    set_has_deleted_guild();
    event_.deleted_guild_ = CreateMaybeMessage< ::protocol::chat::v1::Event_GuildDeleted >(GetArena());
  }
  return event_.deleted_guild_;
}
inline ::protocol::chat::v1::Event_GuildDeleted* Event::mutable_deleted_guild() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.deleted_guild)
  return _internal_mutable_deleted_guild();
}

// .protocol.chat.v1.Event.MemberJoined joined_member = 12;
inline bool Event::_internal_has_joined_member() const {
  return event_case() == kJoinedMember;
}
inline bool Event::has_joined_member() const {
  return _internal_has_joined_member();
}
inline void Event::set_has_joined_member() {
  _oneof_case_[0] = kJoinedMember;
}
inline void Event::clear_joined_member() {
  if (_internal_has_joined_member()) {
    if (GetArena() == nullptr) {
      delete event_.joined_member_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_MemberJoined* Event::release_joined_member() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.joined_member)
  if (_internal_has_joined_member()) {
    clear_has_event();
      ::protocol::chat::v1::Event_MemberJoined* temp = event_.joined_member_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.joined_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_MemberJoined& Event::_internal_joined_member() const {
  return _internal_has_joined_member()
      ? *event_.joined_member_
      : *reinterpret_cast< ::protocol::chat::v1::Event_MemberJoined*>(&::protocol::chat::v1::_Event_MemberJoined_default_instance_);
}
inline const ::protocol::chat::v1::Event_MemberJoined& Event::joined_member() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.joined_member)
  return _internal_joined_member();
}
inline ::protocol::chat::v1::Event_MemberJoined* Event::unsafe_arena_release_joined_member() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.joined_member)
  if (_internal_has_joined_member()) {
    clear_has_event();
    ::protocol::chat::v1::Event_MemberJoined* temp = event_.joined_member_;
    event_.joined_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_joined_member(::protocol::chat::v1::Event_MemberJoined* joined_member) {
  clear_event();
  if (joined_member) {
    set_has_joined_member();
    event_.joined_member_ = joined_member;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.joined_member)
}
inline ::protocol::chat::v1::Event_MemberJoined* Event::_internal_mutable_joined_member() {
  if (!_internal_has_joined_member()) {
    clear_event();
    set_has_joined_member();
    event_.joined_member_ = CreateMaybeMessage< ::protocol::chat::v1::Event_MemberJoined >(GetArena());
  }
  return event_.joined_member_;
}
inline ::protocol::chat::v1::Event_MemberJoined* Event::mutable_joined_member() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.joined_member)
  return _internal_mutable_joined_member();
}

// .protocol.chat.v1.Event.MemberLeft left_member = 13;
inline bool Event::_internal_has_left_member() const {
  return event_case() == kLeftMember;
}
inline bool Event::has_left_member() const {
  return _internal_has_left_member();
}
inline void Event::set_has_left_member() {
  _oneof_case_[0] = kLeftMember;
}
inline void Event::clear_left_member() {
  if (_internal_has_left_member()) {
    if (GetArena() == nullptr) {
      delete event_.left_member_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_MemberLeft* Event::release_left_member() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.left_member)
  if (_internal_has_left_member()) {
    clear_has_event();
      ::protocol::chat::v1::Event_MemberLeft* temp = event_.left_member_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.left_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_MemberLeft& Event::_internal_left_member() const {
  return _internal_has_left_member()
      ? *event_.left_member_
      : *reinterpret_cast< ::protocol::chat::v1::Event_MemberLeft*>(&::protocol::chat::v1::_Event_MemberLeft_default_instance_);
}
inline const ::protocol::chat::v1::Event_MemberLeft& Event::left_member() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.left_member)
  return _internal_left_member();
}
inline ::protocol::chat::v1::Event_MemberLeft* Event::unsafe_arena_release_left_member() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.left_member)
  if (_internal_has_left_member()) {
    clear_has_event();
    ::protocol::chat::v1::Event_MemberLeft* temp = event_.left_member_;
    event_.left_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_left_member(::protocol::chat::v1::Event_MemberLeft* left_member) {
  clear_event();
  if (left_member) {
    set_has_left_member();
    event_.left_member_ = left_member;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.left_member)
}
inline ::protocol::chat::v1::Event_MemberLeft* Event::_internal_mutable_left_member() {
  if (!_internal_has_left_member()) {
    clear_event();
    set_has_left_member();
    event_.left_member_ = CreateMaybeMessage< ::protocol::chat::v1::Event_MemberLeft >(GetArena());
  }
  return event_.left_member_;
}
inline ::protocol::chat::v1::Event_MemberLeft* Event::mutable_left_member() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.left_member)
  return _internal_mutable_left_member();
}

// .protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
inline bool Event::_internal_has_profile_updated() const {
  return event_case() == kProfileUpdated;
}
inline bool Event::has_profile_updated() const {
  return _internal_has_profile_updated();
}
inline void Event::set_has_profile_updated() {
  _oneof_case_[0] = kProfileUpdated;
}
inline void Event::clear_profile_updated() {
  if (_internal_has_profile_updated()) {
    if (GetArena() == nullptr) {
      delete event_.profile_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_ProfileUpdated* Event::release_profile_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.profile_updated)
  if (_internal_has_profile_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_ProfileUpdated* temp = event_.profile_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.profile_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_ProfileUpdated& Event::_internal_profile_updated() const {
  return _internal_has_profile_updated()
      ? *event_.profile_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_ProfileUpdated*>(&::protocol::chat::v1::_Event_ProfileUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_ProfileUpdated& Event::profile_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.profile_updated)
  return _internal_profile_updated();
}
inline ::protocol::chat::v1::Event_ProfileUpdated* Event::unsafe_arena_release_profile_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.profile_updated)
  if (_internal_has_profile_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_ProfileUpdated* temp = event_.profile_updated_;
    event_.profile_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_profile_updated(::protocol::chat::v1::Event_ProfileUpdated* profile_updated) {
  clear_event();
  if (profile_updated) {
    set_has_profile_updated();
    event_.profile_updated_ = profile_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.profile_updated)
}
inline ::protocol::chat::v1::Event_ProfileUpdated* Event::_internal_mutable_profile_updated() {
  if (!_internal_has_profile_updated()) {
    clear_event();
    set_has_profile_updated();
    event_.profile_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_ProfileUpdated >(GetArena());
  }
  return event_.profile_updated_;
}
inline ::protocol::chat::v1::Event_ProfileUpdated* Event::mutable_profile_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.profile_updated)
  return _internal_mutable_profile_updated();
}

// .protocol.chat.v1.Event.Typing typing = 15;
inline bool Event::_internal_has_typing() const {
  return event_case() == kTyping;
}
inline bool Event::has_typing() const {
  return _internal_has_typing();
}
inline void Event::set_has_typing() {
  _oneof_case_[0] = kTyping;
}
inline void Event::clear_typing() {
  if (_internal_has_typing()) {
    if (GetArena() == nullptr) {
      delete event_.typing_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_Typing* Event::release_typing() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.typing)
  if (_internal_has_typing()) {
    clear_has_event();
      ::protocol::chat::v1::Event_Typing* temp = event_.typing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_Typing& Event::_internal_typing() const {
  return _internal_has_typing()
      ? *event_.typing_
      : *reinterpret_cast< ::protocol::chat::v1::Event_Typing*>(&::protocol::chat::v1::_Event_Typing_default_instance_);
}
inline const ::protocol::chat::v1::Event_Typing& Event::typing() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.typing)
  return _internal_typing();
}
inline ::protocol::chat::v1::Event_Typing* Event::unsafe_arena_release_typing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.typing)
  if (_internal_has_typing()) {
    clear_has_event();
    ::protocol::chat::v1::Event_Typing* temp = event_.typing_;
    event_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_typing(::protocol::chat::v1::Event_Typing* typing) {
  clear_event();
  if (typing) {
    set_has_typing();
    event_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.typing)
}
inline ::protocol::chat::v1::Event_Typing* Event::_internal_mutable_typing() {
  if (!_internal_has_typing()) {
    clear_event();
    set_has_typing();
    event_.typing_ = CreateMaybeMessage< ::protocol::chat::v1::Event_Typing >(GetArena());
  }
  return event_.typing_;
}
inline ::protocol::chat::v1::Event_Typing* Event::mutable_typing() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.typing)
  return _internal_mutable_typing();
}

// .protocol.chat.v1.Event.RoleCreated role_created = 16;
inline bool Event::_internal_has_role_created() const {
  return event_case() == kRoleCreated;
}
inline bool Event::has_role_created() const {
  return _internal_has_role_created();
}
inline void Event::set_has_role_created() {
  _oneof_case_[0] = kRoleCreated;
}
inline void Event::clear_role_created() {
  if (_internal_has_role_created()) {
    if (GetArena() == nullptr) {
      delete event_.role_created_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_RoleCreated* Event::release_role_created() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.role_created)
  if (_internal_has_role_created()) {
    clear_has_event();
      ::protocol::chat::v1::Event_RoleCreated* temp = event_.role_created_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.role_created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_RoleCreated& Event::_internal_role_created() const {
  return _internal_has_role_created()
      ? *event_.role_created_
      : *reinterpret_cast< ::protocol::chat::v1::Event_RoleCreated*>(&::protocol::chat::v1::_Event_RoleCreated_default_instance_);
}
inline const ::protocol::chat::v1::Event_RoleCreated& Event::role_created() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.role_created)
  return _internal_role_created();
}
inline ::protocol::chat::v1::Event_RoleCreated* Event::unsafe_arena_release_role_created() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.role_created)
  if (_internal_has_role_created()) {
    clear_has_event();
    ::protocol::chat::v1::Event_RoleCreated* temp = event_.role_created_;
    event_.role_created_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_role_created(::protocol::chat::v1::Event_RoleCreated* role_created) {
  clear_event();
  if (role_created) {
    set_has_role_created();
    event_.role_created_ = role_created;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.role_created)
}
inline ::protocol::chat::v1::Event_RoleCreated* Event::_internal_mutable_role_created() {
  if (!_internal_has_role_created()) {
    clear_event();
    set_has_role_created();
    event_.role_created_ = CreateMaybeMessage< ::protocol::chat::v1::Event_RoleCreated >(GetArena());
  }
  return event_.role_created_;
}
inline ::protocol::chat::v1::Event_RoleCreated* Event::mutable_role_created() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.role_created)
  return _internal_mutable_role_created();
}

// .protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
inline bool Event::_internal_has_role_deleted() const {
  return event_case() == kRoleDeleted;
}
inline bool Event::has_role_deleted() const {
  return _internal_has_role_deleted();
}
inline void Event::set_has_role_deleted() {
  _oneof_case_[0] = kRoleDeleted;
}
inline void Event::clear_role_deleted() {
  if (_internal_has_role_deleted()) {
    if (GetArena() == nullptr) {
      delete event_.role_deleted_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_RoleDeleted* Event::release_role_deleted() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.role_deleted)
  if (_internal_has_role_deleted()) {
    clear_has_event();
      ::protocol::chat::v1::Event_RoleDeleted* temp = event_.role_deleted_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.role_deleted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_RoleDeleted& Event::_internal_role_deleted() const {
  return _internal_has_role_deleted()
      ? *event_.role_deleted_
      : *reinterpret_cast< ::protocol::chat::v1::Event_RoleDeleted*>(&::protocol::chat::v1::_Event_RoleDeleted_default_instance_);
}
inline const ::protocol::chat::v1::Event_RoleDeleted& Event::role_deleted() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.role_deleted)
  return _internal_role_deleted();
}
inline ::protocol::chat::v1::Event_RoleDeleted* Event::unsafe_arena_release_role_deleted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.role_deleted)
  if (_internal_has_role_deleted()) {
    clear_has_event();
    ::protocol::chat::v1::Event_RoleDeleted* temp = event_.role_deleted_;
    event_.role_deleted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_role_deleted(::protocol::chat::v1::Event_RoleDeleted* role_deleted) {
  clear_event();
  if (role_deleted) {
    set_has_role_deleted();
    event_.role_deleted_ = role_deleted;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.role_deleted)
}
inline ::protocol::chat::v1::Event_RoleDeleted* Event::_internal_mutable_role_deleted() {
  if (!_internal_has_role_deleted()) {
    clear_event();
    set_has_role_deleted();
    event_.role_deleted_ = CreateMaybeMessage< ::protocol::chat::v1::Event_RoleDeleted >(GetArena());
  }
  return event_.role_deleted_;
}
inline ::protocol::chat::v1::Event_RoleDeleted* Event::mutable_role_deleted() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.role_deleted)
  return _internal_mutable_role_deleted();
}

// .protocol.chat.v1.Event.RoleMoved role_moved = 18;
inline bool Event::_internal_has_role_moved() const {
  return event_case() == kRoleMoved;
}
inline bool Event::has_role_moved() const {
  return _internal_has_role_moved();
}
inline void Event::set_has_role_moved() {
  _oneof_case_[0] = kRoleMoved;
}
inline void Event::clear_role_moved() {
  if (_internal_has_role_moved()) {
    if (GetArena() == nullptr) {
      delete event_.role_moved_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_RoleMoved* Event::release_role_moved() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.role_moved)
  if (_internal_has_role_moved()) {
    clear_has_event();
      ::protocol::chat::v1::Event_RoleMoved* temp = event_.role_moved_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.role_moved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_RoleMoved& Event::_internal_role_moved() const {
  return _internal_has_role_moved()
      ? *event_.role_moved_
      : *reinterpret_cast< ::protocol::chat::v1::Event_RoleMoved*>(&::protocol::chat::v1::_Event_RoleMoved_default_instance_);
}
inline const ::protocol::chat::v1::Event_RoleMoved& Event::role_moved() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.role_moved)
  return _internal_role_moved();
}
inline ::protocol::chat::v1::Event_RoleMoved* Event::unsafe_arena_release_role_moved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.role_moved)
  if (_internal_has_role_moved()) {
    clear_has_event();
    ::protocol::chat::v1::Event_RoleMoved* temp = event_.role_moved_;
    event_.role_moved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_role_moved(::protocol::chat::v1::Event_RoleMoved* role_moved) {
  clear_event();
  if (role_moved) {
    set_has_role_moved();
    event_.role_moved_ = role_moved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.role_moved)
}
inline ::protocol::chat::v1::Event_RoleMoved* Event::_internal_mutable_role_moved() {
  if (!_internal_has_role_moved()) {
    clear_event();
    set_has_role_moved();
    event_.role_moved_ = CreateMaybeMessage< ::protocol::chat::v1::Event_RoleMoved >(GetArena());
  }
  return event_.role_moved_;
}
inline ::protocol::chat::v1::Event_RoleMoved* Event::mutable_role_moved() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.role_moved)
  return _internal_mutable_role_moved();
}

// .protocol.chat.v1.Event.RoleUpdated role_updated = 19;
inline bool Event::_internal_has_role_updated() const {
  return event_case() == kRoleUpdated;
}
inline bool Event::has_role_updated() const {
  return _internal_has_role_updated();
}
inline void Event::set_has_role_updated() {
  _oneof_case_[0] = kRoleUpdated;
}
inline void Event::clear_role_updated() {
  if (_internal_has_role_updated()) {
    if (GetArena() == nullptr) {
      delete event_.role_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_RoleUpdated* Event::release_role_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.role_updated)
  if (_internal_has_role_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_RoleUpdated* temp = event_.role_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.role_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_RoleUpdated& Event::_internal_role_updated() const {
  return _internal_has_role_updated()
      ? *event_.role_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_RoleUpdated*>(&::protocol::chat::v1::_Event_RoleUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_RoleUpdated& Event::role_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.role_updated)
  return _internal_role_updated();
}
inline ::protocol::chat::v1::Event_RoleUpdated* Event::unsafe_arena_release_role_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.role_updated)
  if (_internal_has_role_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_RoleUpdated* temp = event_.role_updated_;
    event_.role_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_role_updated(::protocol::chat::v1::Event_RoleUpdated* role_updated) {
  clear_event();
  if (role_updated) {
    set_has_role_updated();
    event_.role_updated_ = role_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.role_updated)
}
inline ::protocol::chat::v1::Event_RoleUpdated* Event::_internal_mutable_role_updated() {
  if (!_internal_has_role_updated()) {
    clear_event();
    set_has_role_updated();
    event_.role_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_RoleUpdated >(GetArena());
  }
  return event_.role_updated_;
}
inline ::protocol::chat::v1::Event_RoleUpdated* Event::mutable_role_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.role_updated)
  return _internal_mutable_role_updated();
}

// .protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
inline bool Event::_internal_has_role_perms_updated() const {
  return event_case() == kRolePermsUpdated;
}
inline bool Event::has_role_perms_updated() const {
  return _internal_has_role_perms_updated();
}
inline void Event::set_has_role_perms_updated() {
  _oneof_case_[0] = kRolePermsUpdated;
}
inline void Event::clear_role_perms_updated() {
  if (_internal_has_role_perms_updated()) {
    if (GetArena() == nullptr) {
      delete event_.role_perms_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_RolePermissionsUpdated* Event::release_role_perms_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.role_perms_updated)
  if (_internal_has_role_perms_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_RolePermissionsUpdated* temp = event_.role_perms_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.role_perms_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_RolePermissionsUpdated& Event::_internal_role_perms_updated() const {
  return _internal_has_role_perms_updated()
      ? *event_.role_perms_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_RolePermissionsUpdated*>(&::protocol::chat::v1::_Event_RolePermissionsUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_RolePermissionsUpdated& Event::role_perms_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.role_perms_updated)
  return _internal_role_perms_updated();
}
inline ::protocol::chat::v1::Event_RolePermissionsUpdated* Event::unsafe_arena_release_role_perms_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.role_perms_updated)
  if (_internal_has_role_perms_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_RolePermissionsUpdated* temp = event_.role_perms_updated_;
    event_.role_perms_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_role_perms_updated(::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated) {
  clear_event();
  if (role_perms_updated) {
    set_has_role_perms_updated();
    event_.role_perms_updated_ = role_perms_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.role_perms_updated)
}
inline ::protocol::chat::v1::Event_RolePermissionsUpdated* Event::_internal_mutable_role_perms_updated() {
  if (!_internal_has_role_perms_updated()) {
    clear_event();
    set_has_role_perms_updated();
    event_.role_perms_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_RolePermissionsUpdated >(GetArena());
  }
  return event_.role_perms_updated_;
}
inline ::protocol::chat::v1::Event_RolePermissionsUpdated* Event::mutable_role_perms_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.role_perms_updated)
  return _internal_mutable_role_perms_updated();
}

// .protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
inline bool Event::_internal_has_user_roles_updated() const {
  return event_case() == kUserRolesUpdated;
}
inline bool Event::has_user_roles_updated() const {
  return _internal_has_user_roles_updated();
}
inline void Event::set_has_user_roles_updated() {
  _oneof_case_[0] = kUserRolesUpdated;
}
inline void Event::clear_user_roles_updated() {
  if (_internal_has_user_roles_updated()) {
    if (GetArena() == nullptr) {
      delete event_.user_roles_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_UserRolesUpdated* Event::release_user_roles_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.user_roles_updated)
  if (_internal_has_user_roles_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_UserRolesUpdated* temp = event_.user_roles_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.user_roles_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_UserRolesUpdated& Event::_internal_user_roles_updated() const {
  return _internal_has_user_roles_updated()
      ? *event_.user_roles_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_UserRolesUpdated*>(&::protocol::chat::v1::_Event_UserRolesUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_UserRolesUpdated& Event::user_roles_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.user_roles_updated)
  return _internal_user_roles_updated();
}
inline ::protocol::chat::v1::Event_UserRolesUpdated* Event::unsafe_arena_release_user_roles_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.user_roles_updated)
  if (_internal_has_user_roles_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_UserRolesUpdated* temp = event_.user_roles_updated_;
    event_.user_roles_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_user_roles_updated(::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated) {
  clear_event();
  if (user_roles_updated) {
    set_has_user_roles_updated();
    event_.user_roles_updated_ = user_roles_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.user_roles_updated)
}
inline ::protocol::chat::v1::Event_UserRolesUpdated* Event::_internal_mutable_user_roles_updated() {
  if (!_internal_has_user_roles_updated()) {
    clear_event();
    set_has_user_roles_updated();
    event_.user_roles_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_UserRolesUpdated >(GetArena());
  }
  return event_.user_roles_updated_;
}
inline ::protocol::chat::v1::Event_UserRolesUpdated* Event::mutable_user_roles_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.user_roles_updated)
  return _internal_mutable_user_roles_updated();
}

// .protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
inline bool Event::_internal_has_permission_updated() const {
  return event_case() == kPermissionUpdated;
}
inline bool Event::has_permission_updated() const {
  return _internal_has_permission_updated();
}
inline void Event::set_has_permission_updated() {
  _oneof_case_[0] = kPermissionUpdated;
}
inline void Event::clear_permission_updated() {
  if (_internal_has_permission_updated()) {
    if (GetArena() == nullptr) {
      delete event_.permission_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_PermissionUpdated* Event::release_permission_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.permission_updated)
  if (_internal_has_permission_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_PermissionUpdated* temp = event_.permission_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.permission_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_PermissionUpdated& Event::_internal_permission_updated() const {
  return _internal_has_permission_updated()
      ? *event_.permission_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_PermissionUpdated*>(&::protocol::chat::v1::_Event_PermissionUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_PermissionUpdated& Event::permission_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.permission_updated)
  return _internal_permission_updated();
}
inline ::protocol::chat::v1::Event_PermissionUpdated* Event::unsafe_arena_release_permission_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.permission_updated)
  if (_internal_has_permission_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_PermissionUpdated* temp = event_.permission_updated_;
    event_.permission_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_permission_updated(::protocol::chat::v1::Event_PermissionUpdated* permission_updated) {
  clear_event();
  if (permission_updated) {
    set_has_permission_updated();
    event_.permission_updated_ = permission_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.permission_updated)
}
inline ::protocol::chat::v1::Event_PermissionUpdated* Event::_internal_mutable_permission_updated() {
  if (!_internal_has_permission_updated()) {
    clear_event();
    set_has_permission_updated();
    event_.permission_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_PermissionUpdated >(GetArena());
  }
  return event_.permission_updated_;
}
inline ::protocol::chat::v1::Event_PermissionUpdated* Event::mutable_permission_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.permission_updated)
  return _internal_mutable_permission_updated();
}

// .protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
inline bool Event::_internal_has_emote_pack_added() const {
  return event_case() == kEmotePackAdded;
}
inline bool Event::has_emote_pack_added() const {
  return _internal_has_emote_pack_added();
}
inline void Event::set_has_emote_pack_added() {
  _oneof_case_[0] = kEmotePackAdded;
}
inline void Event::clear_emote_pack_added() {
  if (_internal_has_emote_pack_added()) {
    if (GetArena() == nullptr) {
      delete event_.emote_pack_added_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_EmotePackAdded* Event::release_emote_pack_added() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.emote_pack_added)
  if (_internal_has_emote_pack_added()) {
    clear_has_event();
      ::protocol::chat::v1::Event_EmotePackAdded* temp = event_.emote_pack_added_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.emote_pack_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_EmotePackAdded& Event::_internal_emote_pack_added() const {
  return _internal_has_emote_pack_added()
      ? *event_.emote_pack_added_
      : *reinterpret_cast< ::protocol::chat::v1::Event_EmotePackAdded*>(&::protocol::chat::v1::_Event_EmotePackAdded_default_instance_);
}
inline const ::protocol::chat::v1::Event_EmotePackAdded& Event::emote_pack_added() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.emote_pack_added)
  return _internal_emote_pack_added();
}
inline ::protocol::chat::v1::Event_EmotePackAdded* Event::unsafe_arena_release_emote_pack_added() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.emote_pack_added)
  if (_internal_has_emote_pack_added()) {
    clear_has_event();
    ::protocol::chat::v1::Event_EmotePackAdded* temp = event_.emote_pack_added_;
    event_.emote_pack_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_emote_pack_added(::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added) {
  clear_event();
  if (emote_pack_added) {
    set_has_emote_pack_added();
    event_.emote_pack_added_ = emote_pack_added;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.emote_pack_added)
}
inline ::protocol::chat::v1::Event_EmotePackAdded* Event::_internal_mutable_emote_pack_added() {
  if (!_internal_has_emote_pack_added()) {
    clear_event();
    set_has_emote_pack_added();
    event_.emote_pack_added_ = CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackAdded >(GetArena());
  }
  return event_.emote_pack_added_;
}
inline ::protocol::chat::v1::Event_EmotePackAdded* Event::mutable_emote_pack_added() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.emote_pack_added)
  return _internal_mutable_emote_pack_added();
}

// .protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
inline bool Event::_internal_has_emote_pack_updated() const {
  return event_case() == kEmotePackUpdated;
}
inline bool Event::has_emote_pack_updated() const {
  return _internal_has_emote_pack_updated();
}
inline void Event::set_has_emote_pack_updated() {
  _oneof_case_[0] = kEmotePackUpdated;
}
inline void Event::clear_emote_pack_updated() {
  if (_internal_has_emote_pack_updated()) {
    if (GetArena() == nullptr) {
      delete event_.emote_pack_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_EmotePackUpdated* Event::release_emote_pack_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.emote_pack_updated)
  if (_internal_has_emote_pack_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_EmotePackUpdated* temp = event_.emote_pack_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.emote_pack_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_EmotePackUpdated& Event::_internal_emote_pack_updated() const {
  return _internal_has_emote_pack_updated()
      ? *event_.emote_pack_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_EmotePackUpdated*>(&::protocol::chat::v1::_Event_EmotePackUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_EmotePackUpdated& Event::emote_pack_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.emote_pack_updated)
  return _internal_emote_pack_updated();
}
inline ::protocol::chat::v1::Event_EmotePackUpdated* Event::unsafe_arena_release_emote_pack_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.emote_pack_updated)
  if (_internal_has_emote_pack_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_EmotePackUpdated* temp = event_.emote_pack_updated_;
    event_.emote_pack_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_emote_pack_updated(::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated) {
  clear_event();
  if (emote_pack_updated) {
    set_has_emote_pack_updated();
    event_.emote_pack_updated_ = emote_pack_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.emote_pack_updated)
}
inline ::protocol::chat::v1::Event_EmotePackUpdated* Event::_internal_mutable_emote_pack_updated() {
  if (!_internal_has_emote_pack_updated()) {
    clear_event();
    set_has_emote_pack_updated();
    event_.emote_pack_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackUpdated >(GetArena());
  }
  return event_.emote_pack_updated_;
}
inline ::protocol::chat::v1::Event_EmotePackUpdated* Event::mutable_emote_pack_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.emote_pack_updated)
  return _internal_mutable_emote_pack_updated();
}

// .protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
inline bool Event::_internal_has_emote_pack_deleted() const {
  return event_case() == kEmotePackDeleted;
}
inline bool Event::has_emote_pack_deleted() const {
  return _internal_has_emote_pack_deleted();
}
inline void Event::set_has_emote_pack_deleted() {
  _oneof_case_[0] = kEmotePackDeleted;
}
inline void Event::clear_emote_pack_deleted() {
  if (_internal_has_emote_pack_deleted()) {
    if (GetArena() == nullptr) {
      delete event_.emote_pack_deleted_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_EmotePackDeleted* Event::release_emote_pack_deleted() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.emote_pack_deleted)
  if (_internal_has_emote_pack_deleted()) {
    clear_has_event();
      ::protocol::chat::v1::Event_EmotePackDeleted* temp = event_.emote_pack_deleted_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.emote_pack_deleted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_EmotePackDeleted& Event::_internal_emote_pack_deleted() const {
  return _internal_has_emote_pack_deleted()
      ? *event_.emote_pack_deleted_
      : *reinterpret_cast< ::protocol::chat::v1::Event_EmotePackDeleted*>(&::protocol::chat::v1::_Event_EmotePackDeleted_default_instance_);
}
inline const ::protocol::chat::v1::Event_EmotePackDeleted& Event::emote_pack_deleted() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.emote_pack_deleted)
  return _internal_emote_pack_deleted();
}
inline ::protocol::chat::v1::Event_EmotePackDeleted* Event::unsafe_arena_release_emote_pack_deleted() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.emote_pack_deleted)
  if (_internal_has_emote_pack_deleted()) {
    clear_has_event();
    ::protocol::chat::v1::Event_EmotePackDeleted* temp = event_.emote_pack_deleted_;
    event_.emote_pack_deleted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_emote_pack_deleted(::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted) {
  clear_event();
  if (emote_pack_deleted) {
    set_has_emote_pack_deleted();
    event_.emote_pack_deleted_ = emote_pack_deleted;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.emote_pack_deleted)
}
inline ::protocol::chat::v1::Event_EmotePackDeleted* Event::_internal_mutable_emote_pack_deleted() {
  if (!_internal_has_emote_pack_deleted()) {
    clear_event();
    set_has_emote_pack_deleted();
    event_.emote_pack_deleted_ = CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackDeleted >(GetArena());
  }
  return event_.emote_pack_deleted_;
}
inline ::protocol::chat::v1::Event_EmotePackDeleted* Event::mutable_emote_pack_deleted() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.emote_pack_deleted)
  return _internal_mutable_emote_pack_deleted();
}

// .protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
inline bool Event::_internal_has_emote_pack_emotes_updated() const {
  return event_case() == kEmotePackEmotesUpdated;
}
inline bool Event::has_emote_pack_emotes_updated() const {
  return _internal_has_emote_pack_emotes_updated();
}
inline void Event::set_has_emote_pack_emotes_updated() {
  _oneof_case_[0] = kEmotePackEmotesUpdated;
}
inline void Event::clear_emote_pack_emotes_updated() {
  if (_internal_has_emote_pack_emotes_updated()) {
    if (GetArena() == nullptr) {
      delete event_.emote_pack_emotes_updated_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Event::release_emote_pack_emotes_updated() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Event.emote_pack_emotes_updated)
  if (_internal_has_emote_pack_emotes_updated()) {
    clear_has_event();
      ::protocol::chat::v1::Event_EmotePackEmotesUpdated* temp = event_.emote_pack_emotes_updated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.emote_pack_emotes_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::Event_EmotePackEmotesUpdated& Event::_internal_emote_pack_emotes_updated() const {
  return _internal_has_emote_pack_emotes_updated()
      ? *event_.emote_pack_emotes_updated_
      : *reinterpret_cast< ::protocol::chat::v1::Event_EmotePackEmotesUpdated*>(&::protocol::chat::v1::_Event_EmotePackEmotesUpdated_default_instance_);
}
inline const ::protocol::chat::v1::Event_EmotePackEmotesUpdated& Event::emote_pack_emotes_updated() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Event.emote_pack_emotes_updated)
  return _internal_emote_pack_emotes_updated();
}
inline ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Event::unsafe_arena_release_emote_pack_emotes_updated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Event.emote_pack_emotes_updated)
  if (_internal_has_emote_pack_emotes_updated()) {
    clear_has_event();
    ::protocol::chat::v1::Event_EmotePackEmotesUpdated* temp = event_.emote_pack_emotes_updated_;
    event_.emote_pack_emotes_updated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_emote_pack_emotes_updated(::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated) {
  clear_event();
  if (emote_pack_emotes_updated) {
    set_has_emote_pack_emotes_updated();
    event_.emote_pack_emotes_updated_ = emote_pack_emotes_updated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Event.emote_pack_emotes_updated)
}
inline ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Event::_internal_mutable_emote_pack_emotes_updated() {
  if (!_internal_has_emote_pack_emotes_updated()) {
    clear_event();
    set_has_emote_pack_emotes_updated();
    event_.emote_pack_emotes_updated_ = CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackEmotesUpdated >(GetArena());
  }
  return event_.emote_pack_emotes_updated_;
}
inline ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Event::mutable_emote_pack_emotes_updated() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Event.emote_pack_emotes_updated)
  return _internal_mutable_emote_pack_emotes_updated();
}

inline bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Event::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Event::EventCase Event::event_case() const {
  return Event::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::chat::v1::Event_LeaveReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::chat::v1::Event_LeaveReason>() {
  return ::protocol::chat::v1::Event_LeaveReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fstreaming_2eproto
