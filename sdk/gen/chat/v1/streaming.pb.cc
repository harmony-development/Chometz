// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/streaming.proto

#include "chat/v1/streaming.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2femotes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Emote_chat_2fv1_2femotes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2femotes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotePack_chat_2fv1_2femotes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Role_chat_2fv1_2fpermissions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fstreaming_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Message_harmonytypes_2fv1_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class StreamEventsRequest_SubscribeToGuildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventsRequest_SubscribeToGuild> _instance;
} _StreamEventsRequest_SubscribeToGuild_default_instance_;
class StreamEventsRequest_SubscribeToActionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventsRequest_SubscribeToActions> _instance;
} _StreamEventsRequest_SubscribeToActions_default_instance_;
class StreamEventsRequest_SubscribeToHomeserverEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventsRequest_SubscribeToHomeserverEvents> _instance;
} _StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_;
class StreamEventsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamEventsRequest> _instance;
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild_;
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions_;
  const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events_;
} _StreamEventsRequest_default_instance_;
class Event_MessageSentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_MessageSent> _instance;
} _Event_MessageSent_default_instance_;
class Event_MessageUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_MessageUpdated> _instance;
} _Event_MessageUpdated_default_instance_;
class Event_MessageDeletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_MessageDeleted> _instance;
} _Event_MessageDeleted_default_instance_;
class Event_ChannelCreatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ChannelCreated> _instance;
} _Event_ChannelCreated_default_instance_;
class Event_ChannelUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ChannelUpdated> _instance;
} _Event_ChannelUpdated_default_instance_;
class Event_ChannelsReorderedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ChannelsReordered> _instance;
} _Event_ChannelsReordered_default_instance_;
class Event_ChannelDeletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ChannelDeleted> _instance;
} _Event_ChannelDeleted_default_instance_;
class Event_GuildUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_GuildUpdated> _instance;
} _Event_GuildUpdated_default_instance_;
class Event_GuildDeletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_GuildDeleted> _instance;
} _Event_GuildDeleted_default_instance_;
class Event_MemberJoinedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_MemberJoined> _instance;
} _Event_MemberJoined_default_instance_;
class Event_MemberLeftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_MemberLeft> _instance;
} _Event_MemberLeft_default_instance_;
class Event_GuildAddedToListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_GuildAddedToList> _instance;
} _Event_GuildAddedToList_default_instance_;
class Event_GuildRemovedFromListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_GuildRemovedFromList> _instance;
} _Event_GuildRemovedFromList_default_instance_;
class Event_ActionPerformedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ActionPerformed> _instance;
} _Event_ActionPerformed_default_instance_;
class Event_RoleMovedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_RoleMoved> _instance;
} _Event_RoleMoved_default_instance_;
class Event_RoleDeletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_RoleDeleted> _instance;
} _Event_RoleDeleted_default_instance_;
class Event_RoleCreatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_RoleCreated> _instance;
} _Event_RoleCreated_default_instance_;
class Event_RoleUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_RoleUpdated> _instance;
} _Event_RoleUpdated_default_instance_;
class Event_RolePermissionsUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_RolePermissionsUpdated> _instance;
} _Event_RolePermissionsUpdated_default_instance_;
class Event_UserRolesUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_UserRolesUpdated> _instance;
} _Event_UserRolesUpdated_default_instance_;
class Event_ProfileUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ProfileUpdated> _instance;
} _Event_ProfileUpdated_default_instance_;
class Event_TypingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_Typing> _instance;
} _Event_Typing_default_instance_;
class Event_PermissionUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_PermissionUpdated> _instance;
} _Event_PermissionUpdated_default_instance_;
class Event_EmotePackUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_EmotePackUpdated> _instance;
} _Event_EmotePackUpdated_default_instance_;
class Event_EmotePackDeletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_EmotePackDeleted> _instance;
} _Event_EmotePackDeleted_default_instance_;
class Event_EmotePackAddedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_EmotePackAdded> _instance;
} _Event_EmotePackAdded_default_instance_;
class Event_EmotePackEmotesUpdatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_EmotePackEmotesUpdated> _instance;
} _Event_EmotePackEmotesUpdated_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  const ::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list_;
  const ::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list_;
  const ::protocol::chat::v1::Event_ActionPerformed* action_performed_;
  const ::protocol::chat::v1::Event_MessageSent* sent_message_;
  const ::protocol::chat::v1::Event_MessageUpdated* edited_message_;
  const ::protocol::chat::v1::Event_MessageDeleted* deleted_message_;
  const ::protocol::chat::v1::Event_ChannelCreated* created_channel_;
  const ::protocol::chat::v1::Event_ChannelUpdated* edited_channel_;
  const ::protocol::chat::v1::Event_ChannelDeleted* deleted_channel_;
  const ::protocol::chat::v1::Event_ChannelsReordered* channels_reordered_;
  const ::protocol::chat::v1::Event_GuildUpdated* edited_guild_;
  const ::protocol::chat::v1::Event_GuildDeleted* deleted_guild_;
  const ::protocol::chat::v1::Event_MemberJoined* joined_member_;
  const ::protocol::chat::v1::Event_MemberLeft* left_member_;
  const ::protocol::chat::v1::Event_ProfileUpdated* profile_updated_;
  const ::protocol::chat::v1::Event_Typing* typing_;
  const ::protocol::chat::v1::Event_RoleCreated* role_created_;
  const ::protocol::chat::v1::Event_RoleDeleted* role_deleted_;
  const ::protocol::chat::v1::Event_RoleMoved* role_moved_;
  const ::protocol::chat::v1::Event_RoleUpdated* role_updated_;
  const ::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated_;
  const ::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated_;
  const ::protocol::chat::v1::Event_PermissionUpdated* permission_updated_;
  const ::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added_;
  const ::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated_;
  const ::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted_;
  const ::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated_;
} _Event_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
static void InitDefaultsscc_info_Event_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_default_instance_;
    new (ptr) ::protocol::chat::v1::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<27> scc_info_Event_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 27, 0, InitDefaultsscc_info_Event_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto.base,}};

static void InitDefaultsscc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ActionPerformed_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ActionPerformed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ActionPerformed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ChannelCreated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ChannelCreated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ChannelCreated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ChannelDeleted_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ChannelDeleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ChannelDeleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ChannelUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ChannelUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ChannelUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ChannelsReordered_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ChannelsReordered();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ChannelsReordered::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_EmotePackAdded_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_EmotePackAdded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_EmotePackAdded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_EmotePack_chat_2fv1_2femotes_2eproto.base,}};

static void InitDefaultsscc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_EmotePackDeleted_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_EmotePackDeleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_EmotePackDeleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_EmotePackEmotesUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_EmotePackEmotesUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_EmotePackEmotesUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Emote_chat_2fv1_2femotes_2eproto.base,}};

static void InitDefaultsscc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_EmotePackUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_EmotePackUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_EmotePackUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_GuildAddedToList_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_GuildAddedToList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_GuildAddedToList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_GuildDeleted_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_GuildDeleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_GuildDeleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_GuildRemovedFromList_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_GuildRemovedFromList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_GuildRemovedFromList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_GuildUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_GuildUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_GuildUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_MemberJoined_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_MemberJoined();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_MemberJoined::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_MemberLeft_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_MemberLeft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_MemberLeft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_MessageDeleted_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_MessageDeleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_MessageDeleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_MessageSent_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_MessageSent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_MessageSent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Message_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_MessageUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_MessageUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_MessageUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_PermissionUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_PermissionUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_PermissionUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_ProfileUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_ProfileUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_ProfileUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_RoleCreated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_RoleCreated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_RoleCreated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_RoleDeleted_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_RoleDeleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_RoleDeleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_RoleMoved_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_RoleMoved();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_RoleMoved::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_RolePermissionsUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_RolePermissionsUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_RolePermissionsUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_RoleUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_RoleUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_RoleUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_Typing_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_Typing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_Typing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Event_UserRolesUpdated_default_instance_;
    new (ptr) ::protocol::chat::v1::Event_UserRolesUpdated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Event_UserRolesUpdated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_StreamEventsRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::StreamEventsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::StreamEventsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto}, {
      &scc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto.base,
      &scc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto.base,}};

static void InitDefaultsscc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_StreamEventsRequest_SubscribeToActions_default_instance_;
    new (ptr) ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_StreamEventsRequest_SubscribeToGuild_default_instance_;
    new (ptr) ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto}, {}};

static void InitDefaultsscc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_;
    new (ptr) ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2fv1_2fstreaming_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2fv1_2fstreaming_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2fv1_2fstreaming_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2fv1_2fstreaming_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest_SubscribeToActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protocol::chat::v1::StreamEventsRequestDefaultTypeInternal, subscribe_to_guild_),
  offsetof(::protocol::chat::v1::StreamEventsRequestDefaultTypeInternal, subscribe_to_actions_),
  offsetof(::protocol::chat::v1::StreamEventsRequestDefaultTypeInternal, subscribe_to_homeserver_events_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::StreamEventsRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageSent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageSent, echo_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageSent, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, message_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, edited_at_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageUpdated, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageDeleted, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageDeleted, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MessageDeleted, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, previous_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, next_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, is_category_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelCreated, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, update_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, previous_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, next_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, update_order_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelUpdated, update_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelsReordered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelsReordered, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelsReordered, channel_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelDeleted, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ChannelDeleted, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, update_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, picture_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, update_picture_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildUpdated, update_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildDeleted, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberJoined, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberJoined, member_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberJoined, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberLeft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberLeft, member_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberLeft, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_MemberLeft, leave_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildAddedToList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildAddedToList, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildAddedToList, homeserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildRemovedFromList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildRemovedFromList, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_GuildRemovedFromList, homeserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, message_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, action_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ActionPerformed, action_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleMoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleMoved, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleMoved, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleMoved, previous_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleMoved, next_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleDeleted, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleDeleted, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleCreated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleCreated, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleCreated, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleUpdated, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RoleUpdated, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RolePermissionsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RolePermissionsUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RolePermissionsUpdated, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RolePermissionsUpdated, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_RolePermissionsUpdated, perms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_UserRolesUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_UserRolesUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_UserRolesUpdated, user_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_UserRolesUpdated, role_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, user_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, new_username_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, update_username_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, new_avatar_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, update_avatar_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, new_status_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, update_status_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, is_bot_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_ProfileUpdated, update_is_bot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_Typing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_Typing, user_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_Typing, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_Typing, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_PermissionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_PermissionUpdated, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_PermissionUpdated, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_PermissionUpdated, query_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_PermissionUpdated, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackUpdated, pack_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackUpdated, pack_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackUpdated, update_pack_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackDeleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackDeleted, pack_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackAdded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackAdded, pack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackEmotesUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackEmotesUpdated, pack_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackEmotesUpdated, added_emotes_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event_EmotePackEmotesUpdated, deleted_emotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, guild_added_to_list_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, guild_removed_from_list_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, action_performed_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, sent_message_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, edited_message_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, deleted_message_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, created_channel_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, edited_channel_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, deleted_channel_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, channels_reordered_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, edited_guild_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, deleted_guild_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, joined_member_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, left_member_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, profile_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, typing_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, role_created_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, role_deleted_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, role_moved_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, role_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, role_perms_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, user_roles_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, permission_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, emote_pack_added_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, emote_pack_updated_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, emote_pack_deleted_),
  offsetof(::protocol::chat::v1::EventDefaultTypeInternal, emote_pack_emotes_updated_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Event, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild)},
  { 6, -1, sizeof(::protocol::chat::v1::StreamEventsRequest_SubscribeToActions)},
  { 11, -1, sizeof(::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents)},
  { 16, -1, sizeof(::protocol::chat::v1::StreamEventsRequest)},
  { 25, -1, sizeof(::protocol::chat::v1::Event_MessageSent)},
  { 32, -1, sizeof(::protocol::chat::v1::Event_MessageUpdated)},
  { 42, -1, sizeof(::protocol::chat::v1::Event_MessageDeleted)},
  { 50, -1, sizeof(::protocol::chat::v1::Event_ChannelCreated)},
  { 62, -1, sizeof(::protocol::chat::v1::Event_ChannelUpdated)},
  { 76, -1, sizeof(::protocol::chat::v1::Event_ChannelsReordered)},
  { 83, -1, sizeof(::protocol::chat::v1::Event_ChannelDeleted)},
  { 90, -1, sizeof(::protocol::chat::v1::Event_GuildUpdated)},
  { 102, -1, sizeof(::protocol::chat::v1::Event_GuildDeleted)},
  { 108, -1, sizeof(::protocol::chat::v1::Event_MemberJoined)},
  { 115, -1, sizeof(::protocol::chat::v1::Event_MemberLeft)},
  { 123, -1, sizeof(::protocol::chat::v1::Event_GuildAddedToList)},
  { 130, -1, sizeof(::protocol::chat::v1::Event_GuildRemovedFromList)},
  { 137, -1, sizeof(::protocol::chat::v1::Event_ActionPerformed)},
  { 147, -1, sizeof(::protocol::chat::v1::Event_RoleMoved)},
  { 156, -1, sizeof(::protocol::chat::v1::Event_RoleDeleted)},
  { 163, -1, sizeof(::protocol::chat::v1::Event_RoleCreated)},
  { 171, -1, sizeof(::protocol::chat::v1::Event_RoleUpdated)},
  { 179, -1, sizeof(::protocol::chat::v1::Event_RolePermissionsUpdated)},
  { 188, -1, sizeof(::protocol::chat::v1::Event_UserRolesUpdated)},
  { 196, -1, sizeof(::protocol::chat::v1::Event_ProfileUpdated)},
  { 210, -1, sizeof(::protocol::chat::v1::Event_Typing)},
  { 218, -1, sizeof(::protocol::chat::v1::Event_PermissionUpdated)},
  { 227, -1, sizeof(::protocol::chat::v1::Event_EmotePackUpdated)},
  { 235, -1, sizeof(::protocol::chat::v1::Event_EmotePackDeleted)},
  { 241, -1, sizeof(::protocol::chat::v1::Event_EmotePackAdded)},
  { 247, -1, sizeof(::protocol::chat::v1::Event_EmotePackEmotesUpdated)},
  { 255, -1, sizeof(::protocol::chat::v1::Event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToGuild_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToActions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_StreamEventsRequest_SubscribeToHomeserverEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_StreamEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_MessageSent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_MessageUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_MessageDeleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ChannelCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ChannelUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ChannelsReordered_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ChannelDeleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_GuildUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_GuildDeleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_MemberJoined_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_MemberLeft_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_GuildAddedToList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_GuildRemovedFromList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ActionPerformed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_RoleMoved_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_RoleDeleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_RoleCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_RoleUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_RolePermissionsUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_UserRolesUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_ProfileUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_Typing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_PermissionUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_EmotePackUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_EmotePackDeleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_EmotePackAdded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_EmotePackEmotesUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Event_default_instance_),
};

const char descriptor_table_protodef_chat_2fv1_2fstreaming_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027chat/v1/streaming.proto\022\020protocol.chat"
  ".v1\032\033harmonytypes/v1/types.proto\032\037google"
  "/protobuf/timestamp.proto\032\031chat/v1/permi"
  "ssions.proto\032\024chat/v1/emotes.proto\"\230\003\n\023S"
  "treamEventsRequest\022T\n\022subscribe_to_guild"
  "\030\001 \001(\01326.protocol.chat.v1.StreamEventsRe"
  "quest.SubscribeToGuildH\000\022X\n\024subscribe_to"
  "_actions\030\002 \001(\01328.protocol.chat.v1.Stream"
  "EventsRequest.SubscribeToActionsH\000\022k\n\036su"
  "bscribe_to_homeserver_events\030\003 \001(\0132A.pro"
  "tocol.chat.v1.StreamEventsRequest.Subscr"
  "ibeToHomeserverEventsH\000\032$\n\020SubscribeToGu"
  "ild\022\020\n\010guild_id\030\001 \001(\004\032\024\n\022SubscribeToActi"
  "ons\032\035\n\033SubscribeToHomeserverEventsB\t\n\007re"
  "quest\"\303#\n\005Event\022G\n\023guild_added_to_list\030\001"
  " \001(\0132(.protocol.chat.v1.Event.GuildAdded"
  "ToListH\000\022O\n\027guild_removed_from_list\030\002 \001("
  "\0132,.protocol.chat.v1.Event.GuildRemovedF"
  "romListH\000\022C\n\020action_performed\030\003 \001(\0132\'.pr"
  "otocol.chat.v1.Event.ActionPerformedH\000\022;"
  "\n\014sent_message\030\004 \001(\0132#.protocol.chat.v1."
  "Event.MessageSentH\000\022@\n\016edited_message\030\005 "
  "\001(\0132&.protocol.chat.v1.Event.MessageUpda"
  "tedH\000\022A\n\017deleted_message\030\006 \001(\0132&.protoco"
  "l.chat.v1.Event.MessageDeletedH\000\022A\n\017crea"
  "ted_channel\030\007 \001(\0132&.protocol.chat.v1.Eve"
  "nt.ChannelCreatedH\000\022@\n\016edited_channel\030\010 "
  "\001(\0132&.protocol.chat.v1.Event.ChannelUpda"
  "tedH\000\022A\n\017deleted_channel\030\t \001(\0132&.protoco"
  "l.chat.v1.Event.ChannelDeletedH\000\022G\n\022chan"
  "nels_reordered\030\033 \001(\0132).protocol.chat.v1."
  "Event.ChannelsReorderedH\000\022<\n\014edited_guil"
  "d\030\n \001(\0132$.protocol.chat.v1.Event.GuildUp"
  "datedH\000\022=\n\rdeleted_guild\030\013 \001(\0132$.protoco"
  "l.chat.v1.Event.GuildDeletedH\000\022=\n\rjoined"
  "_member\030\014 \001(\0132$.protocol.chat.v1.Event.M"
  "emberJoinedH\000\0229\n\013left_member\030\r \001(\0132\".pro"
  "tocol.chat.v1.Event.MemberLeftH\000\022A\n\017prof"
  "ile_updated\030\016 \001(\0132&.protocol.chat.v1.Eve"
  "nt.ProfileUpdatedH\000\0220\n\006typing\030\017 \001(\0132\036.pr"
  "otocol.chat.v1.Event.TypingH\000\022;\n\014role_cr"
  "eated\030\020 \001(\0132#.protocol.chat.v1.Event.Rol"
  "eCreatedH\000\022;\n\014role_deleted\030\021 \001(\0132#.proto"
  "col.chat.v1.Event.RoleDeletedH\000\0227\n\nrole_"
  "moved\030\022 \001(\0132!.protocol.chat.v1.Event.Rol"
  "eMovedH\000\022;\n\014role_updated\030\023 \001(\0132#.protoco"
  "l.chat.v1.Event.RoleUpdatedH\000\022L\n\022role_pe"
  "rms_updated\030\024 \001(\0132..protocol.chat.v1.Eve"
  "nt.RolePermissionsUpdatedH\000\022F\n\022user_role"
  "s_updated\030\025 \001(\0132(.protocol.chat.v1.Event"
  ".UserRolesUpdatedH\000\022G\n\022permission_update"
  "d\030\026 \001(\0132).protocol.chat.v1.Event.Permiss"
  "ionUpdatedH\000\022B\n\020emote_pack_added\030\027 \001(\0132&"
  ".protocol.chat.v1.Event.EmotePackAddedH\000"
  "\022F\n\022emote_pack_updated\030\030 \001(\0132(.protocol."
  "chat.v1.Event.EmotePackUpdatedH\000\022F\n\022emot"
  "e_pack_deleted\030\031 \001(\0132(.protocol.chat.v1."
  "Event.EmotePackDeletedH\000\022S\n\031emote_pack_e"
  "motes_updated\030\032 \001(\0132..protocol.chat.v1.E"
  "vent.EmotePackEmotesUpdatedH\000\032R\n\013Message"
  "Sent\022\017\n\007echo_id\030\001 \001(\004\0222\n\007message\030\002 \001(\0132!"
  ".protocol.harmonytypes.v1.Message\032\212\001\n\016Me"
  "ssageUpdated\022\020\n\010guild_id\030\001 \001(\004\022\022\n\nchanne"
  "l_id\030\002 \001(\004\022\022\n\nmessage_id\030\003 \001(\004\022-\n\tedited"
  "_at\030\004 \001(\0132\032.google.protobuf.Timestamp\022\017\n"
  "\007content\030\005 \001(\t\032J\n\016MessageDeleted\022\020\n\010guil"
  "d_id\030\001 \001(\004\022\022\n\nchannel_id\030\002 \001(\004\022\022\n\nmessag"
  "e_id\030\003 \001(\004\032\265\001\n\016ChannelCreated\022\020\n\010guild_i"
  "d\030\001 \001(\004\022\022\n\nchannel_id\030\002 \001(\004\022\014\n\004name\030\003 \001("
  "\t\022\023\n\013previous_id\030\004 \001(\004\022\017\n\007next_id\030\005 \001(\004\022"
  "\023\n\013is_category\030\006 \001(\010\0224\n\010metadata\030\007 \001(\0132\""
  ".protocol.harmonytypes.v1.Metadata\032\344\001\n\016C"
  "hannelUpdated\022\020\n\010guild_id\030\001 \001(\004\022\022\n\nchann"
  "el_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\023\n\013update_name"
  "\030\004 \001(\010\022\023\n\013previous_id\030\005 \001(\004\022\017\n\007next_id\030\006"
  " \001(\004\022\024\n\014update_order\030\007 \001(\010\0224\n\010metadata\030\010"
  " \001(\0132\".protocol.harmonytypes.v1.Metadata"
  "\022\027\n\017update_metadata\030\t \001(\010\032:\n\021ChannelsReo"
  "rdered\022\020\n\010guild_id\030\002 \001(\004\022\023\n\013channel_ids\030"
  "\001 \003(\004\0326\n\016ChannelDeleted\022\020\n\010guild_id\030\001 \001("
  "\004\022\022\n\nchannel_id\030\002 \001(\004\032\273\001\n\014GuildUpdated\022\020"
  "\n\010guild_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\023\n\013update"
  "_name\030\003 \001(\010\022\017\n\007picture\030\004 \001(\t\022\026\n\016update_p"
  "icture\030\005 \001(\010\0224\n\010metadata\030\006 \001(\0132\".protoco"
  "l.harmonytypes.v1.Metadata\022\027\n\017update_met"
  "adata\030\007 \001(\010\032 \n\014GuildDeleted\022\020\n\010guild_id\030"
  "\001 \001(\004\0323\n\014MemberJoined\022\021\n\tmember_id\030\001 \001(\004"
  "\022\020\n\010guild_id\030\002 \001(\004\032l\n\nMemberLeft\022\021\n\tmemb"
  "er_id\030\001 \001(\004\022\020\n\010guild_id\030\002 \001(\004\0229\n\014leave_r"
  "eason\030\003 \001(\0162#.protocol.chat.v1.Event.Lea"
  "veReason\0328\n\020GuildAddedToList\022\020\n\010guild_id"
  "\030\001 \001(\004\022\022\n\nhomeserver\030\002 \001(\t\032<\n\024GuildRemov"
  "edFromList\022\020\n\010guild_id\030\001 \001(\004\022\022\n\nhomeserv"
  "er\030\002 \001(\t\032s\n\017ActionPerformed\022\020\n\010guild_id\030"
  "\001 \001(\004\022\022\n\nchannel_id\030\002 \001(\004\022\022\n\nmessage_id\030"
  "\003 \001(\004\022\021\n\taction_id\030\004 \001(\t\022\023\n\013action_data\030"
  "\005 \001(\t\032T\n\tRoleMoved\022\020\n\010guild_id\030\001 \001(\004\022\017\n\007"
  "role_id\030\002 \001(\004\022\023\n\013previous_id\030\003 \001(\004\022\017\n\007ne"
  "xt_id\030\004 \001(\004\0320\n\013RoleDeleted\022\020\n\010guild_id\030\001"
  " \001(\004\022\017\n\007role_id\030\002 \001(\004\032V\n\013RoleCreated\022\020\n\010"
  "guild_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022$\n\004role\030"
  "\003 \001(\0132\026.protocol.chat.v1.Role\032V\n\013RoleUpd"
  "ated\022\020\n\010guild_id\030\001 \001(\004\022\017\n\007role_id\030\003 \001(\004\022"
  "$\n\004role\030\004 \001(\0132\026.protocol.chat.v1.Role\032\200\001"
  "\n\026RolePermissionsUpdated\022\020\n\010guild_id\030\001 \001"
  "(\004\022\022\n\nchannel_id\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\022"
  "/\n\005perms\030\004 \001(\0132 .protocol.chat.v1.Permis"
  "sionList\032G\n\020UserRolesUpdated\022\020\n\010guild_id"
  "\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\020\n\010role_ids\030\003 \003("
  "\004\032\363\001\n\016ProfileUpdated\022\017\n\007user_id\030\001 \001(\004\022\024\n"
  "\014new_username\030\002 \001(\t\022\027\n\017update_username\030\003"
  " \001(\010\022\022\n\nnew_avatar\030\004 \001(\t\022\025\n\rupdate_avata"
  "r\030\005 \001(\010\0228\n\nnew_status\030\006 \001(\0162$.protocol.h"
  "armonytypes.v1.UserStatus\022\025\n\rupdate_stat"
  "us\030\007 \001(\010\022\016\n\006is_bot\030\010 \001(\010\022\025\n\rupdate_is_bo"
  "t\030\t \001(\010\032\?\n\006Typing\022\017\n\007user_id\030\001 \001(\004\022\020\n\010gu"
  "ild_id\030\002 \001(\004\022\022\n\nchannel_id\030\003 \001(\004\032T\n\021Perm"
  "issionUpdated\022\020\n\010guild_id\030\001 \001(\004\022\022\n\nchann"
  "el_id\030\002 \001(\004\022\r\n\005query\030\003 \001(\t\022\n\n\002ok\030\004 \001(\010\032P"
  "\n\020EmotePackUpdated\022\017\n\007pack_id\030\001 \001(\004\022\021\n\tp"
  "ack_name\030\002 \001(\t\022\030\n\020update_pack_name\030\003 \001(\010"
  "\032#\n\020EmotePackDeleted\022\017\n\007pack_id\030\001 \001(\004\032;\n"
  "\016EmotePackAdded\022)\n\004pack\030\001 \001(\0132\033.protocol"
  ".chat.v1.EmotePack\032p\n\026EmotePackEmotesUpd"
  "ated\022\017\n\007pack_id\030\001 \001(\004\022-\n\014added_emotes\030\002 "
  "\003(\0132\027.protocol.chat.v1.Emote\022\026\n\016deleted_"
  "emotes\030\003 \003(\t\"4\n\013LeaveReason\022\r\n\twillingly"
  "\020\000\022\n\n\006banned\020\001\022\n\n\006kicked\020\002B\007\n\005eventB3Z1g"
  "ithub.com/harmony-development/legato/gen"
  "/chat/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2fv1_2fstreaming_2eproto_deps[4] = {
  &::descriptor_table_chat_2fv1_2femotes_2eproto,
  &::descriptor_table_chat_2fv1_2fpermissions_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2fv1_2fstreaming_2eproto_sccs[32] = {
  &scc_info_Event_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto.base,
  &scc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2fv1_2fstreaming_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fstreaming_2eproto = {
  false, false, descriptor_table_protodef_chat_2fv1_2fstreaming_2eproto, "chat/v1/streaming.proto", 5176,
  &descriptor_table_chat_2fv1_2fstreaming_2eproto_once, descriptor_table_chat_2fv1_2fstreaming_2eproto_sccs, descriptor_table_chat_2fv1_2fstreaming_2eproto_deps, 32, 4,
  schemas, file_default_instances, TableStruct_chat_2fv1_2fstreaming_2eproto::offsets,
  file_level_metadata_chat_2fv1_2fstreaming_2eproto, 32, file_level_enum_descriptors_chat_2fv1_2fstreaming_2eproto, file_level_service_descriptors_chat_2fv1_2fstreaming_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2fv1_2fstreaming_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2fv1_2fstreaming_2eproto)), true);
namespace protocol {
namespace chat {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_LeaveReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2fv1_2fstreaming_2eproto);
  return file_level_enum_descriptors_chat_2fv1_2fstreaming_2eproto[0];
}
bool Event_LeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Event_LeaveReason Event::willingly;
constexpr Event_LeaveReason Event::banned;
constexpr Event_LeaveReason Event::kicked;
constexpr Event_LeaveReason Event::LeaveReason_MIN;
constexpr Event_LeaveReason Event::LeaveReason_MAX;
constexpr int Event::LeaveReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StreamEventsRequest_SubscribeToGuild::InitAsDefaultInstance() {
}
class StreamEventsRequest_SubscribeToGuild::_Internal {
 public:
};

StreamEventsRequest_SubscribeToGuild::StreamEventsRequest_SubscribeToGuild(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
}
StreamEventsRequest_SubscribeToGuild::StreamEventsRequest_SubscribeToGuild(const StreamEventsRequest_SubscribeToGuild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
}

void StreamEventsRequest_SubscribeToGuild::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

StreamEventsRequest_SubscribeToGuild::~StreamEventsRequest_SubscribeToGuild() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamEventsRequest_SubscribeToGuild::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamEventsRequest_SubscribeToGuild::ArenaDtor(void* object) {
  StreamEventsRequest_SubscribeToGuild* _this = reinterpret_cast< StreamEventsRequest_SubscribeToGuild* >(object);
  (void)_this;
}
void StreamEventsRequest_SubscribeToGuild::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamEventsRequest_SubscribeToGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventsRequest_SubscribeToGuild& StreamEventsRequest_SubscribeToGuild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventsRequest_SubscribeToGuild_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void StreamEventsRequest_SubscribeToGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamEventsRequest_SubscribeToGuild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventsRequest_SubscribeToGuild::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  return target;
}

size_t StreamEventsRequest_SubscribeToGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventsRequest_SubscribeToGuild::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventsRequest_SubscribeToGuild* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventsRequest_SubscribeToGuild>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
    MergeFrom(*source);
  }
}

void StreamEventsRequest_SubscribeToGuild::MergeFrom(const StreamEventsRequest_SubscribeToGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void StreamEventsRequest_SubscribeToGuild::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventsRequest_SubscribeToGuild::CopyFrom(const StreamEventsRequest_SubscribeToGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventsRequest_SubscribeToGuild::IsInitialized() const {
  return true;
}

void StreamEventsRequest_SubscribeToGuild::InternalSwap(StreamEventsRequest_SubscribeToGuild* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventsRequest_SubscribeToGuild::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamEventsRequest_SubscribeToActions::InitAsDefaultInstance() {
}
class StreamEventsRequest_SubscribeToActions::_Internal {
 public:
};

StreamEventsRequest_SubscribeToActions::StreamEventsRequest_SubscribeToActions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
}
StreamEventsRequest_SubscribeToActions::StreamEventsRequest_SubscribeToActions(const StreamEventsRequest_SubscribeToActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
}

void StreamEventsRequest_SubscribeToActions::SharedCtor() {
}

StreamEventsRequest_SubscribeToActions::~StreamEventsRequest_SubscribeToActions() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamEventsRequest_SubscribeToActions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamEventsRequest_SubscribeToActions::ArenaDtor(void* object) {
  StreamEventsRequest_SubscribeToActions* _this = reinterpret_cast< StreamEventsRequest_SubscribeToActions* >(object);
  (void)_this;
}
void StreamEventsRequest_SubscribeToActions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamEventsRequest_SubscribeToActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventsRequest_SubscribeToActions& StreamEventsRequest_SubscribeToActions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventsRequest_SubscribeToActions_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void StreamEventsRequest_SubscribeToActions::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamEventsRequest_SubscribeToActions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventsRequest_SubscribeToActions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  return target;
}

size_t StreamEventsRequest_SubscribeToActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventsRequest_SubscribeToActions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventsRequest_SubscribeToActions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventsRequest_SubscribeToActions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
    MergeFrom(*source);
  }
}

void StreamEventsRequest_SubscribeToActions::MergeFrom(const StreamEventsRequest_SubscribeToActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StreamEventsRequest_SubscribeToActions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventsRequest_SubscribeToActions::CopyFrom(const StreamEventsRequest_SubscribeToActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventsRequest_SubscribeToActions::IsInitialized() const {
  return true;
}

void StreamEventsRequest_SubscribeToActions::InternalSwap(StreamEventsRequest_SubscribeToActions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventsRequest_SubscribeToActions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamEventsRequest_SubscribeToHomeserverEvents::InitAsDefaultInstance() {
}
class StreamEventsRequest_SubscribeToHomeserverEvents::_Internal {
 public:
};

StreamEventsRequest_SubscribeToHomeserverEvents::StreamEventsRequest_SubscribeToHomeserverEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
}
StreamEventsRequest_SubscribeToHomeserverEvents::StreamEventsRequest_SubscribeToHomeserverEvents(const StreamEventsRequest_SubscribeToHomeserverEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
}

void StreamEventsRequest_SubscribeToHomeserverEvents::SharedCtor() {
}

StreamEventsRequest_SubscribeToHomeserverEvents::~StreamEventsRequest_SubscribeToHomeserverEvents() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamEventsRequest_SubscribeToHomeserverEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamEventsRequest_SubscribeToHomeserverEvents::ArenaDtor(void* object) {
  StreamEventsRequest_SubscribeToHomeserverEvents* _this = reinterpret_cast< StreamEventsRequest_SubscribeToHomeserverEvents* >(object);
  (void)_this;
}
void StreamEventsRequest_SubscribeToHomeserverEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamEventsRequest_SubscribeToHomeserverEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventsRequest_SubscribeToHomeserverEvents& StreamEventsRequest_SubscribeToHomeserverEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventsRequest_SubscribeToHomeserverEvents_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void StreamEventsRequest_SubscribeToHomeserverEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamEventsRequest_SubscribeToHomeserverEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventsRequest_SubscribeToHomeserverEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  return target;
}

size_t StreamEventsRequest_SubscribeToHomeserverEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventsRequest_SubscribeToHomeserverEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventsRequest_SubscribeToHomeserverEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventsRequest_SubscribeToHomeserverEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
    MergeFrom(*source);
  }
}

void StreamEventsRequest_SubscribeToHomeserverEvents::MergeFrom(const StreamEventsRequest_SubscribeToHomeserverEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StreamEventsRequest_SubscribeToHomeserverEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventsRequest_SubscribeToHomeserverEvents::CopyFrom(const StreamEventsRequest_SubscribeToHomeserverEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventsRequest_SubscribeToHomeserverEvents::IsInitialized() const {
  return true;
}

void StreamEventsRequest_SubscribeToHomeserverEvents::InternalSwap(StreamEventsRequest_SubscribeToHomeserverEvents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventsRequest_SubscribeToHomeserverEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamEventsRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_StreamEventsRequest_default_instance_.subscribe_to_guild_ = const_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild*>(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild::internal_default_instance());
  ::protocol::chat::v1::_StreamEventsRequest_default_instance_.subscribe_to_actions_ = const_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions*>(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions::internal_default_instance());
  ::protocol::chat::v1::_StreamEventsRequest_default_instance_.subscribe_to_homeserver_events_ = const_cast< ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents*>(
      ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents::internal_default_instance());
}
class StreamEventsRequest::_Internal {
 public:
  static const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild& subscribe_to_guild(const StreamEventsRequest* msg);
  static const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions& subscribe_to_actions(const StreamEventsRequest* msg);
  static const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents& subscribe_to_homeserver_events(const StreamEventsRequest* msg);
};

const ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild&
StreamEventsRequest::_Internal::subscribe_to_guild(const StreamEventsRequest* msg) {
  return *msg->request_.subscribe_to_guild_;
}
const ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions&
StreamEventsRequest::_Internal::subscribe_to_actions(const StreamEventsRequest* msg) {
  return *msg->request_.subscribe_to_actions_;
}
const ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents&
StreamEventsRequest::_Internal::subscribe_to_homeserver_events(const StreamEventsRequest* msg) {
  return *msg->request_.subscribe_to_homeserver_events_;
}
void StreamEventsRequest::set_allocated_subscribe_to_guild(::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* subscribe_to_guild) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (subscribe_to_guild) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscribe_to_guild);
    if (message_arena != submessage_arena) {
      subscribe_to_guild = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_to_guild, submessage_arena);
    }
    set_has_subscribe_to_guild();
    request_.subscribe_to_guild_ = subscribe_to_guild;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_guild)
}
void StreamEventsRequest::set_allocated_subscribe_to_actions(::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* subscribe_to_actions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (subscribe_to_actions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscribe_to_actions);
    if (message_arena != submessage_arena) {
      subscribe_to_actions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_to_actions, submessage_arena);
    }
    set_has_subscribe_to_actions();
    request_.subscribe_to_actions_ = subscribe_to_actions;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_actions)
}
void StreamEventsRequest::set_allocated_subscribe_to_homeserver_events(::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* subscribe_to_homeserver_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (subscribe_to_homeserver_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subscribe_to_homeserver_events);
    if (message_arena != submessage_arena) {
      subscribe_to_homeserver_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe_to_homeserver_events, submessage_arena);
    }
    set_has_subscribe_to_homeserver_events();
    request_.subscribe_to_homeserver_events_ = subscribe_to_homeserver_events;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.StreamEventsRequest.subscribe_to_homeserver_events)
}
StreamEventsRequest::StreamEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.StreamEventsRequest)
}
StreamEventsRequest::StreamEventsRequest(const StreamEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSubscribeToGuild: {
      _internal_mutable_subscribe_to_guild()->::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild::MergeFrom(from._internal_subscribe_to_guild());
      break;
    }
    case kSubscribeToActions: {
      _internal_mutable_subscribe_to_actions()->::protocol::chat::v1::StreamEventsRequest_SubscribeToActions::MergeFrom(from._internal_subscribe_to_actions());
      break;
    }
    case kSubscribeToHomeserverEvents: {
      _internal_mutable_subscribe_to_homeserver_events()->::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents::MergeFrom(from._internal_subscribe_to_homeserver_events());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.StreamEventsRequest)
}

void StreamEventsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto.base);
  clear_has_request();
}

StreamEventsRequest::~StreamEventsRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.StreamEventsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void StreamEventsRequest::ArenaDtor(void* object) {
  StreamEventsRequest* _this = reinterpret_cast< StreamEventsRequest* >(object);
  (void)_this;
}
void StreamEventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamEventsRequest& StreamEventsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamEventsRequest_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void StreamEventsRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:protocol.chat.v1.StreamEventsRequest)
  switch (request_case()) {
    case kSubscribeToGuild: {
      if (GetArena() == nullptr) {
        delete request_.subscribe_to_guild_;
      }
      break;
    }
    case kSubscribeToActions: {
      if (GetArena() == nullptr) {
        delete request_.subscribe_to_actions_;
      }
      break;
    }
    case kSubscribeToHomeserverEvents: {
      if (GetArena() == nullptr) {
        delete request_.subscribe_to_homeserver_events_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void StreamEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.StreamEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_to_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_to_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_to_homeserver_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.StreamEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
  if (_internal_has_subscribe_to_guild()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscribe_to_guild(this), target, stream);
  }

  // .protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
  if (_internal_has_subscribe_to_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subscribe_to_actions(this), target, stream);
  }

  // .protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
  if (_internal_has_subscribe_to_homeserver_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::subscribe_to_homeserver_events(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.StreamEventsRequest)
  return target;
}

size_t StreamEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.StreamEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .protocol.chat.v1.StreamEventsRequest.SubscribeToGuild subscribe_to_guild = 1;
    case kSubscribeToGuild: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.subscribe_to_guild_);
      break;
    }
    // .protocol.chat.v1.StreamEventsRequest.SubscribeToActions subscribe_to_actions = 2;
    case kSubscribeToActions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.subscribe_to_actions_);
      break;
    }
    // .protocol.chat.v1.StreamEventsRequest.SubscribeToHomeserverEvents subscribe_to_homeserver_events = 3;
    case kSubscribeToHomeserverEvents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.subscribe_to_homeserver_events_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamEventsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.StreamEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamEventsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamEventsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.StreamEventsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.StreamEventsRequest)
    MergeFrom(*source);
  }
}

void StreamEventsRequest::MergeFrom(const StreamEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.StreamEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSubscribeToGuild: {
      _internal_mutable_subscribe_to_guild()->::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild::MergeFrom(from._internal_subscribe_to_guild());
      break;
    }
    case kSubscribeToActions: {
      _internal_mutable_subscribe_to_actions()->::protocol::chat::v1::StreamEventsRequest_SubscribeToActions::MergeFrom(from._internal_subscribe_to_actions());
      break;
    }
    case kSubscribeToHomeserverEvents: {
      _internal_mutable_subscribe_to_homeserver_events()->::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents::MergeFrom(from._internal_subscribe_to_homeserver_events());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamEventsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.StreamEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventsRequest::CopyFrom(const StreamEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.StreamEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventsRequest::IsInitialized() const {
  return true;
}

void StreamEventsRequest::InternalSwap(StreamEventsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamEventsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_MessageSent::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_MessageSent_default_instance_._instance.get_mutable()->message_ = const_cast< ::protocol::harmonytypes::v1::Message*>(
      ::protocol::harmonytypes::v1::Message::internal_default_instance());
}
class Event_MessageSent::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Message& message(const Event_MessageSent* msg);
};

const ::protocol::harmonytypes::v1::Message&
Event_MessageSent::_Internal::message(const Event_MessageSent* msg) {
  return *msg->message_;
}
void Event_MessageSent::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
Event_MessageSent::Event_MessageSent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.MessageSent)
}
Event_MessageSent::Event_MessageSent(const Event_MessageSent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::protocol::harmonytypes::v1::Message(*from.message_);
  } else {
    message_ = nullptr;
  }
  echo_id_ = from.echo_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.MessageSent)
}

void Event_MessageSent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto.base);
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&echo_id_) -
      reinterpret_cast<char*>(&message_)) + sizeof(echo_id_));
}

Event_MessageSent::~Event_MessageSent() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.MessageSent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_MessageSent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void Event_MessageSent::ArenaDtor(void* object) {
  Event_MessageSent* _this = reinterpret_cast< Event_MessageSent* >(object);
  (void)_this;
}
void Event_MessageSent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_MessageSent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_MessageSent& Event_MessageSent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_MessageSent_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_MessageSent::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.MessageSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  echo_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_MessageSent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 echo_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          echo_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Message message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_MessageSent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.MessageSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 echo_id = 1;
  if (this->echo_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_echo_id(), target);
  }

  // .protocol.harmonytypes.v1.Message message = 2;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.MessageSent)
  return target;
}

size_t Event_MessageSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.MessageSent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.harmonytypes.v1.Message message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // uint64 echo_id = 1;
  if (this->echo_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_echo_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_MessageSent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.MessageSent)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_MessageSent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_MessageSent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.MessageSent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.MessageSent)
    MergeFrom(*source);
  }
}

void Event_MessageSent::MergeFrom(const Event_MessageSent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.MessageSent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _internal_mutable_message()->::protocol::harmonytypes::v1::Message::MergeFrom(from._internal_message());
  }
  if (from.echo_id() != 0) {
    _internal_set_echo_id(from._internal_echo_id());
  }
}

void Event_MessageSent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.MessageSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_MessageSent::CopyFrom(const Event_MessageSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.MessageSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_MessageSent::IsInitialized() const {
  return true;
}

void Event_MessageSent::InternalSwap(Event_MessageSent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_MessageSent, echo_id_)
      + sizeof(Event_MessageSent::echo_id_)
      - PROTOBUF_FIELD_OFFSET(Event_MessageSent, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_MessageSent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_MessageUpdated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_MessageUpdated_default_instance_._instance.get_mutable()->edited_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Event_MessageUpdated::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edited_at(const Event_MessageUpdated* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Event_MessageUpdated::_Internal::edited_at(const Event_MessageUpdated* msg) {
  return *msg->edited_at_;
}
void Event_MessageUpdated::clear_edited_at() {
  if (GetArena() == nullptr && edited_at_ != nullptr) {
    delete edited_at_;
  }
  edited_at_ = nullptr;
}
Event_MessageUpdated::Event_MessageUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.MessageUpdated)
}
Event_MessageUpdated::Event_MessageUpdated(const Event_MessageUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  if (from._internal_has_edited_at()) {
    edited_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edited_at_);
  } else {
    edited_at_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.MessageUpdated)
}

void Event_MessageUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&edited_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&edited_at_)) + sizeof(message_id_));
}

Event_MessageUpdated::~Event_MessageUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.MessageUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_MessageUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete edited_at_;
}

void Event_MessageUpdated::ArenaDtor(void* object) {
  Event_MessageUpdated* _this = reinterpret_cast< Event_MessageUpdated* >(object);
  (void)_this;
}
void Event_MessageUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_MessageUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_MessageUpdated& Event_MessageUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_MessageUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_MessageUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.MessageUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && edited_at_ != nullptr) {
    delete edited_at_;
  }
  edited_at_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_MessageUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edited_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_edited_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.MessageUpdated.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_MessageUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.MessageUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  // .google.protobuf.Timestamp edited_at = 4;
  if (this->has_edited_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::edited_at(this), target, stream);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.MessageUpdated.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.MessageUpdated)
  return target;
}

size_t Event_MessageUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.MessageUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .google.protobuf.Timestamp edited_at = 4;
  if (this->has_edited_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edited_at_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_MessageUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.MessageUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_MessageUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_MessageUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.MessageUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.MessageUpdated)
    MergeFrom(*source);
  }
}

void Event_MessageUpdated::MergeFrom(const Event_MessageUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.MessageUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.has_edited_at()) {
    _internal_mutable_edited_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edited_at());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void Event_MessageUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.MessageUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_MessageUpdated::CopyFrom(const Event_MessageUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.MessageUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_MessageUpdated::IsInitialized() const {
  return true;
}

void Event_MessageUpdated::InternalSwap(Event_MessageUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_MessageUpdated, message_id_)
      + sizeof(Event_MessageUpdated::message_id_)
      - PROTOBUF_FIELD_OFFSET(Event_MessageUpdated, edited_at_)>(
          reinterpret_cast<char*>(&edited_at_),
          reinterpret_cast<char*>(&other->edited_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_MessageUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_MessageDeleted::InitAsDefaultInstance() {
}
class Event_MessageDeleted::_Internal {
 public:
};

Event_MessageDeleted::Event_MessageDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.MessageDeleted)
}
Event_MessageDeleted::Event_MessageDeleted(const Event_MessageDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.MessageDeleted)
}

void Event_MessageDeleted::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

Event_MessageDeleted::~Event_MessageDeleted() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.MessageDeleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_MessageDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_MessageDeleted::ArenaDtor(void* object) {
  Event_MessageDeleted* _this = reinterpret_cast< Event_MessageDeleted* >(object);
  (void)_this;
}
void Event_MessageDeleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_MessageDeleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_MessageDeleted& Event_MessageDeleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_MessageDeleted_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_MessageDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.MessageDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_MessageDeleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_MessageDeleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.MessageDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.MessageDeleted)
  return target;
}

size_t Event_MessageDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.MessageDeleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_MessageDeleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.MessageDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_MessageDeleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_MessageDeleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.MessageDeleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.MessageDeleted)
    MergeFrom(*source);
  }
}

void Event_MessageDeleted::MergeFrom(const Event_MessageDeleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.MessageDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void Event_MessageDeleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.MessageDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_MessageDeleted::CopyFrom(const Event_MessageDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.MessageDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_MessageDeleted::IsInitialized() const {
  return true;
}

void Event_MessageDeleted::InternalSwap(Event_MessageDeleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_MessageDeleted, message_id_)
      + sizeof(Event_MessageDeleted::message_id_)
      - PROTOBUF_FIELD_OFFSET(Event_MessageDeleted, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_MessageDeleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ChannelCreated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_ChannelCreated_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class Event_ChannelCreated::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const Event_ChannelCreated* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
Event_ChannelCreated::_Internal::metadata(const Event_ChannelCreated* msg) {
  return *msg->metadata_;
}
void Event_ChannelCreated::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Event_ChannelCreated::Event_ChannelCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ChannelCreated)
}
Event_ChannelCreated::Event_ChannelCreated(const Event_ChannelCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_category_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(is_category_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ChannelCreated)
}

void Event_ChannelCreated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(is_category_));
}

Event_ChannelCreated::~Event_ChannelCreated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ChannelCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ChannelCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void Event_ChannelCreated::ArenaDtor(void* object) {
  Event_ChannelCreated* _this = reinterpret_cast< Event_ChannelCreated* >(object);
  (void)_this;
}
void Event_ChannelCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ChannelCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ChannelCreated& Event_ChannelCreated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ChannelCreated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ChannelCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ChannelCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(is_category_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ChannelCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ChannelCreated.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 previous_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          previous_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_category = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ChannelCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ChannelCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ChannelCreated.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint64 previous_id = 4;
  if (this->previous_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_previous_id(), target);
  }

  // uint64 next_id = 5;
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_next_id(), target);
  }

  // bool is_category = 6;
  if (this->is_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_category(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 7;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ChannelCreated)
  return target;
}

size_t Event_ChannelCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ChannelCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 7;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 previous_id = 4;
  if (this->previous_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_previous_id());
  }

  // uint64 next_id = 5;
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  // bool is_category = 6;
  if (this->is_category() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ChannelCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ChannelCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ChannelCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ChannelCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ChannelCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ChannelCreated)
    MergeFrom(*source);
  }
}

void Event_ChannelCreated::MergeFrom(const Event_ChannelCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ChannelCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.previous_id() != 0) {
    _internal_set_previous_id(from._internal_previous_id());
  }
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
  if (from.is_category() != 0) {
    _internal_set_is_category(from._internal_is_category());
  }
}

void Event_ChannelCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ChannelCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ChannelCreated::CopyFrom(const Event_ChannelCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ChannelCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ChannelCreated::IsInitialized() const {
  return true;
}

void Event_ChannelCreated::InternalSwap(Event_ChannelCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_ChannelCreated, is_category_)
      + sizeof(Event_ChannelCreated::is_category_)
      - PROTOBUF_FIELD_OFFSET(Event_ChannelCreated, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ChannelCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ChannelUpdated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_ChannelUpdated_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class Event_ChannelUpdated::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const Event_ChannelUpdated* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
Event_ChannelUpdated::_Internal::metadata(const Event_ChannelUpdated* msg) {
  return *msg->metadata_;
}
void Event_ChannelUpdated::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Event_ChannelUpdated::Event_ChannelUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ChannelUpdated)
}
Event_ChannelUpdated::Event_ChannelUpdated(const Event_ChannelUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_metadata_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ChannelUpdated)
}

void Event_ChannelUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(update_metadata_));
}

Event_ChannelUpdated::~Event_ChannelUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ChannelUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ChannelUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void Event_ChannelUpdated::ArenaDtor(void* object) {
  Event_ChannelUpdated* _this = reinterpret_cast< Event_ChannelUpdated* >(object);
  (void)_this;
}
void Event_ChannelUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ChannelUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ChannelUpdated& Event_ChannelUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ChannelUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ChannelUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ChannelUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ChannelUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ChannelUpdated.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 previous_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          previous_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_order = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          update_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          update_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ChannelUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ChannelUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ChannelUpdated.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bool update_name = 4;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_name(), target);
  }

  // uint64 previous_id = 5;
  if (this->previous_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_previous_id(), target);
  }

  // uint64 next_id = 6;
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_next_id(), target);
  }

  // bool update_order = 7;
  if (this->update_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_update_order(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 8;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::metadata(this), target, stream);
  }

  // bool update_metadata = 9;
  if (this->update_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_update_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ChannelUpdated)
  return target;
}

size_t Event_ChannelUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ChannelUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 8;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 previous_id = 5;
  if (this->previous_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_previous_id());
  }

  // uint64 next_id = 6;
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  // bool update_name = 4;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_order = 7;
  if (this->update_order() != 0) {
    total_size += 1 + 1;
  }

  // bool update_metadata = 9;
  if (this->update_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ChannelUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ChannelUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ChannelUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ChannelUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ChannelUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ChannelUpdated)
    MergeFrom(*source);
  }
}

void Event_ChannelUpdated::MergeFrom(const Event_ChannelUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ChannelUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.previous_id() != 0) {
    _internal_set_previous_id(from._internal_previous_id());
  }
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_order() != 0) {
    _internal_set_update_order(from._internal_update_order());
  }
  if (from.update_metadata() != 0) {
    _internal_set_update_metadata(from._internal_update_metadata());
  }
}

void Event_ChannelUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ChannelUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ChannelUpdated::CopyFrom(const Event_ChannelUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ChannelUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ChannelUpdated::IsInitialized() const {
  return true;
}

void Event_ChannelUpdated::InternalSwap(Event_ChannelUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_ChannelUpdated, update_metadata_)
      + sizeof(Event_ChannelUpdated::update_metadata_)
      - PROTOBUF_FIELD_OFFSET(Event_ChannelUpdated, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ChannelUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ChannelsReordered::InitAsDefaultInstance() {
}
class Event_ChannelsReordered::_Internal {
 public:
};

Event_ChannelsReordered::Event_ChannelsReordered(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channel_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ChannelsReordered)
}
Event_ChannelsReordered::Event_ChannelsReordered(const Event_ChannelsReordered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_ids_(from.channel_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ChannelsReordered)
}

void Event_ChannelsReordered::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

Event_ChannelsReordered::~Event_ChannelsReordered() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ChannelsReordered)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ChannelsReordered::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_ChannelsReordered::ArenaDtor(void* object) {
  Event_ChannelsReordered* _this = reinterpret_cast< Event_ChannelsReordered* >(object);
  (void)_this;
}
void Event_ChannelsReordered::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ChannelsReordered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ChannelsReordered& Event_ChannelsReordered::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ChannelsReordered_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ChannelsReordered::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ChannelsReordered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_ids_.Clear();
  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ChannelsReordered::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 channel_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_channel_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channel_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ChannelsReordered::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ChannelsReordered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 channel_ids = 1;
  {
    int byte_size = _channel_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_channel_ids(), byte_size, target);
    }
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ChannelsReordered)
  return target;
}

size_t Event_ChannelsReordered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ChannelsReordered)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 channel_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->channel_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ChannelsReordered::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ChannelsReordered)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ChannelsReordered* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ChannelsReordered>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ChannelsReordered)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ChannelsReordered)
    MergeFrom(*source);
  }
}

void Event_ChannelsReordered::MergeFrom(const Event_ChannelsReordered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ChannelsReordered)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_ids_.MergeFrom(from.channel_ids_);
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void Event_ChannelsReordered::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ChannelsReordered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ChannelsReordered::CopyFrom(const Event_ChannelsReordered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ChannelsReordered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ChannelsReordered::IsInitialized() const {
  return true;
}

void Event_ChannelsReordered::InternalSwap(Event_ChannelsReordered* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_ids_.InternalSwap(&other->channel_ids_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ChannelsReordered::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ChannelDeleted::InitAsDefaultInstance() {
}
class Event_ChannelDeleted::_Internal {
 public:
};

Event_ChannelDeleted::Event_ChannelDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ChannelDeleted)
}
Event_ChannelDeleted::Event_ChannelDeleted(const Event_ChannelDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ChannelDeleted)
}

void Event_ChannelDeleted::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
}

Event_ChannelDeleted::~Event_ChannelDeleted() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ChannelDeleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ChannelDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_ChannelDeleted::ArenaDtor(void* object) {
  Event_ChannelDeleted* _this = reinterpret_cast< Event_ChannelDeleted* >(object);
  (void)_this;
}
void Event_ChannelDeleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ChannelDeleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ChannelDeleted& Event_ChannelDeleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ChannelDeleted_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ChannelDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ChannelDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ChannelDeleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ChannelDeleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ChannelDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ChannelDeleted)
  return target;
}

size_t Event_ChannelDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ChannelDeleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ChannelDeleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ChannelDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ChannelDeleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ChannelDeleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ChannelDeleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ChannelDeleted)
    MergeFrom(*source);
  }
}

void Event_ChannelDeleted::MergeFrom(const Event_ChannelDeleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ChannelDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void Event_ChannelDeleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ChannelDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ChannelDeleted::CopyFrom(const Event_ChannelDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ChannelDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ChannelDeleted::IsInitialized() const {
  return true;
}

void Event_ChannelDeleted::InternalSwap(Event_ChannelDeleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_ChannelDeleted, channel_id_)
      + sizeof(Event_ChannelDeleted::channel_id_)
      - PROTOBUF_FIELD_OFFSET(Event_ChannelDeleted, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ChannelDeleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_GuildUpdated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_GuildUpdated_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class Event_GuildUpdated::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const Event_GuildUpdated* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
Event_GuildUpdated::_Internal::metadata(const Event_GuildUpdated* msg) {
  return *msg->metadata_;
}
void Event_GuildUpdated::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
Event_GuildUpdated::Event_GuildUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.GuildUpdated)
}
Event_GuildUpdated::Event_GuildUpdated(const Event_GuildUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_picture().empty()) {
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_picture(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_metadata_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.GuildUpdated)
}

void Event_GuildUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(update_metadata_));
}

Event_GuildUpdated::~Event_GuildUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.GuildUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_GuildUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void Event_GuildUpdated::ArenaDtor(void* object) {
  Event_GuildUpdated* _this = reinterpret_cast< Event_GuildUpdated* >(object);
  (void)_this;
}
void Event_GuildUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_GuildUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_GuildUpdated& Event_GuildUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_GuildUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_GuildUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.GuildUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_GuildUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.GuildUpdated.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string picture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_picture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.GuildUpdated.picture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_picture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          update_picture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          update_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_GuildUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.GuildUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.GuildUpdated.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool update_name = 3;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_name(), target);
  }

  // string picture = 4;
  if (this->picture().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picture().data(), static_cast<int>(this->_internal_picture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.GuildUpdated.picture");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_picture(), target);
  }

  // bool update_picture = 5;
  if (this->update_picture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_update_picture(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metadata(this), target, stream);
  }

  // bool update_metadata = 7;
  if (this->update_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_update_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.GuildUpdated)
  return target;
}

size_t Event_GuildUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.GuildUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string picture = 4;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picture());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // bool update_name = 3;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_picture = 5;
  if (this->update_picture() != 0) {
    total_size += 1 + 1;
  }

  // bool update_metadata = 7;
  if (this->update_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_GuildUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.GuildUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_GuildUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_GuildUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.GuildUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.GuildUpdated)
    MergeFrom(*source);
  }
}

void Event_GuildUpdated::MergeFrom(const Event_GuildUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.GuildUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.picture().size() > 0) {
    _internal_set_picture(from._internal_picture());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_picture() != 0) {
    _internal_set_update_picture(from._internal_update_picture());
  }
  if (from.update_metadata() != 0) {
    _internal_set_update_metadata(from._internal_update_metadata());
  }
}

void Event_GuildUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.GuildUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_GuildUpdated::CopyFrom(const Event_GuildUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.GuildUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_GuildUpdated::IsInitialized() const {
  return true;
}

void Event_GuildUpdated::InternalSwap(Event_GuildUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  picture_.Swap(&other->picture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_GuildUpdated, update_metadata_)
      + sizeof(Event_GuildUpdated::update_metadata_)
      - PROTOBUF_FIELD_OFFSET(Event_GuildUpdated, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_GuildUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_GuildDeleted::InitAsDefaultInstance() {
}
class Event_GuildDeleted::_Internal {
 public:
};

Event_GuildDeleted::Event_GuildDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.GuildDeleted)
}
Event_GuildDeleted::Event_GuildDeleted(const Event_GuildDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.GuildDeleted)
}

void Event_GuildDeleted::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

Event_GuildDeleted::~Event_GuildDeleted() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.GuildDeleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_GuildDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_GuildDeleted::ArenaDtor(void* object) {
  Event_GuildDeleted* _this = reinterpret_cast< Event_GuildDeleted* >(object);
  (void)_this;
}
void Event_GuildDeleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_GuildDeleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_GuildDeleted& Event_GuildDeleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_GuildDeleted_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_GuildDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.GuildDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_GuildDeleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_GuildDeleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.GuildDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.GuildDeleted)
  return target;
}

size_t Event_GuildDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.GuildDeleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_GuildDeleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.GuildDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_GuildDeleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_GuildDeleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.GuildDeleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.GuildDeleted)
    MergeFrom(*source);
  }
}

void Event_GuildDeleted::MergeFrom(const Event_GuildDeleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.GuildDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void Event_GuildDeleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.GuildDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_GuildDeleted::CopyFrom(const Event_GuildDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.GuildDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_GuildDeleted::IsInitialized() const {
  return true;
}

void Event_GuildDeleted::InternalSwap(Event_GuildDeleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_GuildDeleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_MemberJoined::InitAsDefaultInstance() {
}
class Event_MemberJoined::_Internal {
 public:
};

Event_MemberJoined::Event_MemberJoined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.MemberJoined)
}
Event_MemberJoined::Event_MemberJoined(const Event_MemberJoined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(guild_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.MemberJoined)
}

void Event_MemberJoined::SharedCtor() {
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(guild_id_));
}

Event_MemberJoined::~Event_MemberJoined() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.MemberJoined)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_MemberJoined::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_MemberJoined::ArenaDtor(void* object) {
  Event_MemberJoined* _this = reinterpret_cast< Event_MemberJoined* >(object);
  (void)_this;
}
void Event_MemberJoined::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_MemberJoined::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_MemberJoined& Event_MemberJoined::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_MemberJoined_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_MemberJoined::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.MemberJoined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(guild_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_MemberJoined::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_MemberJoined::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.MemberJoined)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_id(), target);
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.MemberJoined)
  return target;
}

size_t Event_MemberJoined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.MemberJoined)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_MemberJoined::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.MemberJoined)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_MemberJoined* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_MemberJoined>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.MemberJoined)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.MemberJoined)
    MergeFrom(*source);
  }
}

void Event_MemberJoined::MergeFrom(const Event_MemberJoined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.MemberJoined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void Event_MemberJoined::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.MemberJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_MemberJoined::CopyFrom(const Event_MemberJoined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.MemberJoined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_MemberJoined::IsInitialized() const {
  return true;
}

void Event_MemberJoined::InternalSwap(Event_MemberJoined* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_MemberJoined, guild_id_)
      + sizeof(Event_MemberJoined::guild_id_)
      - PROTOBUF_FIELD_OFFSET(Event_MemberJoined, member_id_)>(
          reinterpret_cast<char*>(&member_id_),
          reinterpret_cast<char*>(&other->member_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_MemberJoined::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_MemberLeft::InitAsDefaultInstance() {
}
class Event_MemberLeft::_Internal {
 public:
};

Event_MemberLeft::Event_MemberLeft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.MemberLeft)
}
Event_MemberLeft::Event_MemberLeft(const Event_MemberLeft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leave_reason_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(leave_reason_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.MemberLeft)
}

void Event_MemberLeft::SharedCtor() {
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_reason_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leave_reason_));
}

Event_MemberLeft::~Event_MemberLeft() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.MemberLeft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_MemberLeft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_MemberLeft::ArenaDtor(void* object) {
  Event_MemberLeft* _this = reinterpret_cast< Event_MemberLeft* >(object);
  (void)_this;
}
void Event_MemberLeft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_MemberLeft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_MemberLeft& Event_MemberLeft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_MemberLeft_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_MemberLeft::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.MemberLeft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leave_reason_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leave_reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_MemberLeft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 member_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.LeaveReason leave_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_leave_reason(static_cast<::protocol::chat::v1::Event_LeaveReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_MemberLeft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.MemberLeft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_member_id(), target);
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guild_id(), target);
  }

  // .protocol.chat.v1.Event.LeaveReason leave_reason = 3;
  if (this->leave_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_leave_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.MemberLeft)
  return target;
}

size_t Event_MemberLeft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.MemberLeft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // .protocol.chat.v1.Event.LeaveReason leave_reason = 3;
  if (this->leave_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leave_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_MemberLeft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.MemberLeft)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_MemberLeft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_MemberLeft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.MemberLeft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.MemberLeft)
    MergeFrom(*source);
  }
}

void Event_MemberLeft::MergeFrom(const Event_MemberLeft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.MemberLeft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.leave_reason() != 0) {
    _internal_set_leave_reason(from._internal_leave_reason());
  }
}

void Event_MemberLeft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.MemberLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_MemberLeft::CopyFrom(const Event_MemberLeft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.MemberLeft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_MemberLeft::IsInitialized() const {
  return true;
}

void Event_MemberLeft::InternalSwap(Event_MemberLeft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_MemberLeft, leave_reason_)
      + sizeof(Event_MemberLeft::leave_reason_)
      - PROTOBUF_FIELD_OFFSET(Event_MemberLeft, member_id_)>(
          reinterpret_cast<char*>(&member_id_),
          reinterpret_cast<char*>(&other->member_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_MemberLeft::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_GuildAddedToList::InitAsDefaultInstance() {
}
class Event_GuildAddedToList::_Internal {
 public:
};

Event_GuildAddedToList::Event_GuildAddedToList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.GuildAddedToList)
}
Event_GuildAddedToList::Event_GuildAddedToList(const Event_GuildAddedToList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  homeserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_homeserver().empty()) {
    homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_homeserver(),
      GetArena());
  }
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.GuildAddedToList)
}

void Event_GuildAddedToList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto.base);
  homeserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

Event_GuildAddedToList::~Event_GuildAddedToList() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.GuildAddedToList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_GuildAddedToList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  homeserver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_GuildAddedToList::ArenaDtor(void* object) {
  Event_GuildAddedToList* _this = reinterpret_cast< Event_GuildAddedToList* >(object);
  (void)_this;
}
void Event_GuildAddedToList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_GuildAddedToList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_GuildAddedToList& Event_GuildAddedToList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_GuildAddedToList_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_GuildAddedToList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.GuildAddedToList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_GuildAddedToList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string homeserver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_homeserver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.GuildAddedToList.homeserver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_GuildAddedToList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.GuildAddedToList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // string homeserver = 2;
  if (this->homeserver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_homeserver().data(), static_cast<int>(this->_internal_homeserver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.GuildAddedToList.homeserver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_homeserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.GuildAddedToList)
  return target;
}

size_t Event_GuildAddedToList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.GuildAddedToList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string homeserver = 2;
  if (this->homeserver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_homeserver());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_GuildAddedToList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.GuildAddedToList)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_GuildAddedToList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_GuildAddedToList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.GuildAddedToList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.GuildAddedToList)
    MergeFrom(*source);
  }
}

void Event_GuildAddedToList::MergeFrom(const Event_GuildAddedToList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.GuildAddedToList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.homeserver().size() > 0) {
    _internal_set_homeserver(from._internal_homeserver());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void Event_GuildAddedToList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.GuildAddedToList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_GuildAddedToList::CopyFrom(const Event_GuildAddedToList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.GuildAddedToList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_GuildAddedToList::IsInitialized() const {
  return true;
}

void Event_GuildAddedToList::InternalSwap(Event_GuildAddedToList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  homeserver_.Swap(&other->homeserver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_GuildAddedToList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_GuildRemovedFromList::InitAsDefaultInstance() {
}
class Event_GuildRemovedFromList::_Internal {
 public:
};

Event_GuildRemovedFromList::Event_GuildRemovedFromList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.GuildRemovedFromList)
}
Event_GuildRemovedFromList::Event_GuildRemovedFromList(const Event_GuildRemovedFromList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  homeserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_homeserver().empty()) {
    homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_homeserver(),
      GetArena());
  }
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.GuildRemovedFromList)
}

void Event_GuildRemovedFromList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto.base);
  homeserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

Event_GuildRemovedFromList::~Event_GuildRemovedFromList() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.GuildRemovedFromList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_GuildRemovedFromList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  homeserver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_GuildRemovedFromList::ArenaDtor(void* object) {
  Event_GuildRemovedFromList* _this = reinterpret_cast< Event_GuildRemovedFromList* >(object);
  (void)_this;
}
void Event_GuildRemovedFromList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_GuildRemovedFromList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_GuildRemovedFromList& Event_GuildRemovedFromList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_GuildRemovedFromList_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_GuildRemovedFromList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.GuildRemovedFromList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_GuildRemovedFromList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string homeserver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_homeserver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.GuildRemovedFromList.homeserver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_GuildRemovedFromList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.GuildRemovedFromList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // string homeserver = 2;
  if (this->homeserver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_homeserver().data(), static_cast<int>(this->_internal_homeserver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.GuildRemovedFromList.homeserver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_homeserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.GuildRemovedFromList)
  return target;
}

size_t Event_GuildRemovedFromList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.GuildRemovedFromList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string homeserver = 2;
  if (this->homeserver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_homeserver());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_GuildRemovedFromList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.GuildRemovedFromList)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_GuildRemovedFromList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_GuildRemovedFromList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.GuildRemovedFromList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.GuildRemovedFromList)
    MergeFrom(*source);
  }
}

void Event_GuildRemovedFromList::MergeFrom(const Event_GuildRemovedFromList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.GuildRemovedFromList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.homeserver().size() > 0) {
    _internal_set_homeserver(from._internal_homeserver());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void Event_GuildRemovedFromList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.GuildRemovedFromList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_GuildRemovedFromList::CopyFrom(const Event_GuildRemovedFromList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.GuildRemovedFromList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_GuildRemovedFromList::IsInitialized() const {
  return true;
}

void Event_GuildRemovedFromList::InternalSwap(Event_GuildRemovedFromList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  homeserver_.Swap(&other->homeserver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_GuildRemovedFromList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ActionPerformed::InitAsDefaultInstance() {
}
class Event_ActionPerformed::_Internal {
 public:
};

Event_ActionPerformed::Event_ActionPerformed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ActionPerformed)
}
Event_ActionPerformed::Event_ActionPerformed(const Event_ActionPerformed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_id().empty()) {
    action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_id(),
      GetArena());
  }
  action_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_data().empty()) {
    action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_data(),
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ActionPerformed)
}

void Event_ActionPerformed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto.base);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

Event_ActionPerformed::~Event_ActionPerformed() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ActionPerformed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ActionPerformed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_ActionPerformed::ArenaDtor(void* object) {
  Event_ActionPerformed* _this = reinterpret_cast< Event_ActionPerformed* >(object);
  (void)_this;
}
void Event_ActionPerformed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ActionPerformed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ActionPerformed& Event_ActionPerformed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ActionPerformed_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ActionPerformed::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ActionPerformed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ActionPerformed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ActionPerformed.action_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ActionPerformed.action_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ActionPerformed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ActionPerformed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  // string action_id = 4;
  if (this->action_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_id().data(), static_cast<int>(this->_internal_action_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ActionPerformed.action_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action_id(), target);
  }

  // string action_data = 5;
  if (this->action_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_data().data(), static_cast<int>(this->_internal_action_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ActionPerformed.action_data");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ActionPerformed)
  return target;
}

size_t Event_ActionPerformed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ActionPerformed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_id = 4;
  if (this->action_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_id());
  }

  // string action_data = 5;
  if (this->action_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_data());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ActionPerformed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ActionPerformed)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ActionPerformed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ActionPerformed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ActionPerformed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ActionPerformed)
    MergeFrom(*source);
  }
}

void Event_ActionPerformed::MergeFrom(const Event_ActionPerformed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ActionPerformed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_id().size() > 0) {
    _internal_set_action_id(from._internal_action_id());
  }
  if (from.action_data().size() > 0) {
    _internal_set_action_data(from._internal_action_data());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void Event_ActionPerformed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ActionPerformed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ActionPerformed::CopyFrom(const Event_ActionPerformed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ActionPerformed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ActionPerformed::IsInitialized() const {
  return true;
}

void Event_ActionPerformed::InternalSwap(Event_ActionPerformed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_id_.Swap(&other->action_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_data_.Swap(&other->action_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_ActionPerformed, message_id_)
      + sizeof(Event_ActionPerformed::message_id_)
      - PROTOBUF_FIELD_OFFSET(Event_ActionPerformed, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ActionPerformed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_RoleMoved::InitAsDefaultInstance() {
}
class Event_RoleMoved::_Internal {
 public:
};

Event_RoleMoved::Event_RoleMoved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.RoleMoved)
}
Event_RoleMoved::Event_RoleMoved(const Event_RoleMoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.RoleMoved)
}

void Event_RoleMoved::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
}

Event_RoleMoved::~Event_RoleMoved() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.RoleMoved)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_RoleMoved::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_RoleMoved::ArenaDtor(void* object) {
  Event_RoleMoved* _this = reinterpret_cast< Event_RoleMoved* >(object);
  (void)_this;
}
void Event_RoleMoved::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_RoleMoved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_RoleMoved& Event_RoleMoved::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_RoleMoved_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_RoleMoved::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.RoleMoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_RoleMoved::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 previous_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          previous_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_RoleMoved::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.RoleMoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // uint64 previous_id = 3;
  if (this->previous_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_previous_id(), target);
  }

  // uint64 next_id = 4;
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_next_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.RoleMoved)
  return target;
}

size_t Event_RoleMoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.RoleMoved)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // uint64 previous_id = 3;
  if (this->previous_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_previous_id());
  }

  // uint64 next_id = 4;
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_RoleMoved::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.RoleMoved)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RoleMoved* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_RoleMoved>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.RoleMoved)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.RoleMoved)
    MergeFrom(*source);
  }
}

void Event_RoleMoved::MergeFrom(const Event_RoleMoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.RoleMoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.previous_id() != 0) {
    _internal_set_previous_id(from._internal_previous_id());
  }
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
}

void Event_RoleMoved::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.RoleMoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RoleMoved::CopyFrom(const Event_RoleMoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.RoleMoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RoleMoved::IsInitialized() const {
  return true;
}

void Event_RoleMoved::InternalSwap(Event_RoleMoved* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_RoleMoved, next_id_)
      + sizeof(Event_RoleMoved::next_id_)
      - PROTOBUF_FIELD_OFFSET(Event_RoleMoved, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_RoleMoved::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_RoleDeleted::InitAsDefaultInstance() {
}
class Event_RoleDeleted::_Internal {
 public:
};

Event_RoleDeleted::Event_RoleDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.RoleDeleted)
}
Event_RoleDeleted::Event_RoleDeleted(const Event_RoleDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.RoleDeleted)
}

void Event_RoleDeleted::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
}

Event_RoleDeleted::~Event_RoleDeleted() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.RoleDeleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_RoleDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_RoleDeleted::ArenaDtor(void* object) {
  Event_RoleDeleted* _this = reinterpret_cast< Event_RoleDeleted* >(object);
  (void)_this;
}
void Event_RoleDeleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_RoleDeleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_RoleDeleted& Event_RoleDeleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_RoleDeleted_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_RoleDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.RoleDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_RoleDeleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_RoleDeleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.RoleDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.RoleDeleted)
  return target;
}

size_t Event_RoleDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.RoleDeleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_RoleDeleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.RoleDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RoleDeleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_RoleDeleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.RoleDeleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.RoleDeleted)
    MergeFrom(*source);
  }
}

void Event_RoleDeleted::MergeFrom(const Event_RoleDeleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.RoleDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Event_RoleDeleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.RoleDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RoleDeleted::CopyFrom(const Event_RoleDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.RoleDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RoleDeleted::IsInitialized() const {
  return true;
}

void Event_RoleDeleted::InternalSwap(Event_RoleDeleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_RoleDeleted, role_id_)
      + sizeof(Event_RoleDeleted::role_id_)
      - PROTOBUF_FIELD_OFFSET(Event_RoleDeleted, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_RoleDeleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_RoleCreated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_RoleCreated_default_instance_._instance.get_mutable()->role_ = const_cast< ::protocol::chat::v1::Role*>(
      ::protocol::chat::v1::Role::internal_default_instance());
}
class Event_RoleCreated::_Internal {
 public:
  static const ::protocol::chat::v1::Role& role(const Event_RoleCreated* msg);
};

const ::protocol::chat::v1::Role&
Event_RoleCreated::_Internal::role(const Event_RoleCreated* msg) {
  return *msg->role_;
}
void Event_RoleCreated::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
Event_RoleCreated::Event_RoleCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.RoleCreated)
}
Event_RoleCreated::Event_RoleCreated(const Event_RoleCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::protocol::chat::v1::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.RoleCreated)
}

void Event_RoleCreated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto.base);
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&role_)) + sizeof(role_id_));
}

Event_RoleCreated::~Event_RoleCreated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.RoleCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_RoleCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Event_RoleCreated::ArenaDtor(void* object) {
  Event_RoleCreated* _this = reinterpret_cast< Event_RoleCreated* >(object);
  (void)_this;
}
void Event_RoleCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_RoleCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_RoleCreated& Event_RoleCreated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_RoleCreated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_RoleCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.RoleCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_RoleCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Role role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_RoleCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.RoleCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // .protocol.chat.v1.Role role = 3;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.RoleCreated)
  return target;
}

size_t Event_RoleCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.RoleCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.Role role = 3;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_RoleCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.RoleCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RoleCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_RoleCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.RoleCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.RoleCreated)
    MergeFrom(*source);
  }
}

void Event_RoleCreated::MergeFrom(const Event_RoleCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.RoleCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role()) {
    _internal_mutable_role()->::protocol::chat::v1::Role::MergeFrom(from._internal_role());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Event_RoleCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.RoleCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RoleCreated::CopyFrom(const Event_RoleCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.RoleCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RoleCreated::IsInitialized() const {
  return true;
}

void Event_RoleCreated::InternalSwap(Event_RoleCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_RoleCreated, role_id_)
      + sizeof(Event_RoleCreated::role_id_)
      - PROTOBUF_FIELD_OFFSET(Event_RoleCreated, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_RoleCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_RoleUpdated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_RoleUpdated_default_instance_._instance.get_mutable()->role_ = const_cast< ::protocol::chat::v1::Role*>(
      ::protocol::chat::v1::Role::internal_default_instance());
}
class Event_RoleUpdated::_Internal {
 public:
  static const ::protocol::chat::v1::Role& role(const Event_RoleUpdated* msg);
};

const ::protocol::chat::v1::Role&
Event_RoleUpdated::_Internal::role(const Event_RoleUpdated* msg) {
  return *msg->role_;
}
void Event_RoleUpdated::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
Event_RoleUpdated::Event_RoleUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.RoleUpdated)
}
Event_RoleUpdated::Event_RoleUpdated(const Event_RoleUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::protocol::chat::v1::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.RoleUpdated)
}

void Event_RoleUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto.base);
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&role_)) + sizeof(role_id_));
}

Event_RoleUpdated::~Event_RoleUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.RoleUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_RoleUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Event_RoleUpdated::ArenaDtor(void* object) {
  Event_RoleUpdated* _this = reinterpret_cast< Event_RoleUpdated* >(object);
  (void)_this;
}
void Event_RoleUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_RoleUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_RoleUpdated& Event_RoleUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_RoleUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_RoleUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.RoleUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_RoleUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Role role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_RoleUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.RoleUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 3;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  // .protocol.chat.v1.Role role = 4;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.RoleUpdated)
  return target;
}

size_t Event_RoleUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.RoleUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.Role role = 4;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_RoleUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.RoleUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RoleUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_RoleUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.RoleUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.RoleUpdated)
    MergeFrom(*source);
  }
}

void Event_RoleUpdated::MergeFrom(const Event_RoleUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.RoleUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role()) {
    _internal_mutable_role()->::protocol::chat::v1::Role::MergeFrom(from._internal_role());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Event_RoleUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.RoleUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RoleUpdated::CopyFrom(const Event_RoleUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.RoleUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RoleUpdated::IsInitialized() const {
  return true;
}

void Event_RoleUpdated::InternalSwap(Event_RoleUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_RoleUpdated, role_id_)
      + sizeof(Event_RoleUpdated::role_id_)
      - PROTOBUF_FIELD_OFFSET(Event_RoleUpdated, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_RoleUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_RolePermissionsUpdated::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_RolePermissionsUpdated_default_instance_._instance.get_mutable()->perms_ = const_cast< ::protocol::chat::v1::PermissionList*>(
      ::protocol::chat::v1::PermissionList::internal_default_instance());
}
class Event_RolePermissionsUpdated::_Internal {
 public:
  static const ::protocol::chat::v1::PermissionList& perms(const Event_RolePermissionsUpdated* msg);
};

const ::protocol::chat::v1::PermissionList&
Event_RolePermissionsUpdated::_Internal::perms(const Event_RolePermissionsUpdated* msg) {
  return *msg->perms_;
}
void Event_RolePermissionsUpdated::clear_perms() {
  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
}
Event_RolePermissionsUpdated::Event_RolePermissionsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.RolePermissionsUpdated)
}
Event_RolePermissionsUpdated::Event_RolePermissionsUpdated(const Event_RolePermissionsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perms()) {
    perms_ = new ::protocol::chat::v1::PermissionList(*from.perms_);
  } else {
    perms_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.RolePermissionsUpdated)
}

void Event_RolePermissionsUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto.base);
  ::memset(&perms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&perms_)) + sizeof(role_id_));
}

Event_RolePermissionsUpdated::~Event_RolePermissionsUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.RolePermissionsUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_RolePermissionsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete perms_;
}

void Event_RolePermissionsUpdated::ArenaDtor(void* object) {
  Event_RolePermissionsUpdated* _this = reinterpret_cast< Event_RolePermissionsUpdated* >(object);
  (void)_this;
}
void Event_RolePermissionsUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_RolePermissionsUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_RolePermissionsUpdated& Event_RolePermissionsUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_RolePermissionsUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_RolePermissionsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_RolePermissionsUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.PermissionList perms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_perms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_RolePermissionsUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 role_id = 3;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  // .protocol.chat.v1.PermissionList perms = 4;
  if (this->has_perms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::perms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.RolePermissionsUpdated)
  return target;
}

size_t Event_RolePermissionsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.PermissionList perms = 4;
  if (this->has_perms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perms_);
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 role_id = 3;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_RolePermissionsUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RolePermissionsUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_RolePermissionsUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.RolePermissionsUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.RolePermissionsUpdated)
    MergeFrom(*source);
  }
}

void Event_RolePermissionsUpdated::MergeFrom(const Event_RolePermissionsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_perms()) {
    _internal_mutable_perms()->::protocol::chat::v1::PermissionList::MergeFrom(from._internal_perms());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void Event_RolePermissionsUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RolePermissionsUpdated::CopyFrom(const Event_RolePermissionsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.RolePermissionsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RolePermissionsUpdated::IsInitialized() const {
  return true;
}

void Event_RolePermissionsUpdated::InternalSwap(Event_RolePermissionsUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_RolePermissionsUpdated, role_id_)
      + sizeof(Event_RolePermissionsUpdated::role_id_)
      - PROTOBUF_FIELD_OFFSET(Event_RolePermissionsUpdated, perms_)>(
          reinterpret_cast<char*>(&perms_),
          reinterpret_cast<char*>(&other->perms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_RolePermissionsUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_UserRolesUpdated::InitAsDefaultInstance() {
}
class Event_UserRolesUpdated::_Internal {
 public:
};

Event_UserRolesUpdated::Event_UserRolesUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  role_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.UserRolesUpdated)
}
Event_UserRolesUpdated::Event_UserRolesUpdated(const Event_UserRolesUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      role_ids_(from.role_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.UserRolesUpdated)
}

void Event_UserRolesUpdated::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
}

Event_UserRolesUpdated::~Event_UserRolesUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.UserRolesUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_UserRolesUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_UserRolesUpdated::ArenaDtor(void* object) {
  Event_UserRolesUpdated* _this = reinterpret_cast< Event_UserRolesUpdated* >(object);
  (void)_this;
}
void Event_UserRolesUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_UserRolesUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_UserRolesUpdated& Event_UserRolesUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_UserRolesUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_UserRolesUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.UserRolesUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_ids_.Clear();
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_UserRolesUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 role_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_UserRolesUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.UserRolesUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // repeated uint64 role_ids = 3;
  {
    int byte_size = _role_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_role_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.UserRolesUpdated)
  return target;
}

size_t Event_UserRolesUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.UserRolesUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 role_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->role_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _role_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_UserRolesUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.UserRolesUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_UserRolesUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_UserRolesUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.UserRolesUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.UserRolesUpdated)
    MergeFrom(*source);
  }
}

void Event_UserRolesUpdated::MergeFrom(const Event_UserRolesUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.UserRolesUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_ids_.MergeFrom(from.role_ids_);
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void Event_UserRolesUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.UserRolesUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_UserRolesUpdated::CopyFrom(const Event_UserRolesUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.UserRolesUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_UserRolesUpdated::IsInitialized() const {
  return true;
}

void Event_UserRolesUpdated::InternalSwap(Event_UserRolesUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  role_ids_.InternalSwap(&other->role_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_UserRolesUpdated, user_id_)
      + sizeof(Event_UserRolesUpdated::user_id_)
      - PROTOBUF_FIELD_OFFSET(Event_UserRolesUpdated, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_UserRolesUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ProfileUpdated::InitAsDefaultInstance() {
}
class Event_ProfileUpdated::_Internal {
 public:
};

Event_ProfileUpdated::Event_ProfileUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.ProfileUpdated)
}
Event_ProfileUpdated::Event_ProfileUpdated(const Event_ProfileUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_username().empty()) {
    new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_username(),
      GetArena());
  }
  new_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_avatar().empty()) {
    new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_avatar(),
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_is_bot_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(update_is_bot_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.ProfileUpdated)
}

void Event_ProfileUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto.base);
  new_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_is_bot_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(update_is_bot_));
}

Event_ProfileUpdated::~Event_ProfileUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.ProfileUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_ProfileUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_ProfileUpdated::ArenaDtor(void* object) {
  Event_ProfileUpdated* _this = reinterpret_cast< Event_ProfileUpdated* >(object);
  (void)_this;
}
void Event_ProfileUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_ProfileUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ProfileUpdated& Event_ProfileUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ProfileUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_ProfileUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.ProfileUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_is_bot_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(update_is_bot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_ProfileUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ProfileUpdated.new_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_username_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.ProfileUpdated.new_avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_avatar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          update_avatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.UserStatus new_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_new_status(static_cast<::protocol::harmonytypes::v1::UserStatus>(val));
        } else goto handle_unusual;
        continue;
      // bool update_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_bot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_is_bot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          update_is_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ProfileUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.ProfileUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string new_username = 2;
  if (this->new_username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_username().data(), static_cast<int>(this->_internal_new_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ProfileUpdated.new_username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_username(), target);
  }

  // bool update_username = 3;
  if (this->update_username() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_username(), target);
  }

  // string new_avatar = 4;
  if (this->new_avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_avatar().data(), static_cast<int>(this->_internal_new_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.ProfileUpdated.new_avatar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_avatar(), target);
  }

  // bool update_avatar = 5;
  if (this->update_avatar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_update_avatar(), target);
  }

  // .protocol.harmonytypes.v1.UserStatus new_status = 6;
  if (this->new_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_new_status(), target);
  }

  // bool update_status = 7;
  if (this->update_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_update_status(), target);
  }

  // bool is_bot = 8;
  if (this->is_bot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_bot(), target);
  }

  // bool update_is_bot = 9;
  if (this->update_is_bot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_update_is_bot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.ProfileUpdated)
  return target;
}

size_t Event_ProfileUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.ProfileUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_username = 2;
  if (this->new_username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_username());
  }

  // string new_avatar = 4;
  if (this->new_avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_avatar());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // bool update_username = 3;
  if (this->update_username() != 0) {
    total_size += 1 + 1;
  }

  // bool update_avatar = 5;
  if (this->update_avatar() != 0) {
    total_size += 1 + 1;
  }

  // bool update_status = 7;
  if (this->update_status() != 0) {
    total_size += 1 + 1;
  }

  // bool is_bot = 8;
  if (this->is_bot() != 0) {
    total_size += 1 + 1;
  }

  // .protocol.harmonytypes.v1.UserStatus new_status = 6;
  if (this->new_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_status());
  }

  // bool update_is_bot = 9;
  if (this->update_is_bot() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ProfileUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.ProfileUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ProfileUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ProfileUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.ProfileUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.ProfileUpdated)
    MergeFrom(*source);
  }
}

void Event_ProfileUpdated::MergeFrom(const Event_ProfileUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.ProfileUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_username().size() > 0) {
    _internal_set_new_username(from._internal_new_username());
  }
  if (from.new_avatar().size() > 0) {
    _internal_set_new_avatar(from._internal_new_avatar());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.update_username() != 0) {
    _internal_set_update_username(from._internal_update_username());
  }
  if (from.update_avatar() != 0) {
    _internal_set_update_avatar(from._internal_update_avatar());
  }
  if (from.update_status() != 0) {
    _internal_set_update_status(from._internal_update_status());
  }
  if (from.is_bot() != 0) {
    _internal_set_is_bot(from._internal_is_bot());
  }
  if (from.new_status() != 0) {
    _internal_set_new_status(from._internal_new_status());
  }
  if (from.update_is_bot() != 0) {
    _internal_set_update_is_bot(from._internal_update_is_bot());
  }
}

void Event_ProfileUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.ProfileUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ProfileUpdated::CopyFrom(const Event_ProfileUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.ProfileUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ProfileUpdated::IsInitialized() const {
  return true;
}

void Event_ProfileUpdated::InternalSwap(Event_ProfileUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new_username_.Swap(&other->new_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_avatar_.Swap(&other->new_avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_ProfileUpdated, update_is_bot_)
      + sizeof(Event_ProfileUpdated::update_is_bot_)
      - PROTOBUF_FIELD_OFFSET(Event_ProfileUpdated, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ProfileUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_Typing::InitAsDefaultInstance() {
}
class Event_Typing::_Internal {
 public:
};

Event_Typing::Event_Typing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.Typing)
}
Event_Typing::Event_Typing(const Event_Typing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.Typing)
}

void Event_Typing::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
}

Event_Typing::~Event_Typing() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.Typing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_Typing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_Typing::ArenaDtor(void* object) {
  Event_Typing* _this = reinterpret_cast< Event_Typing* >(object);
  (void)_this;
}
void Event_Typing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_Typing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_Typing& Event_Typing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_Typing_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_Typing::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.Typing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_Typing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_Typing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.Typing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 3;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.Typing)
  return target;
}

size_t Event_Typing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.Typing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 guild_id = 2;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_Typing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.Typing)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_Typing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_Typing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.Typing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.Typing)
    MergeFrom(*source);
  }
}

void Event_Typing::MergeFrom(const Event_Typing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.Typing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void Event_Typing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.Typing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Typing::CopyFrom(const Event_Typing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.Typing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Typing::IsInitialized() const {
  return true;
}

void Event_Typing::InternalSwap(Event_Typing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_Typing, channel_id_)
      + sizeof(Event_Typing::channel_id_)
      - PROTOBUF_FIELD_OFFSET(Event_Typing, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_Typing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_PermissionUpdated::InitAsDefaultInstance() {
}
class Event_PermissionUpdated::_Internal {
 public:
};

Event_PermissionUpdated::Event_PermissionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.PermissionUpdated)
}
Event_PermissionUpdated::Event_PermissionUpdated(const Event_PermissionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ok_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(ok_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.PermissionUpdated)
}

void Event_PermissionUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(ok_));
}

Event_PermissionUpdated::~Event_PermissionUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.PermissionUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_PermissionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_PermissionUpdated::ArenaDtor(void* object) {
  Event_PermissionUpdated* _this = reinterpret_cast< Event_PermissionUpdated* >(object);
  (void)_this;
}
void Event_PermissionUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_PermissionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_PermissionUpdated& Event_PermissionUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_PermissionUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_PermissionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.PermissionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(ok_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_PermissionUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.PermissionUpdated.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ok = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_PermissionUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.PermissionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // string query = 3;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.PermissionUpdated.query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query(), target);
  }

  // bool ok = 4;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.PermissionUpdated)
  return target;
}

size_t Event_PermissionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.PermissionUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 3;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // uint64 guild_id = 1;
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // bool ok = 4;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_PermissionUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.PermissionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_PermissionUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_PermissionUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.PermissionUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.PermissionUpdated)
    MergeFrom(*source);
  }
}

void Event_PermissionUpdated::MergeFrom(const Event_PermissionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.PermissionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {
    _internal_set_query(from._internal_query());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void Event_PermissionUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.PermissionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_PermissionUpdated::CopyFrom(const Event_PermissionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.PermissionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_PermissionUpdated::IsInitialized() const {
  return true;
}

void Event_PermissionUpdated::InternalSwap(Event_PermissionUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_PermissionUpdated, ok_)
      + sizeof(Event_PermissionUpdated::ok_)
      - PROTOBUF_FIELD_OFFSET(Event_PermissionUpdated, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_PermissionUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_EmotePackUpdated::InitAsDefaultInstance() {
}
class Event_EmotePackUpdated::_Internal {
 public:
};

Event_EmotePackUpdated::Event_EmotePackUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.EmotePackUpdated)
}
Event_EmotePackUpdated::Event_EmotePackUpdated(const Event_EmotePackUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pack_name().empty()) {
    pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pack_name(),
      GetArena());
  }
  ::memcpy(&pack_id_, &from.pack_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_pack_name_) -
    reinterpret_cast<char*>(&pack_id_)) + sizeof(update_pack_name_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.EmotePackUpdated)
}

void Event_EmotePackUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto.base);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pack_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_pack_name_) -
      reinterpret_cast<char*>(&pack_id_)) + sizeof(update_pack_name_));
}

Event_EmotePackUpdated::~Event_EmotePackUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.EmotePackUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_EmotePackUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pack_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Event_EmotePackUpdated::ArenaDtor(void* object) {
  Event_EmotePackUpdated* _this = reinterpret_cast< Event_EmotePackUpdated* >(object);
  (void)_this;
}
void Event_EmotePackUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_EmotePackUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_EmotePackUpdated& Event_EmotePackUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_EmotePackUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_EmotePackUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.EmotePackUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pack_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_pack_name_) -
      reinterpret_cast<char*>(&pack_id_)) + sizeof(update_pack_name_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_EmotePackUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pack_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pack_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.EmotePackUpdated.pack_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_pack_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_pack_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_EmotePackUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.EmotePackUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  // string pack_name = 2;
  if (this->pack_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pack_name().data(), static_cast<int>(this->_internal_pack_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.EmotePackUpdated.pack_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pack_name(), target);
  }

  // bool update_pack_name = 3;
  if (this->update_pack_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_pack_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.EmotePackUpdated)
  return target;
}

size_t Event_EmotePackUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.EmotePackUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pack_name = 2;
  if (this->pack_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pack_name());
  }

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  // bool update_pack_name = 3;
  if (this->update_pack_name() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_EmotePackUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.EmotePackUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EmotePackUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_EmotePackUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.EmotePackUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.EmotePackUpdated)
    MergeFrom(*source);
  }
}

void Event_EmotePackUpdated::MergeFrom(const Event_EmotePackUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.EmotePackUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_name().size() > 0) {
    _internal_set_pack_name(from._internal_pack_name());
  }
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
  if (from.update_pack_name() != 0) {
    _internal_set_update_pack_name(from._internal_update_pack_name());
  }
}

void Event_EmotePackUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.EmotePackUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EmotePackUpdated::CopyFrom(const Event_EmotePackUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.EmotePackUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EmotePackUpdated::IsInitialized() const {
  return true;
}

void Event_EmotePackUpdated::InternalSwap(Event_EmotePackUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pack_name_.Swap(&other->pack_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event_EmotePackUpdated, update_pack_name_)
      + sizeof(Event_EmotePackUpdated::update_pack_name_)
      - PROTOBUF_FIELD_OFFSET(Event_EmotePackUpdated, pack_id_)>(
          reinterpret_cast<char*>(&pack_id_),
          reinterpret_cast<char*>(&other->pack_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_EmotePackUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_EmotePackDeleted::InitAsDefaultInstance() {
}
class Event_EmotePackDeleted::_Internal {
 public:
};

Event_EmotePackDeleted::Event_EmotePackDeleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.EmotePackDeleted)
}
Event_EmotePackDeleted::Event_EmotePackDeleted(const Event_EmotePackDeleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.EmotePackDeleted)
}

void Event_EmotePackDeleted::SharedCtor() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

Event_EmotePackDeleted::~Event_EmotePackDeleted() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.EmotePackDeleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_EmotePackDeleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_EmotePackDeleted::ArenaDtor(void* object) {
  Event_EmotePackDeleted* _this = reinterpret_cast< Event_EmotePackDeleted* >(object);
  (void)_this;
}
void Event_EmotePackDeleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_EmotePackDeleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_EmotePackDeleted& Event_EmotePackDeleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_EmotePackDeleted_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_EmotePackDeleted::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.EmotePackDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_EmotePackDeleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_EmotePackDeleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.EmotePackDeleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.EmotePackDeleted)
  return target;
}

size_t Event_EmotePackDeleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.EmotePackDeleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_EmotePackDeleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.EmotePackDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EmotePackDeleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_EmotePackDeleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.EmotePackDeleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.EmotePackDeleted)
    MergeFrom(*source);
  }
}

void Event_EmotePackDeleted::MergeFrom(const Event_EmotePackDeleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.EmotePackDeleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void Event_EmotePackDeleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.EmotePackDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EmotePackDeleted::CopyFrom(const Event_EmotePackDeleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.EmotePackDeleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EmotePackDeleted::IsInitialized() const {
  return true;
}

void Event_EmotePackDeleted::InternalSwap(Event_EmotePackDeleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_EmotePackDeleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_EmotePackAdded::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_EmotePackAdded_default_instance_._instance.get_mutable()->pack_ = const_cast< ::protocol::chat::v1::EmotePack*>(
      ::protocol::chat::v1::EmotePack::internal_default_instance());
}
class Event_EmotePackAdded::_Internal {
 public:
  static const ::protocol::chat::v1::EmotePack& pack(const Event_EmotePackAdded* msg);
};

const ::protocol::chat::v1::EmotePack&
Event_EmotePackAdded::_Internal::pack(const Event_EmotePackAdded* msg) {
  return *msg->pack_;
}
void Event_EmotePackAdded::clear_pack() {
  if (GetArena() == nullptr && pack_ != nullptr) {
    delete pack_;
  }
  pack_ = nullptr;
}
Event_EmotePackAdded::Event_EmotePackAdded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.EmotePackAdded)
}
Event_EmotePackAdded::Event_EmotePackAdded(const Event_EmotePackAdded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pack()) {
    pack_ = new ::protocol::chat::v1::EmotePack(*from.pack_);
  } else {
    pack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.EmotePackAdded)
}

void Event_EmotePackAdded::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto.base);
  pack_ = nullptr;
}

Event_EmotePackAdded::~Event_EmotePackAdded() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.EmotePackAdded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_EmotePackAdded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pack_;
}

void Event_EmotePackAdded::ArenaDtor(void* object) {
  Event_EmotePackAdded* _this = reinterpret_cast< Event_EmotePackAdded* >(object);
  (void)_this;
}
void Event_EmotePackAdded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_EmotePackAdded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_EmotePackAdded& Event_EmotePackAdded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_EmotePackAdded_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_EmotePackAdded::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.EmotePackAdded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pack_ != nullptr) {
    delete pack_;
  }
  pack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_EmotePackAdded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.chat.v1.EmotePack pack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_EmotePackAdded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.EmotePackAdded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.chat.v1.EmotePack pack = 1;
  if (this->has_pack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.EmotePackAdded)
  return target;
}

size_t Event_EmotePackAdded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.EmotePackAdded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.EmotePack pack = 1;
  if (this->has_pack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pack_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_EmotePackAdded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.EmotePackAdded)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EmotePackAdded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_EmotePackAdded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.EmotePackAdded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.EmotePackAdded)
    MergeFrom(*source);
  }
}

void Event_EmotePackAdded::MergeFrom(const Event_EmotePackAdded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.EmotePackAdded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pack()) {
    _internal_mutable_pack()->::protocol::chat::v1::EmotePack::MergeFrom(from._internal_pack());
  }
}

void Event_EmotePackAdded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.EmotePackAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EmotePackAdded::CopyFrom(const Event_EmotePackAdded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.EmotePackAdded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EmotePackAdded::IsInitialized() const {
  return true;
}

void Event_EmotePackAdded::InternalSwap(Event_EmotePackAdded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_, other->pack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_EmotePackAdded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_EmotePackEmotesUpdated::InitAsDefaultInstance() {
}
class Event_EmotePackEmotesUpdated::_Internal {
 public:
};

void Event_EmotePackEmotesUpdated::clear_added_emotes() {
  added_emotes_.Clear();
}
Event_EmotePackEmotesUpdated::Event_EmotePackEmotesUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  added_emotes_(arena),
  deleted_emotes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event.EmotePackEmotesUpdated)
}
Event_EmotePackEmotesUpdated::Event_EmotePackEmotesUpdated(const Event_EmotePackEmotesUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      added_emotes_(from.added_emotes_),
      deleted_emotes_(from.deleted_emotes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event.EmotePackEmotesUpdated)
}

void Event_EmotePackEmotesUpdated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto.base);
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

Event_EmotePackEmotesUpdated::~Event_EmotePackEmotesUpdated() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event_EmotePackEmotesUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Event_EmotePackEmotesUpdated::ArenaDtor(void* object) {
  Event_EmotePackEmotesUpdated* _this = reinterpret_cast< Event_EmotePackEmotesUpdated* >(object);
  (void)_this;
}
void Event_EmotePackEmotesUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event_EmotePackEmotesUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_EmotePackEmotesUpdated& Event_EmotePackEmotesUpdated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_EmotePackEmotesUpdated_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event_EmotePackEmotesUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  added_emotes_.Clear();
  deleted_emotes_.Clear();
  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event_EmotePackEmotesUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.chat.v1.Emote added_emotes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added_emotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deleted_emotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_emotes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_EmotePackEmotesUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  // repeated .protocol.chat.v1.Emote added_emotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_added_emotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_added_emotes(i), target, stream);
  }

  // repeated string deleted_emotes = 3;
  for (int i = 0, n = this->_internal_deleted_emotes_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_emotes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Event.EmotePackEmotesUpdated.deleted_emotes");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  return target;
}

size_t Event_EmotePackEmotesUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.Emote added_emotes = 2;
  total_size += 1UL * this->_internal_added_emotes_size();
  for (const auto& msg : this->added_emotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string deleted_emotes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deleted_emotes_.size());
  for (int i = 0, n = deleted_emotes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deleted_emotes_.Get(i));
  }

  // uint64 pack_id = 1;
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_EmotePackEmotesUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EmotePackEmotesUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_EmotePackEmotesUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event.EmotePackEmotesUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event.EmotePackEmotesUpdated)
    MergeFrom(*source);
  }
}

void Event_EmotePackEmotesUpdated::MergeFrom(const Event_EmotePackEmotesUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  added_emotes_.MergeFrom(from.added_emotes_);
  deleted_emotes_.MergeFrom(from.deleted_emotes_);
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void Event_EmotePackEmotesUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EmotePackEmotesUpdated::CopyFrom(const Event_EmotePackEmotesUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event.EmotePackEmotesUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EmotePackEmotesUpdated::IsInitialized() const {
  return true;
}

void Event_EmotePackEmotesUpdated::InternalSwap(Event_EmotePackEmotesUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  added_emotes_.InternalSwap(&other->added_emotes_);
  deleted_emotes_.InternalSwap(&other->deleted_emotes_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_EmotePackEmotesUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::protocol::chat::v1::_Event_default_instance_.guild_added_to_list_ = const_cast< ::protocol::chat::v1::Event_GuildAddedToList*>(
      ::protocol::chat::v1::Event_GuildAddedToList::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.guild_removed_from_list_ = const_cast< ::protocol::chat::v1::Event_GuildRemovedFromList*>(
      ::protocol::chat::v1::Event_GuildRemovedFromList::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.action_performed_ = const_cast< ::protocol::chat::v1::Event_ActionPerformed*>(
      ::protocol::chat::v1::Event_ActionPerformed::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.sent_message_ = const_cast< ::protocol::chat::v1::Event_MessageSent*>(
      ::protocol::chat::v1::Event_MessageSent::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.edited_message_ = const_cast< ::protocol::chat::v1::Event_MessageUpdated*>(
      ::protocol::chat::v1::Event_MessageUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.deleted_message_ = const_cast< ::protocol::chat::v1::Event_MessageDeleted*>(
      ::protocol::chat::v1::Event_MessageDeleted::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.created_channel_ = const_cast< ::protocol::chat::v1::Event_ChannelCreated*>(
      ::protocol::chat::v1::Event_ChannelCreated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.edited_channel_ = const_cast< ::protocol::chat::v1::Event_ChannelUpdated*>(
      ::protocol::chat::v1::Event_ChannelUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.deleted_channel_ = const_cast< ::protocol::chat::v1::Event_ChannelDeleted*>(
      ::protocol::chat::v1::Event_ChannelDeleted::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.channels_reordered_ = const_cast< ::protocol::chat::v1::Event_ChannelsReordered*>(
      ::protocol::chat::v1::Event_ChannelsReordered::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.edited_guild_ = const_cast< ::protocol::chat::v1::Event_GuildUpdated*>(
      ::protocol::chat::v1::Event_GuildUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.deleted_guild_ = const_cast< ::protocol::chat::v1::Event_GuildDeleted*>(
      ::protocol::chat::v1::Event_GuildDeleted::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.joined_member_ = const_cast< ::protocol::chat::v1::Event_MemberJoined*>(
      ::protocol::chat::v1::Event_MemberJoined::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.left_member_ = const_cast< ::protocol::chat::v1::Event_MemberLeft*>(
      ::protocol::chat::v1::Event_MemberLeft::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.profile_updated_ = const_cast< ::protocol::chat::v1::Event_ProfileUpdated*>(
      ::protocol::chat::v1::Event_ProfileUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.typing_ = const_cast< ::protocol::chat::v1::Event_Typing*>(
      ::protocol::chat::v1::Event_Typing::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.role_created_ = const_cast< ::protocol::chat::v1::Event_RoleCreated*>(
      ::protocol::chat::v1::Event_RoleCreated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.role_deleted_ = const_cast< ::protocol::chat::v1::Event_RoleDeleted*>(
      ::protocol::chat::v1::Event_RoleDeleted::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.role_moved_ = const_cast< ::protocol::chat::v1::Event_RoleMoved*>(
      ::protocol::chat::v1::Event_RoleMoved::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.role_updated_ = const_cast< ::protocol::chat::v1::Event_RoleUpdated*>(
      ::protocol::chat::v1::Event_RoleUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.role_perms_updated_ = const_cast< ::protocol::chat::v1::Event_RolePermissionsUpdated*>(
      ::protocol::chat::v1::Event_RolePermissionsUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.user_roles_updated_ = const_cast< ::protocol::chat::v1::Event_UserRolesUpdated*>(
      ::protocol::chat::v1::Event_UserRolesUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.permission_updated_ = const_cast< ::protocol::chat::v1::Event_PermissionUpdated*>(
      ::protocol::chat::v1::Event_PermissionUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.emote_pack_added_ = const_cast< ::protocol::chat::v1::Event_EmotePackAdded*>(
      ::protocol::chat::v1::Event_EmotePackAdded::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.emote_pack_updated_ = const_cast< ::protocol::chat::v1::Event_EmotePackUpdated*>(
      ::protocol::chat::v1::Event_EmotePackUpdated::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.emote_pack_deleted_ = const_cast< ::protocol::chat::v1::Event_EmotePackDeleted*>(
      ::protocol::chat::v1::Event_EmotePackDeleted::internal_default_instance());
  ::protocol::chat::v1::_Event_default_instance_.emote_pack_emotes_updated_ = const_cast< ::protocol::chat::v1::Event_EmotePackEmotesUpdated*>(
      ::protocol::chat::v1::Event_EmotePackEmotesUpdated::internal_default_instance());
}
class Event::_Internal {
 public:
  static const ::protocol::chat::v1::Event_GuildAddedToList& guild_added_to_list(const Event* msg);
  static const ::protocol::chat::v1::Event_GuildRemovedFromList& guild_removed_from_list(const Event* msg);
  static const ::protocol::chat::v1::Event_ActionPerformed& action_performed(const Event* msg);
  static const ::protocol::chat::v1::Event_MessageSent& sent_message(const Event* msg);
  static const ::protocol::chat::v1::Event_MessageUpdated& edited_message(const Event* msg);
  static const ::protocol::chat::v1::Event_MessageDeleted& deleted_message(const Event* msg);
  static const ::protocol::chat::v1::Event_ChannelCreated& created_channel(const Event* msg);
  static const ::protocol::chat::v1::Event_ChannelUpdated& edited_channel(const Event* msg);
  static const ::protocol::chat::v1::Event_ChannelDeleted& deleted_channel(const Event* msg);
  static const ::protocol::chat::v1::Event_ChannelsReordered& channels_reordered(const Event* msg);
  static const ::protocol::chat::v1::Event_GuildUpdated& edited_guild(const Event* msg);
  static const ::protocol::chat::v1::Event_GuildDeleted& deleted_guild(const Event* msg);
  static const ::protocol::chat::v1::Event_MemberJoined& joined_member(const Event* msg);
  static const ::protocol::chat::v1::Event_MemberLeft& left_member(const Event* msg);
  static const ::protocol::chat::v1::Event_ProfileUpdated& profile_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_Typing& typing(const Event* msg);
  static const ::protocol::chat::v1::Event_RoleCreated& role_created(const Event* msg);
  static const ::protocol::chat::v1::Event_RoleDeleted& role_deleted(const Event* msg);
  static const ::protocol::chat::v1::Event_RoleMoved& role_moved(const Event* msg);
  static const ::protocol::chat::v1::Event_RoleUpdated& role_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_RolePermissionsUpdated& role_perms_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_UserRolesUpdated& user_roles_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_PermissionUpdated& permission_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_EmotePackAdded& emote_pack_added(const Event* msg);
  static const ::protocol::chat::v1::Event_EmotePackUpdated& emote_pack_updated(const Event* msg);
  static const ::protocol::chat::v1::Event_EmotePackDeleted& emote_pack_deleted(const Event* msg);
  static const ::protocol::chat::v1::Event_EmotePackEmotesUpdated& emote_pack_emotes_updated(const Event* msg);
};

const ::protocol::chat::v1::Event_GuildAddedToList&
Event::_Internal::guild_added_to_list(const Event* msg) {
  return *msg->event_.guild_added_to_list_;
}
const ::protocol::chat::v1::Event_GuildRemovedFromList&
Event::_Internal::guild_removed_from_list(const Event* msg) {
  return *msg->event_.guild_removed_from_list_;
}
const ::protocol::chat::v1::Event_ActionPerformed&
Event::_Internal::action_performed(const Event* msg) {
  return *msg->event_.action_performed_;
}
const ::protocol::chat::v1::Event_MessageSent&
Event::_Internal::sent_message(const Event* msg) {
  return *msg->event_.sent_message_;
}
const ::protocol::chat::v1::Event_MessageUpdated&
Event::_Internal::edited_message(const Event* msg) {
  return *msg->event_.edited_message_;
}
const ::protocol::chat::v1::Event_MessageDeleted&
Event::_Internal::deleted_message(const Event* msg) {
  return *msg->event_.deleted_message_;
}
const ::protocol::chat::v1::Event_ChannelCreated&
Event::_Internal::created_channel(const Event* msg) {
  return *msg->event_.created_channel_;
}
const ::protocol::chat::v1::Event_ChannelUpdated&
Event::_Internal::edited_channel(const Event* msg) {
  return *msg->event_.edited_channel_;
}
const ::protocol::chat::v1::Event_ChannelDeleted&
Event::_Internal::deleted_channel(const Event* msg) {
  return *msg->event_.deleted_channel_;
}
const ::protocol::chat::v1::Event_ChannelsReordered&
Event::_Internal::channels_reordered(const Event* msg) {
  return *msg->event_.channels_reordered_;
}
const ::protocol::chat::v1::Event_GuildUpdated&
Event::_Internal::edited_guild(const Event* msg) {
  return *msg->event_.edited_guild_;
}
const ::protocol::chat::v1::Event_GuildDeleted&
Event::_Internal::deleted_guild(const Event* msg) {
  return *msg->event_.deleted_guild_;
}
const ::protocol::chat::v1::Event_MemberJoined&
Event::_Internal::joined_member(const Event* msg) {
  return *msg->event_.joined_member_;
}
const ::protocol::chat::v1::Event_MemberLeft&
Event::_Internal::left_member(const Event* msg) {
  return *msg->event_.left_member_;
}
const ::protocol::chat::v1::Event_ProfileUpdated&
Event::_Internal::profile_updated(const Event* msg) {
  return *msg->event_.profile_updated_;
}
const ::protocol::chat::v1::Event_Typing&
Event::_Internal::typing(const Event* msg) {
  return *msg->event_.typing_;
}
const ::protocol::chat::v1::Event_RoleCreated&
Event::_Internal::role_created(const Event* msg) {
  return *msg->event_.role_created_;
}
const ::protocol::chat::v1::Event_RoleDeleted&
Event::_Internal::role_deleted(const Event* msg) {
  return *msg->event_.role_deleted_;
}
const ::protocol::chat::v1::Event_RoleMoved&
Event::_Internal::role_moved(const Event* msg) {
  return *msg->event_.role_moved_;
}
const ::protocol::chat::v1::Event_RoleUpdated&
Event::_Internal::role_updated(const Event* msg) {
  return *msg->event_.role_updated_;
}
const ::protocol::chat::v1::Event_RolePermissionsUpdated&
Event::_Internal::role_perms_updated(const Event* msg) {
  return *msg->event_.role_perms_updated_;
}
const ::protocol::chat::v1::Event_UserRolesUpdated&
Event::_Internal::user_roles_updated(const Event* msg) {
  return *msg->event_.user_roles_updated_;
}
const ::protocol::chat::v1::Event_PermissionUpdated&
Event::_Internal::permission_updated(const Event* msg) {
  return *msg->event_.permission_updated_;
}
const ::protocol::chat::v1::Event_EmotePackAdded&
Event::_Internal::emote_pack_added(const Event* msg) {
  return *msg->event_.emote_pack_added_;
}
const ::protocol::chat::v1::Event_EmotePackUpdated&
Event::_Internal::emote_pack_updated(const Event* msg) {
  return *msg->event_.emote_pack_updated_;
}
const ::protocol::chat::v1::Event_EmotePackDeleted&
Event::_Internal::emote_pack_deleted(const Event* msg) {
  return *msg->event_.emote_pack_deleted_;
}
const ::protocol::chat::v1::Event_EmotePackEmotesUpdated&
Event::_Internal::emote_pack_emotes_updated(const Event* msg) {
  return *msg->event_.emote_pack_emotes_updated_;
}
void Event::set_allocated_guild_added_to_list(::protocol::chat::v1::Event_GuildAddedToList* guild_added_to_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (guild_added_to_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guild_added_to_list);
    if (message_arena != submessage_arena) {
      guild_added_to_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guild_added_to_list, submessage_arena);
    }
    set_has_guild_added_to_list();
    event_.guild_added_to_list_ = guild_added_to_list;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.guild_added_to_list)
}
void Event::set_allocated_guild_removed_from_list(::protocol::chat::v1::Event_GuildRemovedFromList* guild_removed_from_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (guild_removed_from_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guild_removed_from_list);
    if (message_arena != submessage_arena) {
      guild_removed_from_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guild_removed_from_list, submessage_arena);
    }
    set_has_guild_removed_from_list();
    event_.guild_removed_from_list_ = guild_removed_from_list;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.guild_removed_from_list)
}
void Event::set_allocated_action_performed(::protocol::chat::v1::Event_ActionPerformed* action_performed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (action_performed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_performed);
    if (message_arena != submessage_arena) {
      action_performed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_performed, submessage_arena);
    }
    set_has_action_performed();
    event_.action_performed_ = action_performed;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.action_performed)
}
void Event::set_allocated_sent_message(::protocol::chat::v1::Event_MessageSent* sent_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (sent_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sent_message);
    if (message_arena != submessage_arena) {
      sent_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_message, submessage_arena);
    }
    set_has_sent_message();
    event_.sent_message_ = sent_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.sent_message)
}
void Event::set_allocated_edited_message(::protocol::chat::v1::Event_MessageUpdated* edited_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (edited_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edited_message);
    if (message_arena != submessage_arena) {
      edited_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edited_message, submessage_arena);
    }
    set_has_edited_message();
    event_.edited_message_ = edited_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.edited_message)
}
void Event::set_allocated_deleted_message(::protocol::chat::v1::Event_MessageDeleted* deleted_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (deleted_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deleted_message);
    if (message_arena != submessage_arena) {
      deleted_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_message, submessage_arena);
    }
    set_has_deleted_message();
    event_.deleted_message_ = deleted_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.deleted_message)
}
void Event::set_allocated_created_channel(::protocol::chat::v1::Event_ChannelCreated* created_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (created_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(created_channel);
    if (message_arena != submessage_arena) {
      created_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_channel, submessage_arena);
    }
    set_has_created_channel();
    event_.created_channel_ = created_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.created_channel)
}
void Event::set_allocated_edited_channel(::protocol::chat::v1::Event_ChannelUpdated* edited_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (edited_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edited_channel);
    if (message_arena != submessage_arena) {
      edited_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edited_channel, submessage_arena);
    }
    set_has_edited_channel();
    event_.edited_channel_ = edited_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.edited_channel)
}
void Event::set_allocated_deleted_channel(::protocol::chat::v1::Event_ChannelDeleted* deleted_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (deleted_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deleted_channel);
    if (message_arena != submessage_arena) {
      deleted_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_channel, submessage_arena);
    }
    set_has_deleted_channel();
    event_.deleted_channel_ = deleted_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.deleted_channel)
}
void Event::set_allocated_channels_reordered(::protocol::chat::v1::Event_ChannelsReordered* channels_reordered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (channels_reordered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channels_reordered);
    if (message_arena != submessage_arena) {
      channels_reordered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channels_reordered, submessage_arena);
    }
    set_has_channels_reordered();
    event_.channels_reordered_ = channels_reordered;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.channels_reordered)
}
void Event::set_allocated_edited_guild(::protocol::chat::v1::Event_GuildUpdated* edited_guild) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (edited_guild) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edited_guild);
    if (message_arena != submessage_arena) {
      edited_guild = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edited_guild, submessage_arena);
    }
    set_has_edited_guild();
    event_.edited_guild_ = edited_guild;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.edited_guild)
}
void Event::set_allocated_deleted_guild(::protocol::chat::v1::Event_GuildDeleted* deleted_guild) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (deleted_guild) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deleted_guild);
    if (message_arena != submessage_arena) {
      deleted_guild = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_guild, submessage_arena);
    }
    set_has_deleted_guild();
    event_.deleted_guild_ = deleted_guild;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.deleted_guild)
}
void Event::set_allocated_joined_member(::protocol::chat::v1::Event_MemberJoined* joined_member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (joined_member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joined_member);
    if (message_arena != submessage_arena) {
      joined_member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joined_member, submessage_arena);
    }
    set_has_joined_member();
    event_.joined_member_ = joined_member;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.joined_member)
}
void Event::set_allocated_left_member(::protocol::chat::v1::Event_MemberLeft* left_member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (left_member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left_member);
    if (message_arena != submessage_arena) {
      left_member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_member, submessage_arena);
    }
    set_has_left_member();
    event_.left_member_ = left_member;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.left_member)
}
void Event::set_allocated_profile_updated(::protocol::chat::v1::Event_ProfileUpdated* profile_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (profile_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profile_updated);
    if (message_arena != submessage_arena) {
      profile_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile_updated, submessage_arena);
    }
    set_has_profile_updated();
    event_.profile_updated_ = profile_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.profile_updated)
}
void Event::set_allocated_typing(::protocol::chat::v1::Event_Typing* typing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (typing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(typing);
    if (message_arena != submessage_arena) {
      typing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typing, submessage_arena);
    }
    set_has_typing();
    event_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.typing)
}
void Event::set_allocated_role_created(::protocol::chat::v1::Event_RoleCreated* role_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (role_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_created);
    if (message_arena != submessage_arena) {
      role_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_created, submessage_arena);
    }
    set_has_role_created();
    event_.role_created_ = role_created;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.role_created)
}
void Event::set_allocated_role_deleted(::protocol::chat::v1::Event_RoleDeleted* role_deleted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (role_deleted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_deleted);
    if (message_arena != submessage_arena) {
      role_deleted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_deleted, submessage_arena);
    }
    set_has_role_deleted();
    event_.role_deleted_ = role_deleted;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.role_deleted)
}
void Event::set_allocated_role_moved(::protocol::chat::v1::Event_RoleMoved* role_moved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (role_moved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_moved);
    if (message_arena != submessage_arena) {
      role_moved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_moved, submessage_arena);
    }
    set_has_role_moved();
    event_.role_moved_ = role_moved;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.role_moved)
}
void Event::set_allocated_role_updated(::protocol::chat::v1::Event_RoleUpdated* role_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (role_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_updated);
    if (message_arena != submessage_arena) {
      role_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_updated, submessage_arena);
    }
    set_has_role_updated();
    event_.role_updated_ = role_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.role_updated)
}
void Event::set_allocated_role_perms_updated(::protocol::chat::v1::Event_RolePermissionsUpdated* role_perms_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (role_perms_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_perms_updated);
    if (message_arena != submessage_arena) {
      role_perms_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_perms_updated, submessage_arena);
    }
    set_has_role_perms_updated();
    event_.role_perms_updated_ = role_perms_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.role_perms_updated)
}
void Event::set_allocated_user_roles_updated(::protocol::chat::v1::Event_UserRolesUpdated* user_roles_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (user_roles_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_roles_updated);
    if (message_arena != submessage_arena) {
      user_roles_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_roles_updated, submessage_arena);
    }
    set_has_user_roles_updated();
    event_.user_roles_updated_ = user_roles_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.user_roles_updated)
}
void Event::set_allocated_permission_updated(::protocol::chat::v1::Event_PermissionUpdated* permission_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (permission_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(permission_updated);
    if (message_arena != submessage_arena) {
      permission_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission_updated, submessage_arena);
    }
    set_has_permission_updated();
    event_.permission_updated_ = permission_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.permission_updated)
}
void Event::set_allocated_emote_pack_added(::protocol::chat::v1::Event_EmotePackAdded* emote_pack_added) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (emote_pack_added) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emote_pack_added);
    if (message_arena != submessage_arena) {
      emote_pack_added = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emote_pack_added, submessage_arena);
    }
    set_has_emote_pack_added();
    event_.emote_pack_added_ = emote_pack_added;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.emote_pack_added)
}
void Event::set_allocated_emote_pack_updated(::protocol::chat::v1::Event_EmotePackUpdated* emote_pack_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (emote_pack_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emote_pack_updated);
    if (message_arena != submessage_arena) {
      emote_pack_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emote_pack_updated, submessage_arena);
    }
    set_has_emote_pack_updated();
    event_.emote_pack_updated_ = emote_pack_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.emote_pack_updated)
}
void Event::set_allocated_emote_pack_deleted(::protocol::chat::v1::Event_EmotePackDeleted* emote_pack_deleted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (emote_pack_deleted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emote_pack_deleted);
    if (message_arena != submessage_arena) {
      emote_pack_deleted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emote_pack_deleted, submessage_arena);
    }
    set_has_emote_pack_deleted();
    event_.emote_pack_deleted_ = emote_pack_deleted;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.emote_pack_deleted)
}
void Event::set_allocated_emote_pack_emotes_updated(::protocol::chat::v1::Event_EmotePackEmotesUpdated* emote_pack_emotes_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (emote_pack_emotes_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emote_pack_emotes_updated);
    if (message_arena != submessage_arena) {
      emote_pack_emotes_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emote_pack_emotes_updated, submessage_arena);
    }
    set_has_emote_pack_emotes_updated();
    event_.emote_pack_emotes_updated_ = emote_pack_emotes_updated;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Event.emote_pack_emotes_updated)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kGuildAddedToList: {
      _internal_mutable_guild_added_to_list()->::protocol::chat::v1::Event_GuildAddedToList::MergeFrom(from._internal_guild_added_to_list());
      break;
    }
    case kGuildRemovedFromList: {
      _internal_mutable_guild_removed_from_list()->::protocol::chat::v1::Event_GuildRemovedFromList::MergeFrom(from._internal_guild_removed_from_list());
      break;
    }
    case kActionPerformed: {
      _internal_mutable_action_performed()->::protocol::chat::v1::Event_ActionPerformed::MergeFrom(from._internal_action_performed());
      break;
    }
    case kSentMessage: {
      _internal_mutable_sent_message()->::protocol::chat::v1::Event_MessageSent::MergeFrom(from._internal_sent_message());
      break;
    }
    case kEditedMessage: {
      _internal_mutable_edited_message()->::protocol::chat::v1::Event_MessageUpdated::MergeFrom(from._internal_edited_message());
      break;
    }
    case kDeletedMessage: {
      _internal_mutable_deleted_message()->::protocol::chat::v1::Event_MessageDeleted::MergeFrom(from._internal_deleted_message());
      break;
    }
    case kCreatedChannel: {
      _internal_mutable_created_channel()->::protocol::chat::v1::Event_ChannelCreated::MergeFrom(from._internal_created_channel());
      break;
    }
    case kEditedChannel: {
      _internal_mutable_edited_channel()->::protocol::chat::v1::Event_ChannelUpdated::MergeFrom(from._internal_edited_channel());
      break;
    }
    case kDeletedChannel: {
      _internal_mutable_deleted_channel()->::protocol::chat::v1::Event_ChannelDeleted::MergeFrom(from._internal_deleted_channel());
      break;
    }
    case kChannelsReordered: {
      _internal_mutable_channels_reordered()->::protocol::chat::v1::Event_ChannelsReordered::MergeFrom(from._internal_channels_reordered());
      break;
    }
    case kEditedGuild: {
      _internal_mutable_edited_guild()->::protocol::chat::v1::Event_GuildUpdated::MergeFrom(from._internal_edited_guild());
      break;
    }
    case kDeletedGuild: {
      _internal_mutable_deleted_guild()->::protocol::chat::v1::Event_GuildDeleted::MergeFrom(from._internal_deleted_guild());
      break;
    }
    case kJoinedMember: {
      _internal_mutable_joined_member()->::protocol::chat::v1::Event_MemberJoined::MergeFrom(from._internal_joined_member());
      break;
    }
    case kLeftMember: {
      _internal_mutable_left_member()->::protocol::chat::v1::Event_MemberLeft::MergeFrom(from._internal_left_member());
      break;
    }
    case kProfileUpdated: {
      _internal_mutable_profile_updated()->::protocol::chat::v1::Event_ProfileUpdated::MergeFrom(from._internal_profile_updated());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::protocol::chat::v1::Event_Typing::MergeFrom(from._internal_typing());
      break;
    }
    case kRoleCreated: {
      _internal_mutable_role_created()->::protocol::chat::v1::Event_RoleCreated::MergeFrom(from._internal_role_created());
      break;
    }
    case kRoleDeleted: {
      _internal_mutable_role_deleted()->::protocol::chat::v1::Event_RoleDeleted::MergeFrom(from._internal_role_deleted());
      break;
    }
    case kRoleMoved: {
      _internal_mutable_role_moved()->::protocol::chat::v1::Event_RoleMoved::MergeFrom(from._internal_role_moved());
      break;
    }
    case kRoleUpdated: {
      _internal_mutable_role_updated()->::protocol::chat::v1::Event_RoleUpdated::MergeFrom(from._internal_role_updated());
      break;
    }
    case kRolePermsUpdated: {
      _internal_mutable_role_perms_updated()->::protocol::chat::v1::Event_RolePermissionsUpdated::MergeFrom(from._internal_role_perms_updated());
      break;
    }
    case kUserRolesUpdated: {
      _internal_mutable_user_roles_updated()->::protocol::chat::v1::Event_UserRolesUpdated::MergeFrom(from._internal_user_roles_updated());
      break;
    }
    case kPermissionUpdated: {
      _internal_mutable_permission_updated()->::protocol::chat::v1::Event_PermissionUpdated::MergeFrom(from._internal_permission_updated());
      break;
    }
    case kEmotePackAdded: {
      _internal_mutable_emote_pack_added()->::protocol::chat::v1::Event_EmotePackAdded::MergeFrom(from._internal_emote_pack_added());
      break;
    }
    case kEmotePackUpdated: {
      _internal_mutable_emote_pack_updated()->::protocol::chat::v1::Event_EmotePackUpdated::MergeFrom(from._internal_emote_pack_updated());
      break;
    }
    case kEmotePackDeleted: {
      _internal_mutable_emote_pack_deleted()->::protocol::chat::v1::Event_EmotePackDeleted::MergeFrom(from._internal_emote_pack_deleted());
      break;
    }
    case kEmotePackEmotesUpdated: {
      _internal_mutable_emote_pack_emotes_updated()->::protocol::chat::v1::Event_EmotePackEmotesUpdated::MergeFrom(from._internal_emote_pack_emotes_updated());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_chat_2fv1_2fstreaming_2eproto.base);
  clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_chat_2fv1_2fstreaming_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:protocol.chat.v1.Event)
  switch (event_case()) {
    case kGuildAddedToList: {
      if (GetArena() == nullptr) {
        delete event_.guild_added_to_list_;
      }
      break;
    }
    case kGuildRemovedFromList: {
      if (GetArena() == nullptr) {
        delete event_.guild_removed_from_list_;
      }
      break;
    }
    case kActionPerformed: {
      if (GetArena() == nullptr) {
        delete event_.action_performed_;
      }
      break;
    }
    case kSentMessage: {
      if (GetArena() == nullptr) {
        delete event_.sent_message_;
      }
      break;
    }
    case kEditedMessage: {
      if (GetArena() == nullptr) {
        delete event_.edited_message_;
      }
      break;
    }
    case kDeletedMessage: {
      if (GetArena() == nullptr) {
        delete event_.deleted_message_;
      }
      break;
    }
    case kCreatedChannel: {
      if (GetArena() == nullptr) {
        delete event_.created_channel_;
      }
      break;
    }
    case kEditedChannel: {
      if (GetArena() == nullptr) {
        delete event_.edited_channel_;
      }
      break;
    }
    case kDeletedChannel: {
      if (GetArena() == nullptr) {
        delete event_.deleted_channel_;
      }
      break;
    }
    case kChannelsReordered: {
      if (GetArena() == nullptr) {
        delete event_.channels_reordered_;
      }
      break;
    }
    case kEditedGuild: {
      if (GetArena() == nullptr) {
        delete event_.edited_guild_;
      }
      break;
    }
    case kDeletedGuild: {
      if (GetArena() == nullptr) {
        delete event_.deleted_guild_;
      }
      break;
    }
    case kJoinedMember: {
      if (GetArena() == nullptr) {
        delete event_.joined_member_;
      }
      break;
    }
    case kLeftMember: {
      if (GetArena() == nullptr) {
        delete event_.left_member_;
      }
      break;
    }
    case kProfileUpdated: {
      if (GetArena() == nullptr) {
        delete event_.profile_updated_;
      }
      break;
    }
    case kTyping: {
      if (GetArena() == nullptr) {
        delete event_.typing_;
      }
      break;
    }
    case kRoleCreated: {
      if (GetArena() == nullptr) {
        delete event_.role_created_;
      }
      break;
    }
    case kRoleDeleted: {
      if (GetArena() == nullptr) {
        delete event_.role_deleted_;
      }
      break;
    }
    case kRoleMoved: {
      if (GetArena() == nullptr) {
        delete event_.role_moved_;
      }
      break;
    }
    case kRoleUpdated: {
      if (GetArena() == nullptr) {
        delete event_.role_updated_;
      }
      break;
    }
    case kRolePermsUpdated: {
      if (GetArena() == nullptr) {
        delete event_.role_perms_updated_;
      }
      break;
    }
    case kUserRolesUpdated: {
      if (GetArena() == nullptr) {
        delete event_.user_roles_updated_;
      }
      break;
    }
    case kPermissionUpdated: {
      if (GetArena() == nullptr) {
        delete event_.permission_updated_;
      }
      break;
    }
    case kEmotePackAdded: {
      if (GetArena() == nullptr) {
        delete event_.emote_pack_added_;
      }
      break;
    }
    case kEmotePackUpdated: {
      if (GetArena() == nullptr) {
        delete event_.emote_pack_updated_;
      }
      break;
    }
    case kEmotePackDeleted: {
      if (GetArena() == nullptr) {
        delete event_.emote_pack_deleted_;
      }
      break;
    }
    case kEmotePackEmotesUpdated: {
      if (GetArena() == nullptr) {
        delete event_.emote_pack_emotes_updated_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_added_to_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_removed_from_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ActionPerformed action_performed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_performed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.MessageSent sent_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.MessageUpdated edited_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_edited_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ChannelCreated created_channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_edited_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_edited_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.MemberJoined joined_member = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_joined_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.MemberLeft left_member = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.Typing typing = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_typing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.RoleCreated role_created = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_deleted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.RoleMoved role_moved = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_moved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.RoleUpdated role_updated = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_perms_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_roles_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_emote_pack_added(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_emote_pack_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_emote_pack_deleted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_emote_pack_emotes_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_channels_reordered(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
  if (_internal_has_guild_added_to_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guild_added_to_list(this), target, stream);
  }

  // .protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
  if (_internal_has_guild_removed_from_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::guild_removed_from_list(this), target, stream);
  }

  // .protocol.chat.v1.Event.ActionPerformed action_performed = 3;
  if (_internal_has_action_performed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action_performed(this), target, stream);
  }

  // .protocol.chat.v1.Event.MessageSent sent_message = 4;
  if (_internal_has_sent_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sent_message(this), target, stream);
  }

  // .protocol.chat.v1.Event.MessageUpdated edited_message = 5;
  if (_internal_has_edited_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::edited_message(this), target, stream);
  }

  // .protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
  if (_internal_has_deleted_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deleted_message(this), target, stream);
  }

  // .protocol.chat.v1.Event.ChannelCreated created_channel = 7;
  if (_internal_has_created_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::created_channel(this), target, stream);
  }

  // .protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
  if (_internal_has_edited_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::edited_channel(this), target, stream);
  }

  // .protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
  if (_internal_has_deleted_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::deleted_channel(this), target, stream);
  }

  // .protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
  if (_internal_has_edited_guild()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::edited_guild(this), target, stream);
  }

  // .protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
  if (_internal_has_deleted_guild()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::deleted_guild(this), target, stream);
  }

  // .protocol.chat.v1.Event.MemberJoined joined_member = 12;
  if (_internal_has_joined_member()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::joined_member(this), target, stream);
  }

  // .protocol.chat.v1.Event.MemberLeft left_member = 13;
  if (_internal_has_left_member()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::left_member(this), target, stream);
  }

  // .protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
  if (_internal_has_profile_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::profile_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.Typing typing = 15;
  if (_internal_has_typing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::typing(this), target, stream);
  }

  // .protocol.chat.v1.Event.RoleCreated role_created = 16;
  if (_internal_has_role_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::role_created(this), target, stream);
  }

  // .protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
  if (_internal_has_role_deleted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::role_deleted(this), target, stream);
  }

  // .protocol.chat.v1.Event.RoleMoved role_moved = 18;
  if (_internal_has_role_moved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::role_moved(this), target, stream);
  }

  // .protocol.chat.v1.Event.RoleUpdated role_updated = 19;
  if (_internal_has_role_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::role_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
  if (_internal_has_role_perms_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::role_perms_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
  if (_internal_has_user_roles_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::user_roles_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
  if (_internal_has_permission_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::permission_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
  if (_internal_has_emote_pack_added()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::emote_pack_added(this), target, stream);
  }

  // .protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
  if (_internal_has_emote_pack_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::emote_pack_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
  if (_internal_has_emote_pack_deleted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::emote_pack_deleted(this), target, stream);
  }

  // .protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
  if (_internal_has_emote_pack_emotes_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::emote_pack_emotes_updated(this), target, stream);
  }

  // .protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
  if (_internal_has_channels_reordered()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::channels_reordered(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .protocol.chat.v1.Event.GuildAddedToList guild_added_to_list = 1;
    case kGuildAddedToList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.guild_added_to_list_);
      break;
    }
    // .protocol.chat.v1.Event.GuildRemovedFromList guild_removed_from_list = 2;
    case kGuildRemovedFromList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.guild_removed_from_list_);
      break;
    }
    // .protocol.chat.v1.Event.ActionPerformed action_performed = 3;
    case kActionPerformed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.action_performed_);
      break;
    }
    // .protocol.chat.v1.Event.MessageSent sent_message = 4;
    case kSentMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.sent_message_);
      break;
    }
    // .protocol.chat.v1.Event.MessageUpdated edited_message = 5;
    case kEditedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.edited_message_);
      break;
    }
    // .protocol.chat.v1.Event.MessageDeleted deleted_message = 6;
    case kDeletedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.deleted_message_);
      break;
    }
    // .protocol.chat.v1.Event.ChannelCreated created_channel = 7;
    case kCreatedChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.created_channel_);
      break;
    }
    // .protocol.chat.v1.Event.ChannelUpdated edited_channel = 8;
    case kEditedChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.edited_channel_);
      break;
    }
    // .protocol.chat.v1.Event.ChannelDeleted deleted_channel = 9;
    case kDeletedChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.deleted_channel_);
      break;
    }
    // .protocol.chat.v1.Event.ChannelsReordered channels_reordered = 27;
    case kChannelsReordered: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.channels_reordered_);
      break;
    }
    // .protocol.chat.v1.Event.GuildUpdated edited_guild = 10;
    case kEditedGuild: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.edited_guild_);
      break;
    }
    // .protocol.chat.v1.Event.GuildDeleted deleted_guild = 11;
    case kDeletedGuild: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.deleted_guild_);
      break;
    }
    // .protocol.chat.v1.Event.MemberJoined joined_member = 12;
    case kJoinedMember: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.joined_member_);
      break;
    }
    // .protocol.chat.v1.Event.MemberLeft left_member = 13;
    case kLeftMember: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.left_member_);
      break;
    }
    // .protocol.chat.v1.Event.ProfileUpdated profile_updated = 14;
    case kProfileUpdated: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.profile_updated_);
      break;
    }
    // .protocol.chat.v1.Event.Typing typing = 15;
    case kTyping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.typing_);
      break;
    }
    // .protocol.chat.v1.Event.RoleCreated role_created = 16;
    case kRoleCreated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.role_created_);
      break;
    }
    // .protocol.chat.v1.Event.RoleDeleted role_deleted = 17;
    case kRoleDeleted: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.role_deleted_);
      break;
    }
    // .protocol.chat.v1.Event.RoleMoved role_moved = 18;
    case kRoleMoved: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.role_moved_);
      break;
    }
    // .protocol.chat.v1.Event.RoleUpdated role_updated = 19;
    case kRoleUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.role_updated_);
      break;
    }
    // .protocol.chat.v1.Event.RolePermissionsUpdated role_perms_updated = 20;
    case kRolePermsUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.role_perms_updated_);
      break;
    }
    // .protocol.chat.v1.Event.UserRolesUpdated user_roles_updated = 21;
    case kUserRolesUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.user_roles_updated_);
      break;
    }
    // .protocol.chat.v1.Event.PermissionUpdated permission_updated = 22;
    case kPermissionUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.permission_updated_);
      break;
    }
    // .protocol.chat.v1.Event.EmotePackAdded emote_pack_added = 23;
    case kEmotePackAdded: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.emote_pack_added_);
      break;
    }
    // .protocol.chat.v1.Event.EmotePackUpdated emote_pack_updated = 24;
    case kEmotePackUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.emote_pack_updated_);
      break;
    }
    // .protocol.chat.v1.Event.EmotePackDeleted emote_pack_deleted = 25;
    case kEmotePackDeleted: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.emote_pack_deleted_);
      break;
    }
    // .protocol.chat.v1.Event.EmotePackEmotesUpdated emote_pack_emotes_updated = 26;
    case kEmotePackEmotesUpdated: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.emote_pack_emotes_updated_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kGuildAddedToList: {
      _internal_mutable_guild_added_to_list()->::protocol::chat::v1::Event_GuildAddedToList::MergeFrom(from._internal_guild_added_to_list());
      break;
    }
    case kGuildRemovedFromList: {
      _internal_mutable_guild_removed_from_list()->::protocol::chat::v1::Event_GuildRemovedFromList::MergeFrom(from._internal_guild_removed_from_list());
      break;
    }
    case kActionPerformed: {
      _internal_mutable_action_performed()->::protocol::chat::v1::Event_ActionPerformed::MergeFrom(from._internal_action_performed());
      break;
    }
    case kSentMessage: {
      _internal_mutable_sent_message()->::protocol::chat::v1::Event_MessageSent::MergeFrom(from._internal_sent_message());
      break;
    }
    case kEditedMessage: {
      _internal_mutable_edited_message()->::protocol::chat::v1::Event_MessageUpdated::MergeFrom(from._internal_edited_message());
      break;
    }
    case kDeletedMessage: {
      _internal_mutable_deleted_message()->::protocol::chat::v1::Event_MessageDeleted::MergeFrom(from._internal_deleted_message());
      break;
    }
    case kCreatedChannel: {
      _internal_mutable_created_channel()->::protocol::chat::v1::Event_ChannelCreated::MergeFrom(from._internal_created_channel());
      break;
    }
    case kEditedChannel: {
      _internal_mutable_edited_channel()->::protocol::chat::v1::Event_ChannelUpdated::MergeFrom(from._internal_edited_channel());
      break;
    }
    case kDeletedChannel: {
      _internal_mutable_deleted_channel()->::protocol::chat::v1::Event_ChannelDeleted::MergeFrom(from._internal_deleted_channel());
      break;
    }
    case kChannelsReordered: {
      _internal_mutable_channels_reordered()->::protocol::chat::v1::Event_ChannelsReordered::MergeFrom(from._internal_channels_reordered());
      break;
    }
    case kEditedGuild: {
      _internal_mutable_edited_guild()->::protocol::chat::v1::Event_GuildUpdated::MergeFrom(from._internal_edited_guild());
      break;
    }
    case kDeletedGuild: {
      _internal_mutable_deleted_guild()->::protocol::chat::v1::Event_GuildDeleted::MergeFrom(from._internal_deleted_guild());
      break;
    }
    case kJoinedMember: {
      _internal_mutable_joined_member()->::protocol::chat::v1::Event_MemberJoined::MergeFrom(from._internal_joined_member());
      break;
    }
    case kLeftMember: {
      _internal_mutable_left_member()->::protocol::chat::v1::Event_MemberLeft::MergeFrom(from._internal_left_member());
      break;
    }
    case kProfileUpdated: {
      _internal_mutable_profile_updated()->::protocol::chat::v1::Event_ProfileUpdated::MergeFrom(from._internal_profile_updated());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::protocol::chat::v1::Event_Typing::MergeFrom(from._internal_typing());
      break;
    }
    case kRoleCreated: {
      _internal_mutable_role_created()->::protocol::chat::v1::Event_RoleCreated::MergeFrom(from._internal_role_created());
      break;
    }
    case kRoleDeleted: {
      _internal_mutable_role_deleted()->::protocol::chat::v1::Event_RoleDeleted::MergeFrom(from._internal_role_deleted());
      break;
    }
    case kRoleMoved: {
      _internal_mutable_role_moved()->::protocol::chat::v1::Event_RoleMoved::MergeFrom(from._internal_role_moved());
      break;
    }
    case kRoleUpdated: {
      _internal_mutable_role_updated()->::protocol::chat::v1::Event_RoleUpdated::MergeFrom(from._internal_role_updated());
      break;
    }
    case kRolePermsUpdated: {
      _internal_mutable_role_perms_updated()->::protocol::chat::v1::Event_RolePermissionsUpdated::MergeFrom(from._internal_role_perms_updated());
      break;
    }
    case kUserRolesUpdated: {
      _internal_mutable_user_roles_updated()->::protocol::chat::v1::Event_UserRolesUpdated::MergeFrom(from._internal_user_roles_updated());
      break;
    }
    case kPermissionUpdated: {
      _internal_mutable_permission_updated()->::protocol::chat::v1::Event_PermissionUpdated::MergeFrom(from._internal_permission_updated());
      break;
    }
    case kEmotePackAdded: {
      _internal_mutable_emote_pack_added()->::protocol::chat::v1::Event_EmotePackAdded::MergeFrom(from._internal_emote_pack_added());
      break;
    }
    case kEmotePackUpdated: {
      _internal_mutable_emote_pack_updated()->::protocol::chat::v1::Event_EmotePackUpdated::MergeFrom(from._internal_emote_pack_updated());
      break;
    }
    case kEmotePackDeleted: {
      _internal_mutable_emote_pack_deleted()->::protocol::chat::v1::Event_EmotePackDeleted::MergeFrom(from._internal_emote_pack_deleted());
      break;
    }
    case kEmotePackEmotesUpdated: {
      _internal_mutable_emote_pack_emotes_updated()->::protocol::chat::v1::Event_EmotePackEmotesUpdated::MergeFrom(from._internal_emote_pack_emotes_updated());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild* Arena::CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::StreamEventsRequest_SubscribeToGuild >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions* Arena::CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::StreamEventsRequest_SubscribeToActions >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents* Arena::CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::StreamEventsRequest_SubscribeToHomeserverEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::StreamEventsRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::StreamEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::StreamEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_MessageSent* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_MessageSent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_MessageSent >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_MessageUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_MessageUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_MessageUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_MessageDeleted* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_MessageDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_MessageDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ChannelCreated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ChannelCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ChannelUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ChannelUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ChannelsReordered* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelsReordered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ChannelsReordered >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ChannelDeleted* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ChannelDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ChannelDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_GuildUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_GuildUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_GuildUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_GuildDeleted* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_GuildDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_GuildDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_MemberJoined* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_MemberJoined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_MemberJoined >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_MemberLeft* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_MemberLeft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_MemberLeft >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_GuildAddedToList* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_GuildAddedToList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_GuildAddedToList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_GuildRemovedFromList* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_GuildRemovedFromList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_GuildRemovedFromList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ActionPerformed* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ActionPerformed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ActionPerformed >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_RoleMoved* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_RoleMoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_RoleMoved >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_RoleDeleted* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_RoleDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_RoleDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_RoleCreated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_RoleCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_RoleCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_RoleUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_RoleUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_RoleUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_RolePermissionsUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_RolePermissionsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_RolePermissionsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_UserRolesUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_UserRolesUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_UserRolesUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_ProfileUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_ProfileUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_ProfileUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_Typing* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_Typing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_Typing >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_PermissionUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_PermissionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_PermissionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_EmotePackUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_EmotePackUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_EmotePackDeleted* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackDeleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_EmotePackDeleted >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_EmotePackAdded* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackAdded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_EmotePackAdded >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event_EmotePackEmotesUpdated* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event_EmotePackEmotesUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event_EmotePackEmotesUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Event* Arena::CreateMaybeMessage< ::protocol::chat::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
