// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/messages.proto

#include "chat/v1/messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Content_harmonytypes_2fv1_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Message_harmonytypes_2fv1_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Override_harmonytypes_2fv1_2ftypes_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class GetChannelMessagesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelMessagesRequest> _instance;
} _GetChannelMessagesRequest_default_instance_;
class GetChannelMessagesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelMessagesResponse> _instance;
} _GetChannelMessagesResponse_default_instance_;
class GetMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMessageRequest> _instance;
} _GetMessageRequest_default_instance_;
class GetMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMessageResponse> _instance;
} _GetMessageResponse_default_instance_;
class DeleteMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMessageRequest> _instance;
} _DeleteMessageRequest_default_instance_;
class TriggerActionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerActionRequest> _instance;
} _TriggerActionRequest_default_instance_;
class SendMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageRequest> _instance;
} _SendMessageRequest_default_instance_;
class SendMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageResponse> _instance;
} _SendMessageResponse_default_instance_;
class UpdateMessageTextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMessageTextRequest> _instance;
} _UpdateMessageTextRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
static void InitDefaultsscc_info_DeleteMessageRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DeleteMessageRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DeleteMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DeleteMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMessageRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMessageRequest_chat_2fv1_2fmessages_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelMessagesRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetChannelMessagesRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetChannelMessagesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetChannelMessagesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelMessagesRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChannelMessagesRequest_chat_2fv1_2fmessages_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetChannelMessagesResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetChannelMessagesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetChannelMessagesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto}, {
      &scc_info_Message_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_GetMessageRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetMessageRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMessageRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMessageRequest_chat_2fv1_2fmessages_2eproto}, {}};

static void InitDefaultsscc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetMessageResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto}, {
      &scc_info_Message_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_SendMessageRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::SendMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::SendMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto}, {
      &scc_info_Content_harmonytypes_2fv1_2ftypes_2eproto.base,
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,
      &scc_info_Override_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageResponse_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_SendMessageResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::SendMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::SendMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendMessageResponse_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendMessageResponse_chat_2fv1_2fmessages_2eproto}, {}};

static void InitDefaultsscc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_TriggerActionRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::TriggerActionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::TriggerActionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto}, {}};

static void InitDefaultsscc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_UpdateMessageTextRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::UpdateMessageTextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::UpdateMessageTextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2fv1_2fmessages_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chat_2fv1_2fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2fv1_2fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2fv1_2fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesRequest, before_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesResponse, reached_top_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetChannelMessagesResponse, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetMessageResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteMessageRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteMessageRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteMessageRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, action_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TriggerActionRequest, action_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, content_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, echo_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, overrides_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageRequest, in_reply_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SendMessageResponse, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateMessageTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateMessageTextRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateMessageTextRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateMessageTextRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateMessageTextRequest, new_content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::chat::v1::GetChannelMessagesRequest)},
  { 8, -1, sizeof(::protocol::chat::v1::GetChannelMessagesResponse)},
  { 15, -1, sizeof(::protocol::chat::v1::GetMessageRequest)},
  { 23, -1, sizeof(::protocol::chat::v1::GetMessageResponse)},
  { 29, -1, sizeof(::protocol::chat::v1::DeleteMessageRequest)},
  { 37, -1, sizeof(::protocol::chat::v1::TriggerActionRequest)},
  { 47, -1, sizeof(::protocol::chat::v1::SendMessageRequest)},
  { 59, -1, sizeof(::protocol::chat::v1::SendMessageResponse)},
  { 65, -1, sizeof(::protocol::chat::v1::UpdateMessageTextRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetChannelMessagesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetChannelMessagesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DeleteMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_TriggerActionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_SendMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_SendMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_UpdateMessageTextRequest_default_instance_),
};

const char descriptor_table_protodef_chat_2fv1_2fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026chat/v1/messages.proto\022\020protocol.chat."
  "v1\032\033harmonytypes/v1/types.proto\"e\n\031GetCh"
  "annelMessagesRequest\022\024\n\010guild_id\030\001 \001(\004B\002"
  "0\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\032\n\016before_mes"
  "sage\030\003 \001(\004B\0020\001\"f\n\032GetChannelMessagesResp"
  "onse\022\023\n\013reached_top\030\001 \001(\010\0223\n\010messages\030\002 "
  "\003(\0132!.protocol.harmonytypes.v1.Message\"Y"
  "\n\021GetMessageRequest\022\024\n\010guild_id\030\001 \001(\004B\0020"
  "\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\026\n\nmessage_id\030"
  "\003 \001(\004B\0020\001\"H\n\022GetMessageResponse\0222\n\007messa"
  "ge\030\001 \001(\0132!.protocol.harmonytypes.v1.Mess"
  "age\"\\\n\024DeleteMessageRequest\022\024\n\010guild_id\030"
  "\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\026\n\nmes"
  "sage_id\030\003 \001(\004B\0020\001\"\204\001\n\024TriggerActionReque"
  "st\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002"
  " \001(\004B\0020\001\022\026\n\nmessage_id\030\003 \001(\004B\0020\001\022\021\n\tacti"
  "on_id\030\004 \001(\t\022\023\n\013action_data\030\005 \001(\t\"\215\002\n\022Sen"
  "dMessageRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\026\n"
  "\nchannel_id\030\002 \001(\004B\0020\001\0222\n\007content\030\003 \001(\0132!"
  ".protocol.harmonytypes.v1.Content\022\017\n\007ech"
  "o_id\030\004 \001(\004\0224\n\010metadata\030\005 \001(\0132\".protocol."
  "harmonytypes.v1.Metadata\0225\n\toverrides\030\006 "
  "\001(\0132\".protocol.harmonytypes.v1.Override\022"
  "\027\n\013in_reply_to\030\007 \001(\004B\0020\001\"-\n\023SendMessageR"
  "esponse\022\026\n\nmessage_id\030\001 \001(\004B\0020\001\"u\n\030Updat"
  "eMessageTextRequest\022\024\n\010guild_id\030\001 \001(\004B\0020"
  "\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\026\n\nmessage_id\030"
  "\003 \001(\004B\0020\001\022\023\n\013new_content\030\004 \001(\tB3Z1github"
  ".com/harmony-development/legato/gen/chat"
  "/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2fv1_2fmessages_2eproto_deps[1] = {
  &::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2fv1_2fmessages_2eproto_sccs[9] = {
  &scc_info_DeleteMessageRequest_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_GetChannelMessagesRequest_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_GetMessageRequest_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_SendMessageResponse_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto.base,
  &scc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2fv1_2fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fmessages_2eproto = {
  false, false, descriptor_table_protodef_chat_2fv1_2fmessages_2eproto, "chat/v1/messages.proto", 1171,
  &descriptor_table_chat_2fv1_2fmessages_2eproto_once, descriptor_table_chat_2fv1_2fmessages_2eproto_sccs, descriptor_table_chat_2fv1_2fmessages_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_chat_2fv1_2fmessages_2eproto::offsets,
  file_level_metadata_chat_2fv1_2fmessages_2eproto, 9, file_level_enum_descriptors_chat_2fv1_2fmessages_2eproto, file_level_service_descriptors_chat_2fv1_2fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2fv1_2fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2fv1_2fmessages_2eproto)), true);
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

void GetChannelMessagesRequest::InitAsDefaultInstance() {
}
class GetChannelMessagesRequest::_Internal {
 public:
};

GetChannelMessagesRequest::GetChannelMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetChannelMessagesRequest)
}
GetChannelMessagesRequest::GetChannelMessagesRequest(const GetChannelMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&before_message_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(before_message_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetChannelMessagesRequest)
}

void GetChannelMessagesRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_message_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(before_message_));
}

GetChannelMessagesRequest::~GetChannelMessagesRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetChannelMessagesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChannelMessagesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChannelMessagesRequest::ArenaDtor(void* object) {
  GetChannelMessagesRequest* _this = reinterpret_cast< GetChannelMessagesRequest* >(object);
  (void)_this;
}
void GetChannelMessagesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelMessagesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelMessagesRequest& GetChannelMessagesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelMessagesRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void GetChannelMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetChannelMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_message_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(before_message_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelMessagesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 before_message = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          before_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelMessagesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetChannelMessagesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 before_message = 3 [jstype = JS_STRING];
  if (this->before_message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_before_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetChannelMessagesRequest)
  return target;
}

size_t GetChannelMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetChannelMessagesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 before_message = 3 [jstype = JS_STRING];
  if (this->before_message() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_before_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelMessagesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelMessagesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelMessagesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetChannelMessagesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetChannelMessagesRequest)
    MergeFrom(*source);
  }
}

void GetChannelMessagesRequest::MergeFrom(const GetChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetChannelMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.before_message() != 0) {
    _internal_set_before_message(from._internal_before_message());
  }
}

void GetChannelMessagesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelMessagesRequest::CopyFrom(const GetChannelMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetChannelMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelMessagesRequest::IsInitialized() const {
  return true;
}

void GetChannelMessagesRequest::InternalSwap(GetChannelMessagesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChannelMessagesRequest, before_message_)
      + sizeof(GetChannelMessagesRequest::before_message_)
      - PROTOBUF_FIELD_OFFSET(GetChannelMessagesRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelMessagesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChannelMessagesResponse::InitAsDefaultInstance() {
}
class GetChannelMessagesResponse::_Internal {
 public:
};

void GetChannelMessagesResponse::clear_messages() {
  messages_.Clear();
}
GetChannelMessagesResponse::GetChannelMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetChannelMessagesResponse)
}
GetChannelMessagesResponse::GetChannelMessagesResponse(const GetChannelMessagesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reached_top_ = from.reached_top_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetChannelMessagesResponse)
}

void GetChannelMessagesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto.base);
  reached_top_ = false;
}

GetChannelMessagesResponse::~GetChannelMessagesResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetChannelMessagesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChannelMessagesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChannelMessagesResponse::ArenaDtor(void* object) {
  GetChannelMessagesResponse* _this = reinterpret_cast< GetChannelMessagesResponse* >(object);
  (void)_this;
}
void GetChannelMessagesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelMessagesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelMessagesResponse& GetChannelMessagesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelMessagesResponse_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void GetChannelMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetChannelMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  reached_top_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelMessagesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool reached_top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reached_top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.harmonytypes.v1.Message messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelMessagesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetChannelMessagesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool reached_top = 1;
  if (this->reached_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reached_top(), target);
  }

  // repeated .protocol.harmonytypes.v1.Message messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetChannelMessagesResponse)
  return target;
}

size_t GetChannelMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetChannelMessagesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.harmonytypes.v1.Message messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool reached_top = 1;
  if (this->reached_top() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelMessagesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetChannelMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelMessagesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelMessagesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetChannelMessagesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetChannelMessagesResponse)
    MergeFrom(*source);
  }
}

void GetChannelMessagesResponse::MergeFrom(const GetChannelMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetChannelMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.reached_top() != 0) {
    _internal_set_reached_top(from._internal_reached_top());
  }
}

void GetChannelMessagesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetChannelMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelMessagesResponse::CopyFrom(const GetChannelMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetChannelMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelMessagesResponse::IsInitialized() const {
  return true;
}

void GetChannelMessagesResponse::InternalSwap(GetChannelMessagesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
  swap(reached_top_, other->reached_top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelMessagesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMessageRequest::InitAsDefaultInstance() {
}
class GetMessageRequest::_Internal {
 public:
};

GetMessageRequest::GetMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetMessageRequest)
}
GetMessageRequest::GetMessageRequest(const GetMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetMessageRequest)
}

void GetMessageRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

GetMessageRequest::~GetMessageRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetMessageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMessageRequest::ArenaDtor(void* object) {
  GetMessageRequest* _this = reinterpret_cast< GetMessageRequest* >(object);
  (void)_this;
}
void GetMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMessageRequest& GetMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMessageRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void GetMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetMessageRequest)
  return target;
}

size_t GetMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetMessageRequest)
    MergeFrom(*source);
  }
}

void GetMessageRequest::MergeFrom(const GetMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void GetMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageRequest::CopyFrom(const GetMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageRequest::IsInitialized() const {
  return true;
}

void GetMessageRequest::InternalSwap(GetMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMessageRequest, message_id_)
      + sizeof(GetMessageRequest::message_id_)
      - PROTOBUF_FIELD_OFFSET(GetMessageRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMessageResponse::InitAsDefaultInstance() {
  ::protocol::chat::v1::_GetMessageResponse_default_instance_._instance.get_mutable()->message_ = const_cast< ::protocol::harmonytypes::v1::Message*>(
      ::protocol::harmonytypes::v1::Message::internal_default_instance());
}
class GetMessageResponse::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Message& message(const GetMessageResponse* msg);
};

const ::protocol::harmonytypes::v1::Message&
GetMessageResponse::_Internal::message(const GetMessageResponse* msg) {
  return *msg->message_;
}
void GetMessageResponse::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
GetMessageResponse::GetMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetMessageResponse)
}
GetMessageResponse::GetMessageResponse(const GetMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::protocol::harmonytypes::v1::Message(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetMessageResponse)
}

void GetMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto.base);
  message_ = nullptr;
}

GetMessageResponse::~GetMessageResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void GetMessageResponse::ArenaDtor(void* object) {
  GetMessageResponse* _this = reinterpret_cast< GetMessageResponse* >(object);
  (void)_this;
}
void GetMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMessageResponse& GetMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMessageResponse_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void GetMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.harmonytypes.v1.Message message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.harmonytypes.v1.Message message = 1;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetMessageResponse)
  return target;
}

size_t GetMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.harmonytypes.v1.Message message = 1;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetMessageResponse)
    MergeFrom(*source);
  }
}

void GetMessageResponse::MergeFrom(const GetMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _internal_mutable_message()->::protocol::harmonytypes::v1::Message::MergeFrom(from._internal_message());
  }
}

void GetMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageResponse::CopyFrom(const GetMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageResponse::IsInitialized() const {
  return true;
}

void GetMessageResponse::InternalSwap(GetMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMessageRequest::InitAsDefaultInstance() {
}
class DeleteMessageRequest::_Internal {
 public:
};

DeleteMessageRequest::DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DeleteMessageRequest)
}
DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DeleteMessageRequest)
}

void DeleteMessageRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

DeleteMessageRequest::~DeleteMessageRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DeleteMessageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMessageRequest::ArenaDtor(void* object) {
  DeleteMessageRequest* _this = reinterpret_cast< DeleteMessageRequest* >(object);
  (void)_this;
}
void DeleteMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMessageRequest& DeleteMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMessageRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void DeleteMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DeleteMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DeleteMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DeleteMessageRequest)
  return target;
}

size_t DeleteMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DeleteMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DeleteMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DeleteMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DeleteMessageRequest)
    MergeFrom(*source);
  }
}

void DeleteMessageRequest::MergeFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DeleteMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void DeleteMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DeleteMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMessageRequest::CopyFrom(const DeleteMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DeleteMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMessageRequest::IsInitialized() const {
  return true;
}

void DeleteMessageRequest::InternalSwap(DeleteMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteMessageRequest, message_id_)
      + sizeof(DeleteMessageRequest::message_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteMessageRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TriggerActionRequest::InitAsDefaultInstance() {
}
class TriggerActionRequest::_Internal {
 public:
};

TriggerActionRequest::TriggerActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.TriggerActionRequest)
}
TriggerActionRequest::TriggerActionRequest(const TriggerActionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_id().empty()) {
    action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_id(),
      GetArena());
  }
  action_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_data().empty()) {
    action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_data(),
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.TriggerActionRequest)
}

void TriggerActionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto.base);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

TriggerActionRequest::~TriggerActionRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.TriggerActionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TriggerActionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TriggerActionRequest::ArenaDtor(void* object) {
  TriggerActionRequest* _this = reinterpret_cast< TriggerActionRequest* >(object);
  (void)_this;
}
void TriggerActionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TriggerActionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerActionRequest& TriggerActionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerActionRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void TriggerActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.TriggerActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TriggerActionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.TriggerActionRequest.action_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_action_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.TriggerActionRequest.action_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerActionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.TriggerActionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  // string action_id = 4;
  if (this->action_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_id().data(), static_cast<int>(this->_internal_action_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.TriggerActionRequest.action_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action_id(), target);
  }

  // string action_data = 5;
  if (this->action_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_data().data(), static_cast<int>(this->_internal_action_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.TriggerActionRequest.action_data");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.TriggerActionRequest)
  return target;
}

size_t TriggerActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.TriggerActionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_id = 4;
  if (this->action_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_id());
  }

  // string action_data = 5;
  if (this->action_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_data());
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerActionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.TriggerActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerActionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerActionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.TriggerActionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.TriggerActionRequest)
    MergeFrom(*source);
  }
}

void TriggerActionRequest::MergeFrom(const TriggerActionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.TriggerActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_id().size() > 0) {
    _internal_set_action_id(from._internal_action_id());
  }
  if (from.action_data().size() > 0) {
    _internal_set_action_data(from._internal_action_data());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void TriggerActionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.TriggerActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerActionRequest::CopyFrom(const TriggerActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.TriggerActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerActionRequest::IsInitialized() const {
  return true;
}

void TriggerActionRequest::InternalSwap(TriggerActionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_id_.Swap(&other->action_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_data_.Swap(&other->action_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TriggerActionRequest, message_id_)
      + sizeof(TriggerActionRequest::message_id_)
      - PROTOBUF_FIELD_OFFSET(TriggerActionRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerActionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_SendMessageRequest_default_instance_._instance.get_mutable()->content_ = const_cast< ::protocol::harmonytypes::v1::Content*>(
      ::protocol::harmonytypes::v1::Content::internal_default_instance());
  ::protocol::chat::v1::_SendMessageRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
  ::protocol::chat::v1::_SendMessageRequest_default_instance_._instance.get_mutable()->overrides_ = const_cast< ::protocol::harmonytypes::v1::Override*>(
      ::protocol::harmonytypes::v1::Override::internal_default_instance());
}
class SendMessageRequest::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Content& content(const SendMessageRequest* msg);
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const SendMessageRequest* msg);
  static const ::protocol::harmonytypes::v1::Override& overrides(const SendMessageRequest* msg);
};

const ::protocol::harmonytypes::v1::Content&
SendMessageRequest::_Internal::content(const SendMessageRequest* msg) {
  return *msg->content_;
}
const ::protocol::harmonytypes::v1::Metadata&
SendMessageRequest::_Internal::metadata(const SendMessageRequest* msg) {
  return *msg->metadata_;
}
const ::protocol::harmonytypes::v1::Override&
SendMessageRequest::_Internal::overrides(const SendMessageRequest* msg) {
  return *msg->overrides_;
}
void SendMessageRequest::clear_content() {
  if (GetArena() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
void SendMessageRequest::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void SendMessageRequest::clear_overrides() {
  if (GetArena() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
SendMessageRequest::SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_content()) {
    content_ = new ::protocol::harmonytypes::v1::Content(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_overrides()) {
    overrides_ = new ::protocol::harmonytypes::v1::Override(*from.overrides_);
  } else {
    overrides_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_reply_to_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(in_reply_to_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto.base);
  ::memset(&content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_reply_to_) -
      reinterpret_cast<char*>(&content_)) + sizeof(in_reply_to_));
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.SendMessageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete overrides_;
}

void SendMessageRequest::ArenaDtor(void* object) {
  SendMessageRequest* _this = reinterpret_cast< SendMessageRequest* >(object);
  (void)_this;
}
void SendMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageRequest& SendMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArena() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_reply_to_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(in_reply_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Content content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 echo_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          echo_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Override overrides = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_overrides(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 in_reply_to = 7 [jstype = JS_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          in_reply_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // .protocol.harmonytypes.v1.Content content = 3;
  if (this->has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content(this), target, stream);
  }

  // uint64 echo_id = 4;
  if (this->echo_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_echo_id(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // .protocol.harmonytypes.v1.Override overrides = 6;
  if (this->has_overrides()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::overrides(this), target, stream);
  }

  // uint64 in_reply_to = 7 [jstype = JS_STRING];
  if (this->in_reply_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_in_reply_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.SendMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.harmonytypes.v1.Content content = 3;
  if (this->has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .protocol.harmonytypes.v1.Override overrides = 6;
  if (this->has_overrides()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overrides_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 echo_id = 4;
  if (this->echo_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_echo_id());
  }

  // uint64 in_reply_to = 7 [jstype = JS_STRING];
  if (this->in_reply_to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_in_reply_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.SendMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.SendMessageRequest)
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_content()) {
    _internal_mutable_content()->::protocol::harmonytypes::v1::Content::MergeFrom(from._internal_content());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_overrides()) {
    _internal_mutable_overrides()->::protocol::harmonytypes::v1::Override::MergeFrom(from._internal_overrides());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.echo_id() != 0) {
    _internal_set_echo_id(from._internal_echo_id());
  }
  if (from.in_reply_to() != 0) {
    _internal_set_in_reply_to(from._internal_in_reply_to());
  }
}

void SendMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageRequest, in_reply_to_)
      + sizeof(SendMessageRequest::in_reply_to_)
      - PROTOBUF_FIELD_OFFSET(SendMessageRequest, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageResponse::InitAsDefaultInstance() {
}
class SendMessageResponse::_Internal {
 public:
};

SendMessageResponse::SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_ = from.message_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.SendMessageResponse)
}

void SendMessageResponse::SharedCtor() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.SendMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendMessageResponse::ArenaDtor(void* object) {
  SendMessageResponse* _this = reinterpret_cast< SendMessageResponse* >(object);
  (void)_this;
}
void SendMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageResponse& SendMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageResponse_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 message_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 message_id = 1 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.SendMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 message_id = 1 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.SendMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.SendMessageResponse)
    MergeFrom(*source);
  }
}

void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void SendMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_id_, other->message_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMessageTextRequest::InitAsDefaultInstance() {
}
class UpdateMessageTextRequest::_Internal {
 public:
};

UpdateMessageTextRequest::UpdateMessageTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.UpdateMessageTextRequest)
}
UpdateMessageTextRequest::UpdateMessageTextRequest(const UpdateMessageTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_content().empty()) {
    new_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_content(),
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.UpdateMessageTextRequest)
}

void UpdateMessageTextRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto.base);
  new_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
}

UpdateMessageTextRequest::~UpdateMessageTextRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.UpdateMessageTextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMessageTextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateMessageTextRequest::ArenaDtor(void* object) {
  UpdateMessageTextRequest* _this = reinterpret_cast< UpdateMessageTextRequest* >(object);
  (void)_this;
}
void UpdateMessageTextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMessageTextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMessageTextRequest& UpdateMessageTextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMessageTextRequest_chat_2fv1_2fmessages_2eproto.base);
  return *internal_default_instance();
}


void UpdateMessageTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.UpdateMessageTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(message_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessageTextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 message_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.UpdateMessageTextRequest.new_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMessageTextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.UpdateMessageTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_message_id(), target);
  }

  // string new_content = 4;
  if (this->new_content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_content().data(), static_cast<int>(this->_internal_new_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.UpdateMessageTextRequest.new_content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.UpdateMessageTextRequest)
  return target;
}

size_t UpdateMessageTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.UpdateMessageTextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_content = 4;
  if (this->new_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_content());
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 message_id = 3 [jstype = JS_STRING];
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_message_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMessageTextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.UpdateMessageTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMessageTextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMessageTextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.UpdateMessageTextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.UpdateMessageTextRequest)
    MergeFrom(*source);
  }
}

void UpdateMessageTextRequest::MergeFrom(const UpdateMessageTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.UpdateMessageTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_content().size() > 0) {
    _internal_set_new_content(from._internal_new_content());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
}

void UpdateMessageTextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.UpdateMessageTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMessageTextRequest::CopyFrom(const UpdateMessageTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.UpdateMessageTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessageTextRequest::IsInitialized() const {
  return true;
}

void UpdateMessageTextRequest::InternalSwap(UpdateMessageTextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new_content_.Swap(&other->new_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMessageTextRequest, message_id_)
      + sizeof(UpdateMessageTextRequest::message_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateMessageTextRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessageTextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetChannelMessagesRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetChannelMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetChannelMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetChannelMessagesResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetChannelMessagesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetChannelMessagesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetMessageRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetMessageResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DeleteMessageRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DeleteMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DeleteMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::TriggerActionRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::TriggerActionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::TriggerActionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::SendMessageRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::SendMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::SendMessageResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::SendMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::UpdateMessageTextRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::UpdateMessageTextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::UpdateMessageTextRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
