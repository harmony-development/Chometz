// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice/v1/voice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_2fv1_2fvoice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_2fv1_2fvoice_2eproto;
namespace protocol {
namespace voice {
namespace v1 {
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
class ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class StreamStateRequest;
class StreamStateRequestDefaultTypeInternal;
extern StreamStateRequestDefaultTypeInternal _StreamStateRequest_default_instance_;
}  // namespace v1
}  // namespace voice
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::voice::v1::ConnectRequest* Arena::CreateMaybeMessage<::protocol::voice::v1::ConnectRequest>(Arena*);
template<> ::protocol::voice::v1::ConnectResponse* Arena::CreateMaybeMessage<::protocol::voice::v1::ConnectResponse>(Arena*);
template<> ::protocol::voice::v1::Signal* Arena::CreateMaybeMessage<::protocol::voice::v1::Signal>(Arena*);
template<> ::protocol::voice::v1::StreamStateRequest* Arena::CreateMaybeMessage<::protocol::voice::v1::StreamStateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace voice {
namespace v1 {

// ===================================================================

class Signal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {};
  virtual ~Signal();

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal& default_instance();

  enum EventCase {
    kIceCandidate = 1,
    kRenegotiationNeeded = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIceCandidateFieldNumber = 1,
    kRenegotiationNeededFieldNumber = 2,
  };
  // string ice_candidate = 1;
  private:
  bool _internal_has_ice_candidate() const;
  public:
  void clear_ice_candidate();
  const std::string& ice_candidate() const;
  void set_ice_candidate(const std::string& value);
  void set_ice_candidate(std::string&& value);
  void set_ice_candidate(const char* value);
  void set_ice_candidate(const char* value, size_t size);
  std::string* mutable_ice_candidate();
  std::string* release_ice_candidate();
  void set_allocated_ice_candidate(std::string* ice_candidate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ice_candidate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ice_candidate(
      std::string* ice_candidate);
  private:
  const std::string& _internal_ice_candidate() const;
  void _internal_set_ice_candidate(const std::string& value);
  std::string* _internal_mutable_ice_candidate();
  public:

  // .google.protobuf.Empty renegotiation_needed = 2;
  bool has_renegotiation_needed() const;
  private:
  bool _internal_has_renegotiation_needed() const;
  public:
  void clear_renegotiation_needed();
  const PROTOBUF_NAMESPACE_ID::Empty& renegotiation_needed() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_renegotiation_needed();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_renegotiation_needed();
  void set_allocated_renegotiation_needed(PROTOBUF_NAMESPACE_ID::Empty* renegotiation_needed);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_renegotiation_needed() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_renegotiation_needed();
  public:
  void unsafe_arena_set_allocated_renegotiation_needed(
      PROTOBUF_NAMESPACE_ID::Empty* renegotiation_needed);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_renegotiation_needed();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:protocol.voice.v1.Signal)
 private:
  class _Internal;
  void set_has_ice_candidate();
  void set_has_renegotiation_needed();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ice_candidate_;
    PROTOBUF_NAMESPACE_ID::Empty* renegotiation_needed_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {};
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const final {
    return CreateMaybeMessage<ConnectRequest>(nullptr);
  }

  ConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.ConnectRequest";
  }
  protected:
  explicit ConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfferFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // string offer = 2;
  void clear_offer();
  const std::string& offer() const;
  void set_offer(const std::string& value);
  void set_offer(std::string&& value);
  void set_offer(const char* value);
  void set_offer(const char* value, size_t size);
  std::string* mutable_offer();
  std::string* release_offer();
  void set_allocated_offer(std::string* offer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_offer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_offer(
      std::string* offer);
  private:
  const std::string& _internal_offer() const;
  void _internal_set_offer(const std::string& value);
  std::string* _internal_mutable_offer();
  public:

  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.ConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.ConnectResponse) */ {
 public:
  inline ConnectResponse() : ConnectResponse(nullptr) {};
  virtual ~ConnectResponse();

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponse* New() const final {
    return CreateMaybeMessage<ConnectResponse>(nullptr);
  }

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.ConnectResponse";
  }
  protected:
  explicit ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  void set_answer(const std::string& value);
  void set_answer(std::string&& value);
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  std::string* mutable_answer();
  std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_answer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_answer(
      std::string* answer);
  private:
  const std::string& _internal_answer() const;
  void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.ConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class StreamStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.StreamStateRequest) */ {
 public:
  inline StreamStateRequest() : StreamStateRequest(nullptr) {};
  virtual ~StreamStateRequest();

  StreamStateRequest(const StreamStateRequest& from);
  StreamStateRequest(StreamStateRequest&& from) noexcept
    : StreamStateRequest() {
    *this = ::std::move(from);
  }

  inline StreamStateRequest& operator=(const StreamStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStateRequest& operator=(StreamStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStateRequest* internal_default_instance() {
    return reinterpret_cast<const StreamStateRequest*>(
               &_StreamStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamStateRequest& a, StreamStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStateRequest* New() const final {
    return CreateMaybeMessage<StreamStateRequest>(nullptr);
  }

  StreamStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStateRequest& from);
  void MergeFrom(const StreamStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.StreamStateRequest";
  }
  protected:
  explicit StreamStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.StreamStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signal

// string ice_candidate = 1;
inline bool Signal::_internal_has_ice_candidate() const {
  return event_case() == kIceCandidate;
}
inline void Signal::set_has_ice_candidate() {
  _oneof_case_[0] = kIceCandidate;
}
inline void Signal::clear_ice_candidate() {
  if (_internal_has_ice_candidate()) {
    event_.ice_candidate_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_event();
  }
}
inline const std::string& Signal::ice_candidate() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.ice_candidate)
  return _internal_ice_candidate();
}
inline void Signal::set_ice_candidate(const std::string& value) {
  _internal_set_ice_candidate(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.Signal.ice_candidate)
}
inline std::string* Signal::mutable_ice_candidate() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.ice_candidate)
  return _internal_mutable_ice_candidate();
}
inline const std::string& Signal::_internal_ice_candidate() const {
  if (_internal_has_ice_candidate()) {
    return event_.ice_candidate_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Signal::_internal_set_ice_candidate(const std::string& value) {
  if (!_internal_has_ice_candidate()) {
    clear_event();
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.ice_candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signal::set_ice_candidate(std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.voice.v1.Signal.ice_candidate)
  if (!_internal_has_ice_candidate()) {
    clear_event();
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.ice_candidate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.Signal.ice_candidate)
}
inline void Signal::set_ice_candidate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_ice_candidate()) {
    clear_event();
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.ice_candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.Signal.ice_candidate)
}
inline void Signal::set_ice_candidate(const char* value,
                             size_t size) {
  if (!_internal_has_ice_candidate()) {
    clear_event();
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  event_.ice_candidate_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.Signal.ice_candidate)
}
inline std::string* Signal::_internal_mutable_ice_candidate() {
  if (!_internal_has_ice_candidate()) {
    clear_event();
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return event_.ice_candidate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signal::release_ice_candidate() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.ice_candidate)
  if (_internal_has_ice_candidate()) {
    clear_has_event();
    return event_.ice_candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Signal::set_allocated_ice_candidate(std::string* ice_candidate) {
  if (has_event()) {
    clear_event();
  }
  if (ice_candidate != nullptr) {
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeSetDefault(ice_candidate);
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.Signal.ice_candidate)
}
inline std::string* Signal::unsafe_arena_release_ice_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.ice_candidate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_ice_candidate()) {
    clear_has_event();
    return event_.ice_candidate_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Signal::unsafe_arena_set_allocated_ice_candidate(std::string* ice_candidate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_ice_candidate()) {
    event_.ice_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_event();
  if (ice_candidate) {
    set_has_ice_candidate();
    event_.ice_candidate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ice_candidate, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.ice_candidate)
}

// .google.protobuf.Empty renegotiation_needed = 2;
inline bool Signal::_internal_has_renegotiation_needed() const {
  return event_case() == kRenegotiationNeeded;
}
inline bool Signal::has_renegotiation_needed() const {
  return _internal_has_renegotiation_needed();
}
inline void Signal::set_has_renegotiation_needed() {
  _oneof_case_[0] = kRenegotiationNeeded;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Signal::release_renegotiation_needed() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.renegotiation_needed)
  if (_internal_has_renegotiation_needed()) {
    clear_has_event();
      PROTOBUF_NAMESPACE_ID::Empty* temp = event_.renegotiation_needed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.renegotiation_needed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Signal::_internal_renegotiation_needed() const {
  return _internal_has_renegotiation_needed()
      ? *event_.renegotiation_needed_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Signal::renegotiation_needed() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.renegotiation_needed)
  return _internal_renegotiation_needed();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Signal::unsafe_arena_release_renegotiation_needed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.renegotiation_needed)
  if (_internal_has_renegotiation_needed()) {
    clear_has_event();
    PROTOBUF_NAMESPACE_ID::Empty* temp = event_.renegotiation_needed_;
    event_.renegotiation_needed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Signal::unsafe_arena_set_allocated_renegotiation_needed(PROTOBUF_NAMESPACE_ID::Empty* renegotiation_needed) {
  clear_event();
  if (renegotiation_needed) {
    set_has_renegotiation_needed();
    event_.renegotiation_needed_ = renegotiation_needed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.renegotiation_needed)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Signal::_internal_mutable_renegotiation_needed() {
  if (!_internal_has_renegotiation_needed()) {
    clear_event();
    set_has_renegotiation_needed();
    event_.renegotiation_needed_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return event_.renegotiation_needed_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Signal::mutable_renegotiation_needed() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.renegotiation_needed)
  return _internal_mutable_renegotiation_needed();
}

inline bool Signal::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Signal::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Signal::EventCase Signal::event_case() const {
  return Signal::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConnectRequest

// uint64 channel_id = 1;
inline void ConnectRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ConnectRequest.channel_id)
  return _internal_channel_id();
}
inline void ConnectRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void ConnectRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.ConnectRequest.channel_id)
}

// string offer = 2;
inline void ConnectRequest::clear_offer() {
  offer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectRequest::offer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ConnectRequest.offer)
  return _internal_offer();
}
inline void ConnectRequest::set_offer(const std::string& value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.ConnectRequest.offer)
}
inline std::string* ConnectRequest::mutable_offer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ConnectRequest.offer)
  return _internal_mutable_offer();
}
inline const std::string& ConnectRequest::_internal_offer() const {
  return offer_.Get();
}
inline void ConnectRequest::_internal_set_offer(const std::string& value) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectRequest::set_offer(std::string&& value) {
  
  offer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.ConnectRequest.offer)
}
inline void ConnectRequest::set_offer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.ConnectRequest.offer)
}
inline void ConnectRequest::set_offer(const char* value,
    size_t size) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.ConnectRequest.offer)
}
inline std::string* ConnectRequest::_internal_mutable_offer() {
  
  return offer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectRequest::release_offer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ConnectRequest.offer)
  return offer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectRequest::set_allocated_offer(std::string* offer) {
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ConnectRequest.offer)
}
inline std::string* ConnectRequest::unsafe_arena_release_offer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ConnectRequest.offer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return offer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectRequest::unsafe_arena_set_allocated_offer(
    std::string* offer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      offer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ConnectRequest.offer)
}

// -------------------------------------------------------------------

// ConnectResponse

// string answer = 1;
inline void ConnectResponse::clear_answer() {
  answer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectResponse::answer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ConnectResponse.answer)
  return _internal_answer();
}
inline void ConnectResponse::set_answer(const std::string& value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.ConnectResponse.answer)
}
inline std::string* ConnectResponse::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ConnectResponse.answer)
  return _internal_mutable_answer();
}
inline const std::string& ConnectResponse::_internal_answer() const {
  return answer_.Get();
}
inline void ConnectResponse::_internal_set_answer(const std::string& value) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectResponse::set_answer(std::string&& value) {
  
  answer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.ConnectResponse.answer)
}
inline void ConnectResponse::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.ConnectResponse.answer)
}
inline void ConnectResponse::set_answer(const char* value,
    size_t size) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.ConnectResponse.answer)
}
inline std::string* ConnectResponse::_internal_mutable_answer() {
  
  return answer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectResponse::release_answer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ConnectResponse.answer)
  return answer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectResponse::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ConnectResponse.answer)
}
inline std::string* ConnectResponse::unsafe_arena_release_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ConnectResponse.answer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return answer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectResponse::unsafe_arena_set_allocated_answer(
    std::string* answer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      answer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ConnectResponse.answer)
}

// -------------------------------------------------------------------

// StreamStateRequest

// uint64 channel_id = 1;
inline void StreamStateRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StreamStateRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.StreamStateRequest.channel_id)
  return _internal_channel_id();
}
inline void StreamStateRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void StreamStateRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.StreamStateRequest.channel_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace voice
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto
