// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync/v1/sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_2fv1_2fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_2fv1_2fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_2fv1_2fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_2fv1_2fsync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_2fv1_2fsync_2eproto;
namespace protocol {
namespace sync {
namespace v1 {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_UserAddedToGuild;
class Event_UserAddedToGuildDefaultTypeInternal;
extern Event_UserAddedToGuildDefaultTypeInternal _Event_UserAddedToGuild_default_instance_;
class Event_UserRemovedFromGuild;
class Event_UserRemovedFromGuildDefaultTypeInternal;
extern Event_UserRemovedFromGuildDefaultTypeInternal _Event_UserRemovedFromGuild_default_instance_;
class PostEventRequest;
class PostEventRequestDefaultTypeInternal;
extern PostEventRequestDefaultTypeInternal _PostEventRequest_default_instance_;
class Syn;
class SynDefaultTypeInternal;
extern SynDefaultTypeInternal _Syn_default_instance_;
}  // namespace v1
}  // namespace sync
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::sync::v1::Ack* Arena::CreateMaybeMessage<::protocol::sync::v1::Ack>(Arena*);
template<> ::protocol::sync::v1::Event* Arena::CreateMaybeMessage<::protocol::sync::v1::Event>(Arena*);
template<> ::protocol::sync::v1::Event_UserAddedToGuild* Arena::CreateMaybeMessage<::protocol::sync::v1::Event_UserAddedToGuild>(Arena*);
template<> ::protocol::sync::v1::Event_UserRemovedFromGuild* Arena::CreateMaybeMessage<::protocol::sync::v1::Event_UserRemovedFromGuild>(Arena*);
template<> ::protocol::sync::v1::PostEventRequest* Arena::CreateMaybeMessage<::protocol::sync::v1::PostEventRequest>(Arena*);
template<> ::protocol::sync::v1::Syn* Arena::CreateMaybeMessage<::protocol::sync::v1::Syn>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace sync {
namespace v1 {

// ===================================================================

class Event_UserRemovedFromGuild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.Event.UserRemovedFromGuild) */ {
 public:
  inline Event_UserRemovedFromGuild() : Event_UserRemovedFromGuild(nullptr) {};
  virtual ~Event_UserRemovedFromGuild();

  Event_UserRemovedFromGuild(const Event_UserRemovedFromGuild& from);
  Event_UserRemovedFromGuild(Event_UserRemovedFromGuild&& from) noexcept
    : Event_UserRemovedFromGuild() {
    *this = ::std::move(from);
  }

  inline Event_UserRemovedFromGuild& operator=(const Event_UserRemovedFromGuild& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_UserRemovedFromGuild& operator=(Event_UserRemovedFromGuild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_UserRemovedFromGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_UserRemovedFromGuild* internal_default_instance() {
    return reinterpret_cast<const Event_UserRemovedFromGuild*>(
               &_Event_UserRemovedFromGuild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event_UserRemovedFromGuild& a, Event_UserRemovedFromGuild& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_UserRemovedFromGuild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_UserRemovedFromGuild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_UserRemovedFromGuild* New() const final {
    return CreateMaybeMessage<Event_UserRemovedFromGuild>(nullptr);
  }

  Event_UserRemovedFromGuild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_UserRemovedFromGuild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_UserRemovedFromGuild& from);
  void MergeFrom(const Event_UserRemovedFromGuild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_UserRemovedFromGuild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.Event.UserRemovedFromGuild";
  }
  protected:
  explicit Event_UserRemovedFromGuild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.sync.v1.Event.UserRemovedFromGuild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// -------------------------------------------------------------------

class Event_UserAddedToGuild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.Event.UserAddedToGuild) */ {
 public:
  inline Event_UserAddedToGuild() : Event_UserAddedToGuild(nullptr) {};
  virtual ~Event_UserAddedToGuild();

  Event_UserAddedToGuild(const Event_UserAddedToGuild& from);
  Event_UserAddedToGuild(Event_UserAddedToGuild&& from) noexcept
    : Event_UserAddedToGuild() {
    *this = ::std::move(from);
  }

  inline Event_UserAddedToGuild& operator=(const Event_UserAddedToGuild& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event_UserAddedToGuild& operator=(Event_UserAddedToGuild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event_UserAddedToGuild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event_UserAddedToGuild* internal_default_instance() {
    return reinterpret_cast<const Event_UserAddedToGuild*>(
               &_Event_UserAddedToGuild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event_UserAddedToGuild& a, Event_UserAddedToGuild& b) {
    a.Swap(&b);
  }
  inline void Swap(Event_UserAddedToGuild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event_UserAddedToGuild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event_UserAddedToGuild* New() const final {
    return CreateMaybeMessage<Event_UserAddedToGuild>(nullptr);
  }

  Event_UserAddedToGuild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event_UserAddedToGuild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event_UserAddedToGuild& from);
  void MergeFrom(const Event_UserAddedToGuild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event_UserAddedToGuild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.Event.UserAddedToGuild";
  }
  protected:
  explicit Event_UserAddedToGuild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 guild_id = 2;
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.sync.v1.Event.UserAddedToGuild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  enum KindCase {
    kUserRemovedFromGuild = 1,
    kUserAddedToGuild = 2,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Event_UserRemovedFromGuild UserRemovedFromGuild;
  typedef Event_UserAddedToGuild UserAddedToGuild;

  // accessors -------------------------------------------------------

  enum : int {
    kUserRemovedFromGuildFieldNumber = 1,
    kUserAddedToGuildFieldNumber = 2,
  };
  // .protocol.sync.v1.Event.UserRemovedFromGuild user_removed_from_guild = 1;
  bool has_user_removed_from_guild() const;
  private:
  bool _internal_has_user_removed_from_guild() const;
  public:
  void clear_user_removed_from_guild();
  const ::protocol::sync::v1::Event_UserRemovedFromGuild& user_removed_from_guild() const;
  ::protocol::sync::v1::Event_UserRemovedFromGuild* release_user_removed_from_guild();
  ::protocol::sync::v1::Event_UserRemovedFromGuild* mutable_user_removed_from_guild();
  void set_allocated_user_removed_from_guild(::protocol::sync::v1::Event_UserRemovedFromGuild* user_removed_from_guild);
  private:
  const ::protocol::sync::v1::Event_UserRemovedFromGuild& _internal_user_removed_from_guild() const;
  ::protocol::sync::v1::Event_UserRemovedFromGuild* _internal_mutable_user_removed_from_guild();
  public:
  void unsafe_arena_set_allocated_user_removed_from_guild(
      ::protocol::sync::v1::Event_UserRemovedFromGuild* user_removed_from_guild);
  ::protocol::sync::v1::Event_UserRemovedFromGuild* unsafe_arena_release_user_removed_from_guild();

  // .protocol.sync.v1.Event.UserAddedToGuild user_added_to_guild = 2;
  bool has_user_added_to_guild() const;
  private:
  bool _internal_has_user_added_to_guild() const;
  public:
  void clear_user_added_to_guild();
  const ::protocol::sync::v1::Event_UserAddedToGuild& user_added_to_guild() const;
  ::protocol::sync::v1::Event_UserAddedToGuild* release_user_added_to_guild();
  ::protocol::sync::v1::Event_UserAddedToGuild* mutable_user_added_to_guild();
  void set_allocated_user_added_to_guild(::protocol::sync::v1::Event_UserAddedToGuild* user_added_to_guild);
  private:
  const ::protocol::sync::v1::Event_UserAddedToGuild& _internal_user_added_to_guild() const;
  ::protocol::sync::v1::Event_UserAddedToGuild* _internal_mutable_user_added_to_guild();
  public:
  void unsafe_arena_set_allocated_user_added_to_guild(
      ::protocol::sync::v1::Event_UserAddedToGuild* user_added_to_guild);
  ::protocol::sync::v1::Event_UserAddedToGuild* unsafe_arena_release_user_added_to_guild();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:protocol.sync.v1.Event)
 private:
  class _Internal;
  void set_has_user_removed_from_guild();
  void set_has_user_added_to_guild();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    KindUnion() {}
    ::protocol::sync::v1::Event_UserRemovedFromGuild* user_removed_from_guild_;
    ::protocol::sync::v1::Event_UserAddedToGuild* user_added_to_guild_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// -------------------------------------------------------------------

class PostEventRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.PostEventRequest) */ {
 public:
  inline PostEventRequest() : PostEventRequest(nullptr) {};
  virtual ~PostEventRequest();

  PostEventRequest(const PostEventRequest& from);
  PostEventRequest(PostEventRequest&& from) noexcept
    : PostEventRequest() {
    *this = ::std::move(from);
  }

  inline PostEventRequest& operator=(const PostEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostEventRequest& operator=(PostEventRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostEventRequest* internal_default_instance() {
    return reinterpret_cast<const PostEventRequest*>(
               &_PostEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostEventRequest& a, PostEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostEventRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostEventRequest* New() const final {
    return CreateMaybeMessage<PostEventRequest>(nullptr);
  }

  PostEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostEventRequest& from);
  void MergeFrom(const PostEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.PostEventRequest";
  }
  protected:
  explicit PostEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .protocol.sync.v1.Event event = 1;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::protocol::sync::v1::Event& event() const;
  ::protocol::sync::v1::Event* release_event();
  ::protocol::sync::v1::Event* mutable_event();
  void set_allocated_event(::protocol::sync::v1::Event* event);
  private:
  const ::protocol::sync::v1::Event& _internal_event() const;
  ::protocol::sync::v1::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::protocol::sync::v1::Event* event);
  ::protocol::sync::v1::Event* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:protocol.sync.v1.PostEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::sync::v1::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// -------------------------------------------------------------------

class Ack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {};
  virtual ~Ack();

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(nullptr);
  }

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
  };
  // uint64 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.sync.v1.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// -------------------------------------------------------------------

class Syn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.sync.v1.Syn) */ {
 public:
  inline Syn() : Syn(nullptr) {};
  virtual ~Syn();

  Syn(const Syn& from);
  Syn(Syn&& from) noexcept
    : Syn() {
    *this = ::std::move(from);
  }

  inline Syn& operator=(const Syn& from) {
    CopyFrom(from);
    return *this;
  }
  inline Syn& operator=(Syn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Syn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Syn* internal_default_instance() {
    return reinterpret_cast<const Syn*>(
               &_Syn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Syn& a, Syn& b) {
    a.Swap(&b);
  }
  inline void Swap(Syn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Syn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Syn* New() const final {
    return CreateMaybeMessage<Syn>(nullptr);
  }

  Syn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Syn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Syn& from);
  void MergeFrom(const Syn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Syn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.sync.v1.Syn";
  }
  protected:
  explicit Syn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_2fv1_2fsync_2eproto);
    return ::descriptor_table_sync_2fv1_2fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // .protocol.sync.v1.Event event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::protocol::sync::v1::Event& event() const;
  ::protocol::sync::v1::Event* release_event();
  ::protocol::sync::v1::Event* mutable_event();
  void set_allocated_event(::protocol::sync::v1::Event* event);
  private:
  const ::protocol::sync::v1::Event& _internal_event() const;
  ::protocol::sync::v1::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::protocol::sync::v1::Event* event);
  ::protocol::sync::v1::Event* unsafe_arena_release_event();

  // uint64 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.sync.v1.Syn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::sync::v1::Event* event_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sync_2fv1_2fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_UserRemovedFromGuild

// uint64 user_id = 1;
inline void Event_UserRemovedFromGuild::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRemovedFromGuild::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRemovedFromGuild::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.UserRemovedFromGuild.user_id)
  return _internal_user_id();
}
inline void Event_UserRemovedFromGuild::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Event_UserRemovedFromGuild::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Event.UserRemovedFromGuild.user_id)
}

// uint64 guild_id = 2;
inline void Event_UserRemovedFromGuild::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRemovedFromGuild::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserRemovedFromGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.UserRemovedFromGuild.guild_id)
  return _internal_guild_id();
}
inline void Event_UserRemovedFromGuild::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_UserRemovedFromGuild::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Event.UserRemovedFromGuild.guild_id)
}

// -------------------------------------------------------------------

// Event_UserAddedToGuild

// uint64 user_id = 1;
inline void Event_UserAddedToGuild::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserAddedToGuild::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserAddedToGuild::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.UserAddedToGuild.user_id)
  return _internal_user_id();
}
inline void Event_UserAddedToGuild::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Event_UserAddedToGuild::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Event.UserAddedToGuild.user_id)
}

// uint64 guild_id = 2;
inline void Event_UserAddedToGuild::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserAddedToGuild::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Event_UserAddedToGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.UserAddedToGuild.guild_id)
  return _internal_guild_id();
}
inline void Event_UserAddedToGuild::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Event_UserAddedToGuild::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Event.UserAddedToGuild.guild_id)
}

// -------------------------------------------------------------------

// Event

// .protocol.sync.v1.Event.UserRemovedFromGuild user_removed_from_guild = 1;
inline bool Event::_internal_has_user_removed_from_guild() const {
  return kind_case() == kUserRemovedFromGuild;
}
inline bool Event::has_user_removed_from_guild() const {
  return _internal_has_user_removed_from_guild();
}
inline void Event::set_has_user_removed_from_guild() {
  _oneof_case_[0] = kUserRemovedFromGuild;
}
inline void Event::clear_user_removed_from_guild() {
  if (_internal_has_user_removed_from_guild()) {
    if (GetArena() == nullptr) {
      delete kind_.user_removed_from_guild_;
    }
    clear_has_kind();
  }
}
inline ::protocol::sync::v1::Event_UserRemovedFromGuild* Event::release_user_removed_from_guild() {
  // @@protoc_insertion_point(field_release:protocol.sync.v1.Event.user_removed_from_guild)
  if (_internal_has_user_removed_from_guild()) {
    clear_has_kind();
      ::protocol::sync::v1::Event_UserRemovedFromGuild* temp = kind_.user_removed_from_guild_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.user_removed_from_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::sync::v1::Event_UserRemovedFromGuild& Event::_internal_user_removed_from_guild() const {
  return _internal_has_user_removed_from_guild()
      ? *kind_.user_removed_from_guild_
      : *reinterpret_cast< ::protocol::sync::v1::Event_UserRemovedFromGuild*>(&::protocol::sync::v1::_Event_UserRemovedFromGuild_default_instance_);
}
inline const ::protocol::sync::v1::Event_UserRemovedFromGuild& Event::user_removed_from_guild() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.user_removed_from_guild)
  return _internal_user_removed_from_guild();
}
inline ::protocol::sync::v1::Event_UserRemovedFromGuild* Event::unsafe_arena_release_user_removed_from_guild() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.sync.v1.Event.user_removed_from_guild)
  if (_internal_has_user_removed_from_guild()) {
    clear_has_kind();
    ::protocol::sync::v1::Event_UserRemovedFromGuild* temp = kind_.user_removed_from_guild_;
    kind_.user_removed_from_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_user_removed_from_guild(::protocol::sync::v1::Event_UserRemovedFromGuild* user_removed_from_guild) {
  clear_kind();
  if (user_removed_from_guild) {
    set_has_user_removed_from_guild();
    kind_.user_removed_from_guild_ = user_removed_from_guild;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.sync.v1.Event.user_removed_from_guild)
}
inline ::protocol::sync::v1::Event_UserRemovedFromGuild* Event::_internal_mutable_user_removed_from_guild() {
  if (!_internal_has_user_removed_from_guild()) {
    clear_kind();
    set_has_user_removed_from_guild();
    kind_.user_removed_from_guild_ = CreateMaybeMessage< ::protocol::sync::v1::Event_UserRemovedFromGuild >(GetArena());
  }
  return kind_.user_removed_from_guild_;
}
inline ::protocol::sync::v1::Event_UserRemovedFromGuild* Event::mutable_user_removed_from_guild() {
  // @@protoc_insertion_point(field_mutable:protocol.sync.v1.Event.user_removed_from_guild)
  return _internal_mutable_user_removed_from_guild();
}

// .protocol.sync.v1.Event.UserAddedToGuild user_added_to_guild = 2;
inline bool Event::_internal_has_user_added_to_guild() const {
  return kind_case() == kUserAddedToGuild;
}
inline bool Event::has_user_added_to_guild() const {
  return _internal_has_user_added_to_guild();
}
inline void Event::set_has_user_added_to_guild() {
  _oneof_case_[0] = kUserAddedToGuild;
}
inline void Event::clear_user_added_to_guild() {
  if (_internal_has_user_added_to_guild()) {
    if (GetArena() == nullptr) {
      delete kind_.user_added_to_guild_;
    }
    clear_has_kind();
  }
}
inline ::protocol::sync::v1::Event_UserAddedToGuild* Event::release_user_added_to_guild() {
  // @@protoc_insertion_point(field_release:protocol.sync.v1.Event.user_added_to_guild)
  if (_internal_has_user_added_to_guild()) {
    clear_has_kind();
      ::protocol::sync::v1::Event_UserAddedToGuild* temp = kind_.user_added_to_guild_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.user_added_to_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::sync::v1::Event_UserAddedToGuild& Event::_internal_user_added_to_guild() const {
  return _internal_has_user_added_to_guild()
      ? *kind_.user_added_to_guild_
      : *reinterpret_cast< ::protocol::sync::v1::Event_UserAddedToGuild*>(&::protocol::sync::v1::_Event_UserAddedToGuild_default_instance_);
}
inline const ::protocol::sync::v1::Event_UserAddedToGuild& Event::user_added_to_guild() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Event.user_added_to_guild)
  return _internal_user_added_to_guild();
}
inline ::protocol::sync::v1::Event_UserAddedToGuild* Event::unsafe_arena_release_user_added_to_guild() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.sync.v1.Event.user_added_to_guild)
  if (_internal_has_user_added_to_guild()) {
    clear_has_kind();
    ::protocol::sync::v1::Event_UserAddedToGuild* temp = kind_.user_added_to_guild_;
    kind_.user_added_to_guild_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_user_added_to_guild(::protocol::sync::v1::Event_UserAddedToGuild* user_added_to_guild) {
  clear_kind();
  if (user_added_to_guild) {
    set_has_user_added_to_guild();
    kind_.user_added_to_guild_ = user_added_to_guild;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.sync.v1.Event.user_added_to_guild)
}
inline ::protocol::sync::v1::Event_UserAddedToGuild* Event::_internal_mutable_user_added_to_guild() {
  if (!_internal_has_user_added_to_guild()) {
    clear_kind();
    set_has_user_added_to_guild();
    kind_.user_added_to_guild_ = CreateMaybeMessage< ::protocol::sync::v1::Event_UserAddedToGuild >(GetArena());
  }
  return kind_.user_added_to_guild_;
}
inline ::protocol::sync::v1::Event_UserAddedToGuild* Event::mutable_user_added_to_guild() {
  // @@protoc_insertion_point(field_mutable:protocol.sync.v1.Event.user_added_to_guild)
  return _internal_mutable_user_added_to_guild();
}

inline bool Event::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Event::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Event::KindCase Event::kind_case() const {
  return Event::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PostEventRequest

// .protocol.sync.v1.Event event = 1;
inline bool PostEventRequest::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool PostEventRequest::has_event() const {
  return _internal_has_event();
}
inline void PostEventRequest::clear_event() {
  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::protocol::sync::v1::Event& PostEventRequest::_internal_event() const {
  const ::protocol::sync::v1::Event* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::sync::v1::Event*>(
      &::protocol::sync::v1::_Event_default_instance_);
}
inline const ::protocol::sync::v1::Event& PostEventRequest::event() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.PostEventRequest.event)
  return _internal_event();
}
inline void PostEventRequest::unsafe_arena_set_allocated_event(
    ::protocol::sync::v1::Event* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.sync.v1.PostEventRequest.event)
}
inline ::protocol::sync::v1::Event* PostEventRequest::release_event() {
  auto temp = unsafe_arena_release_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::sync::v1::Event* PostEventRequest::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:protocol.sync.v1.PostEventRequest.event)
  
  ::protocol::sync::v1::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::protocol::sync::v1::Event* PostEventRequest::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::sync::v1::Event>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::protocol::sync::v1::Event* PostEventRequest::mutable_event() {
  // @@protoc_insertion_point(field_mutable:protocol.sync.v1.PostEventRequest.event)
  return _internal_mutable_event();
}
inline void PostEventRequest::set_allocated_event(::protocol::sync::v1::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:protocol.sync.v1.PostEventRequest.event)
}

// -------------------------------------------------------------------

// Ack

// uint64 event_id = 1;
inline void Ack::clear_event_id() {
  event_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ack::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ack::event_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Ack.event_id)
  return _internal_event_id();
}
inline void Ack::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  event_id_ = value;
}
inline void Ack::set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Ack.event_id)
}

// -------------------------------------------------------------------

// Syn

// uint64 event_id = 1;
inline void Syn::clear_event_id() {
  event_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Syn::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Syn::event_id() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Syn.event_id)
  return _internal_event_id();
}
inline void Syn::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  event_id_ = value;
}
inline void Syn::set_event_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:protocol.sync.v1.Syn.event_id)
}

// .protocol.sync.v1.Event event = 2;
inline bool Syn::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool Syn::has_event() const {
  return _internal_has_event();
}
inline void Syn::clear_event() {
  if (GetArena() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::protocol::sync::v1::Event& Syn::_internal_event() const {
  const ::protocol::sync::v1::Event* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::sync::v1::Event*>(
      &::protocol::sync::v1::_Event_default_instance_);
}
inline const ::protocol::sync::v1::Event& Syn::event() const {
  // @@protoc_insertion_point(field_get:protocol.sync.v1.Syn.event)
  return _internal_event();
}
inline void Syn::unsafe_arena_set_allocated_event(
    ::protocol::sync::v1::Event* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.sync.v1.Syn.event)
}
inline ::protocol::sync::v1::Event* Syn::release_event() {
  auto temp = unsafe_arena_release_event();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::sync::v1::Event* Syn::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:protocol.sync.v1.Syn.event)
  
  ::protocol::sync::v1::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::protocol::sync::v1::Event* Syn::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::sync::v1::Event>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::protocol::sync::v1::Event* Syn::mutable_event() {
  // @@protoc_insertion_point(field_mutable:protocol.sync.v1.Syn.event)
  return _internal_mutable_event();
}
inline void Syn::set_allocated_event(::protocol::sync::v1::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:protocol.sync.v1.Syn.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sync
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_2fv1_2fsync_2eproto
